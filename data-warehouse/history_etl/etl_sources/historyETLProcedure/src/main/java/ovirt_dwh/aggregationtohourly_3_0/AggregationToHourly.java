// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.0.1.r74687)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package ovirt_dwh.aggregationtohourly_3_0;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.RoutineHistoryETL;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

/**
 * Job: AggregationToHourly Purpose: <br>
 * Description: <br>
 * 
 * @author ydary@redhat.com
 * @version 5.0.1.r74687
 * @status
 */
public class AggregationToHourly implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ovirtHistoryJdbcConnection != null) {

				this.setProperty("ovirtHistoryJdbcConnection",
						ovirtHistoryJdbcConnection.toString());

			}

			if (ovirtHistoryDriverClass != null) {

				this.setProperty("ovirtHistoryDriverClass",
						ovirtHistoryDriverClass.toString());

			}

			if (ovirtHistoryPassword != null) {

				this.setProperty("ovirtHistoryPassword", ovirtHistoryPassword
						.toString());

			}

			if (ovirtHistoryUser != null) {

				this.setProperty("ovirtHistoryUser", ovirtHistoryUser
						.toString());

			}

			if (runTime != null) {

				String pattern_runTime = "yyyy-MM-dd HH:mm:ss";
				String value_runTime = "yyyy-MM-dd HH:mm:ss.SSSSSS;2011-07-03 12:46:47.000000";
				String[] parts_runTime = value_runTime.split(";");
				if (parts_runTime.length > 1) {
					pattern_runTime = parts_runTime[0];
					this.setProperty("runTime", pattern_runTime
							+ ";"
							+ FormatterUtils.format_Date(runTime,
									pattern_runTime));
				} else {
					this.setProperty("runTime", FormatterUtils.format_Date(
							runTime, pattern_runTime));
				}

			}

		}

		public String ovirtHistoryJdbcConnection;

		public String getOvirtHistoryJdbcConnection() {
			return this.ovirtHistoryJdbcConnection;
		}

		public String ovirtHistoryDriverClass;

		public String getOvirtHistoryDriverClass() {
			return this.ovirtHistoryDriverClass;
		}

		public java.lang.String ovirtHistoryPassword;

		public java.lang.String getOvirtHistoryPassword() {
			return this.ovirtHistoryPassword;
		}

		public String ovirtHistoryUser;

		public String getOvirtHistoryUser() {
			return this.ovirtHistoryUser;
		}

		public java.util.Date runTime;

		public java.util.Date getRunTime() {
			return this.runTime;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "3.0";
	private final String jobName = "AggregationToHourly";
	private final String projectName = "OVIRT_DWH";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	public boolean isExportedAsOSGI = false;

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					AggregationToHourly.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(AggregationToHourly.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tJDBCInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_11", System.currentTimeMillis());

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_11", System.currentTimeMillis());

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_11", System.currentTimeMillis());

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_13", System.currentTimeMillis());

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_13", System.currentTimeMillis());

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_13", System.currentTimeMillis());

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostjob_1", System.currentTimeMillis());

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_6_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_6_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_7_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_7_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());

		tJDBCInput_13_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_8_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_8_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);

	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);

	}

	public void talendLogs_CONSOLE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public short datacenter_status;

		public short getDatacenter_status() {
			return this.datacenter_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int datacenter_configuration_version;

		public int getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					this.datacenter_configuration_version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// short

				dos.writeShort(this.datacenter_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.datacenter_configuration_version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_status=" + String.valueOf(datacenter_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public short datacenter_status;

		public short getDatacenter_status() {
			return this.datacenter_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int datacenter_configuration_version;

		public int getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					this.datacenter_configuration_version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// short

				dos.writeShort(this.datacenter_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.datacenter_configuration_version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_status=" + String.valueOf(datacenter_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class dc_history_aggregateStruct implements
			routines.system.IPersistableRow<dc_history_aggregateStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public short datacenter_status;

		public short getDatacenter_status() {
			return this.datacenter_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int datacenter_configuration_version;

		public int getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					this.datacenter_configuration_version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// short

				dos.writeShort(this.datacenter_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.datacenter_configuration_version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_status=" + String.valueOf(datacenter_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dc_history_aggregateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int history_id;

		public int getHistory_id() {
			return this.history_id;
		}

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public short datacenter_status;

		public short getDatacenter_status() {
			return this.datacenter_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int datacenter_configuration_version;

		public int getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_id = dis.readInt();

					this.history_datetime = readDate(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					this.datacenter_configuration_version = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.history_id);

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// short

				dos.writeShort(this.datacenter_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.datacenter_configuration_version);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",history_datetime=" + String.valueOf(history_datetime));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_status=" + String.valueOf(datacenter_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				dc_history_aggregateStruct dc_history_aggregate = new dc_history_aggregateStruct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_1_AGGOUT";

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object datacenter_id;
					short datacenter_status;
					BigDecimal minutes_in_status_sum;

					int datacenter_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.datacenter_id == null) ? 0
											: this.datacenter_id.hashCode());

							result = prime * result
									+ (int) this.datacenter_status;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.datacenter_id == null) {
							if (other.datacenter_id != null)
								return false;
						} else if (!this.datacenter_id
								.equals(other.datacenter_id))
							return false;

						if (this.datacenter_status != other.datacenter_status)
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				dc_history_aggregateStruct dc_history_aggregate_tmp = new dc_history_aggregateStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "SELECT history_id,  		history_datetime,        	datacenter_id,        	datacenter_status,        	minutes_in_status,  		datacenter_configuration_version  FROM datacenter_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,        	 datacenter_id,        	 datacenter_status";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = stmt_tJDBCInput_1
						.executeQuery(dbquery_tJDBCInput_1);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
						.getMetaData();
				int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
						.getColumnCount();

				String tmpContent_tJDBCInput_1 = null;
				while (rs_tJDBCInput_1.next()) {
					nb_line_tJDBCInput_1++;

					if (colQtyInRs_tJDBCInput_1 < 1) {
						row1.history_id = 0;
					} else {

						if (rs_tJDBCInput_1.getObject(1) != null) {
							row1.history_id = rs_tJDBCInput_1.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_1 < 2) {
						row1.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_1 = null;
						try {
							date_tJDBCInput_1 = rs_tJDBCInput_1.getTimestamp(2);
						} catch (Exception e) {
							date_tJDBCInput_1 = rs_tJDBCInput_1.getDate(2);
						}
						row1.history_datetime = date_tJDBCInput_1;

					}
					if (colQtyInRs_tJDBCInput_1 < 3) {
						row1.datacenter_id = null;
					} else {

						if (rs_tJDBCInput_1.getObject(3) != null) {
							row1.datacenter_id = rs_tJDBCInput_1.getObject(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_1 < 4) {
						row1.datacenter_status = 0;
					} else {

						if (rs_tJDBCInput_1.getObject(4) != null) {
							row1.datacenter_status = rs_tJDBCInput_1
									.getShort(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_1 < 5) {
						row1.minutes_in_status = 0;
					} else {

						if (rs_tJDBCInput_1.getObject(5) != null) {
							row1.minutes_in_status = rs_tJDBCInput_1
									.getDouble(5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_1 < 6) {
						row1.datacenter_configuration_version = 0;
					} else {

						if (rs_tJDBCInput_1.getObject(6) != null) {
							row1.datacenter_configuration_version = rs_tJDBCInput_1
									.getInt(6);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tJDBCInput_1 begin ] stop
					 */
					/**
					 * [tJDBCInput_1 main ] start
					 */

					currentComponent = "tJDBCInput_1";

					tos_count_tJDBCInput_1++;

					/**
					 * [tJDBCInput_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row1.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row1'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							dc_history_aggregate = null;

							// # Output table : 'dc_history_aggregate'
							dc_history_aggregate_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row1.history_datetime);
							dc_history_aggregate_tmp.datacenter_id = row1.datacenter_id;
							dc_history_aggregate_tmp.datacenter_status = row1.datacenter_status;
							dc_history_aggregate_tmp.minutes_in_status = row1.minutes_in_status;
							dc_history_aggregate_tmp.datacenter_configuration_version = row1.datacenter_configuration_version;
							dc_history_aggregate = dc_history_aggregate_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "dc_history_aggregate"
						if (dc_history_aggregate != null) {

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_1_AGGOUT";

							operation_finder_tAggregateRow_1.history_datetime = dc_history_aggregate.history_datetime;
							operation_finder_tAggregateRow_1.datacenter_id = dc_history_aggregate.datacenter_id;
							operation_finder_tAggregateRow_1.datacenter_status = dc_history_aggregate.datacenter_status;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							boolean isFirstAdd_tAggregateRow_1 = false;

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.history_datetime = operation_finder_tAggregateRow_1.history_datetime;
								operation_result_tAggregateRow_1.datacenter_id = operation_finder_tAggregateRow_1.datacenter_id;
								operation_result_tAggregateRow_1.datacenter_status = operation_finder_tAggregateRow_1.datacenter_status;

								isFirstAdd_tAggregateRow_1 = true;

								hash_tAggregateRow_1.put(
										operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.minutes_in_status_sum == null) {
								operation_result_tAggregateRow_1.minutes_in_status_sum = new BigDecimal(
										0).setScale(0);
							}
							operation_result_tAggregateRow_1.minutes_in_status_sum = operation_result_tAggregateRow_1.minutes_in_status_sum
									.add(new BigDecimal(
											String.valueOf(dc_history_aggregate.minutes_in_status)));

							operation_result_tAggregateRow_1.datacenter_configuration_version_last = dc_history_aggregate.datacenter_configuration_version;

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

						} // End of branch "dc_history_aggregate"

					} // G_TM_M_280 close main tMap filter for table 'row1'

					/**
					 * [tJDBCInput_1 end ] start
					 */

					currentComponent = "tJDBCInput_1";

				}
				stmt_tJDBCInput_1.close();

				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_1_AGGOUT";

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_1 = 10000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ "datacenter_hourly_history"
						+ " (history_datetime,datacenter_id,datacenter_status,minutes_in_status,datacenter_configuration_version) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1
						.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_1_AGGIN";

					row6.history_datetime = aggregated_row_tAggregateRow_1.history_datetime;

					row6.datacenter_id = aggregated_row_tAggregateRow_1.datacenter_id;

					row6.datacenter_status = aggregated_row_tAggregateRow_1.datacenter_status;

					if (aggregated_row_tAggregateRow_1.minutes_in_status_sum != null) {
						row6.minutes_in_status = aggregated_row_tAggregateRow_1.minutes_in_status_sum
								.doubleValue();

					} else {

						row6.minutes_in_status = 0;

					}

					row6.datacenter_configuration_version = aggregated_row_tAggregateRow_1.datacenter_configuration_version_last;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_1 main ] start
					 */

					currentComponent = "tJDBCOutput_1";

					whetherReject_tJDBCOutput_1 = false;
					if (row6.history_datetime != null) {
						pstmt_tJDBCOutput_1.setTimestamp(1,
								new java.sql.Timestamp(row6.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_1.setNull(1, java.sql.Types.DATE);
					}

					if (row6.datacenter_id == null) {
						pstmt_tJDBCOutput_1.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_1.setObject(2, row6.datacenter_id);
					}

					pstmt_tJDBCOutput_1.setShort(3, row6.datacenter_status);

					pstmt_tJDBCOutput_1.setDouble(4, row6.minutes_in_status);

					pstmt_tJDBCOutput_1.setInt(5,
							row6.datacenter_configuration_version);

					try {
						insertedCount_tJDBCOutput_1 = insertedCount_tJDBCOutput_1
								+ pstmt_tJDBCOutput_1.executeUpdate();
						nb_line_tJDBCOutput_1++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_1 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_1++;

					/**
					 * [tJDBCOutput_1 main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.put("tAggregateRow_1", null);

		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public short host_status;

		public short getHost_status() {
			return this.host_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short max_memory_usage;

		public Short getMax_memory_usage() {
			return this.max_memory_usage;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short max_cpu_usage;

		public Short getMax_cpu_usage() {
			return this.max_cpu_usage;
		}

		public Short ksm_cpu_percent;

		public Short getKsm_cpu_percent() {
			return this.ksm_cpu_percent;
		}

		public Short max_ksm_cpu_percent;

		public Short getMax_ksm_cpu_percent() {
			return this.max_ksm_cpu_percent;
		}

		public Short active_vms;

		public Short getActive_vms() {
			return this.active_vms;
		}

		public Short max_active_vms;

		public Short getMax_active_vms() {
			return this.max_active_vms;
		}

		public Short total_vms;

		public Short getTotal_vms() {
			return this.total_vms;
		}

		public Short max_total_vms;

		public Short getMax_total_vms() {
			return this.max_total_vms;
		}

		public Integer total_vms_vcpus;

		public Integer getTotal_vms_vcpus() {
			return this.total_vms_vcpus;
		}

		public Integer max_total_vms_vcpus;

		public Integer getMax_total_vms_vcpus() {
			return this.max_total_vms_vcpus;
		}

		public Integer cpu_load;

		public Integer getCpu_load() {
			return this.cpu_load;
		}

		public Integer max_cpu_load;

		public Integer getMax_cpu_load() {
			return this.max_cpu_load;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public Short max_system_cpu_usage_percent;

		public Short getMax_system_cpu_usage_percent() {
			return this.max_system_cpu_usage_percent;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Short max_user_cpu_usage_percent;

		public Short getMax_user_cpu_usage_percent() {
			return this.max_user_cpu_usage_percent;
		}

		public Integer swap_used_mb;

		public Integer getSwap_used_mb() {
			return this.swap_used_mb;
		}

		public Integer max_swap_used_mb;

		public Integer getMax_swap_used_mb() {
			return this.max_swap_used_mb;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.host_id = (Object) dis.readObject();

					this.host_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_memory_usage = null;
					} else {
						this.max_memory_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_cpu_usage = null;
					} else {
						this.max_cpu_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ksm_cpu_percent = null;
					} else {
						this.ksm_cpu_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_ksm_cpu_percent = null;
					} else {
						this.max_ksm_cpu_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.active_vms = null;
					} else {
						this.active_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_active_vms = null;
					} else {
						this.max_active_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_vms = null;
					} else {
						this.total_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_total_vms = null;
					} else {
						this.max_total_vms = dis.readShort();
					}

					this.total_vms_vcpus = readInteger(dis);

					this.max_total_vms_vcpus = readInteger(dis);

					this.cpu_load = readInteger(dis);

					this.max_cpu_load = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_system_cpu_usage_percent = null;
					} else {
						this.max_system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_user_cpu_usage_percent = null;
					} else {
						this.max_user_cpu_usage_percent = dis.readShort();
					}

					this.swap_used_mb = readInteger(dis);

					this.max_swap_used_mb = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_id);

				// short

				dos.writeShort(this.host_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.max_memory_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_memory_usage);
				}

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.max_cpu_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_cpu_usage);
				}

				// Short

				if (this.ksm_cpu_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ksm_cpu_percent);
				}

				// Short

				if (this.max_ksm_cpu_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_ksm_cpu_percent);
				}

				// Short

				if (this.active_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.active_vms);
				}

				// Short

				if (this.max_active_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_active_vms);
				}

				// Short

				if (this.total_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.total_vms);
				}

				// Short

				if (this.max_total_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_total_vms);
				}

				// Integer

				writeInteger(this.total_vms_vcpus, dos);

				// Integer

				writeInteger(this.max_total_vms_vcpus, dos);

				// Integer

				writeInteger(this.cpu_load, dos);

				// Integer

				writeInteger(this.max_cpu_load, dos);

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// Short

				if (this.max_system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_system_cpu_usage_percent);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Short

				if (this.max_user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_user_cpu_usage_percent);
				}

				// Integer

				writeInteger(this.swap_used_mb, dos);

				// Integer

				writeInteger(this.max_swap_used_mb, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_status=" + String.valueOf(host_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",max_memory_usage=" + String.valueOf(max_memory_usage));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",max_cpu_usage=" + String.valueOf(max_cpu_usage));
			sb.append(",ksm_cpu_percent=" + String.valueOf(ksm_cpu_percent));
			sb.append(",max_ksm_cpu_percent="
					+ String.valueOf(max_ksm_cpu_percent));
			sb.append(",active_vms=" + String.valueOf(active_vms));
			sb.append(",max_active_vms=" + String.valueOf(max_active_vms));
			sb.append(",total_vms=" + String.valueOf(total_vms));
			sb.append(",max_total_vms=" + String.valueOf(max_total_vms));
			sb.append(",total_vms_vcpus=" + String.valueOf(total_vms_vcpus));
			sb.append(",max_total_vms_vcpus="
					+ String.valueOf(max_total_vms_vcpus));
			sb.append(",cpu_load=" + String.valueOf(cpu_load));
			sb.append(",max_cpu_load=" + String.valueOf(max_cpu_load));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",max_system_cpu_usage_percent="
					+ String.valueOf(max_system_cpu_usage_percent));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",max_user_cpu_usage_percent="
					+ String.valueOf(max_user_cpu_usage_percent));
			sb.append(",swap_used_mb=" + String.valueOf(swap_used_mb));
			sb.append(",max_swap_used_mb=" + String.valueOf(max_swap_used_mb));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public short host_status;

		public short getHost_status() {
			return this.host_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short max_memory_usage;

		public Short getMax_memory_usage() {
			return this.max_memory_usage;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short max_cpu_usage;

		public Short getMax_cpu_usage() {
			return this.max_cpu_usage;
		}

		public Short ksm_cpu_percent;

		public Short getKsm_cpu_percent() {
			return this.ksm_cpu_percent;
		}

		public Short max_ksm_cpu_percent;

		public Short getMax_ksm_cpu_percent() {
			return this.max_ksm_cpu_percent;
		}

		public Short active_vms;

		public Short getActive_vms() {
			return this.active_vms;
		}

		public Short max_active_vms;

		public Short getMax_active_vms() {
			return this.max_active_vms;
		}

		public Short total_vms;

		public Short getTotal_vms() {
			return this.total_vms;
		}

		public Short max_total_vms;

		public Short getMax_total_vms() {
			return this.max_total_vms;
		}

		public Integer total_vms_vcpus;

		public Integer getTotal_vms_vcpus() {
			return this.total_vms_vcpus;
		}

		public Integer max_total_vms_vcpus;

		public Integer getMax_total_vms_vcpus() {
			return this.max_total_vms_vcpus;
		}

		public Integer cpu_load;

		public Integer getCpu_load() {
			return this.cpu_load;
		}

		public Integer max_cpu_load;

		public Integer getMax_cpu_load() {
			return this.max_cpu_load;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public Short max_system_cpu_usage_percent;

		public Short getMax_system_cpu_usage_percent() {
			return this.max_system_cpu_usage_percent;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Short max_user_cpu_usage_percent;

		public Short getMax_user_cpu_usage_percent() {
			return this.max_user_cpu_usage_percent;
		}

		public Integer swap_used_mb;

		public Integer getSwap_used_mb() {
			return this.swap_used_mb;
		}

		public Integer max_swap_used_mb;

		public Integer getMax_swap_used_mb() {
			return this.max_swap_used_mb;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.host_id = (Object) dis.readObject();

					this.host_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_memory_usage = null;
					} else {
						this.max_memory_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_cpu_usage = null;
					} else {
						this.max_cpu_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ksm_cpu_percent = null;
					} else {
						this.ksm_cpu_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_ksm_cpu_percent = null;
					} else {
						this.max_ksm_cpu_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.active_vms = null;
					} else {
						this.active_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_active_vms = null;
					} else {
						this.max_active_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_vms = null;
					} else {
						this.total_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_total_vms = null;
					} else {
						this.max_total_vms = dis.readShort();
					}

					this.total_vms_vcpus = readInteger(dis);

					this.max_total_vms_vcpus = readInteger(dis);

					this.cpu_load = readInteger(dis);

					this.max_cpu_load = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_system_cpu_usage_percent = null;
					} else {
						this.max_system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_user_cpu_usage_percent = null;
					} else {
						this.max_user_cpu_usage_percent = dis.readShort();
					}

					this.swap_used_mb = readInteger(dis);

					this.max_swap_used_mb = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_id);

				// short

				dos.writeShort(this.host_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.max_memory_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_memory_usage);
				}

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.max_cpu_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_cpu_usage);
				}

				// Short

				if (this.ksm_cpu_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ksm_cpu_percent);
				}

				// Short

				if (this.max_ksm_cpu_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_ksm_cpu_percent);
				}

				// Short

				if (this.active_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.active_vms);
				}

				// Short

				if (this.max_active_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_active_vms);
				}

				// Short

				if (this.total_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.total_vms);
				}

				// Short

				if (this.max_total_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_total_vms);
				}

				// Integer

				writeInteger(this.total_vms_vcpus, dos);

				// Integer

				writeInteger(this.max_total_vms_vcpus, dos);

				// Integer

				writeInteger(this.cpu_load, dos);

				// Integer

				writeInteger(this.max_cpu_load, dos);

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// Short

				if (this.max_system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_system_cpu_usage_percent);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Short

				if (this.max_user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_user_cpu_usage_percent);
				}

				// Integer

				writeInteger(this.swap_used_mb, dos);

				// Integer

				writeInteger(this.max_swap_used_mb, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_status=" + String.valueOf(host_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",max_memory_usage=" + String.valueOf(max_memory_usage));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",max_cpu_usage=" + String.valueOf(max_cpu_usage));
			sb.append(",ksm_cpu_percent=" + String.valueOf(ksm_cpu_percent));
			sb.append(",max_ksm_cpu_percent="
					+ String.valueOf(max_ksm_cpu_percent));
			sb.append(",active_vms=" + String.valueOf(active_vms));
			sb.append(",max_active_vms=" + String.valueOf(max_active_vms));
			sb.append(",total_vms=" + String.valueOf(total_vms));
			sb.append(",max_total_vms=" + String.valueOf(max_total_vms));
			sb.append(",total_vms_vcpus=" + String.valueOf(total_vms_vcpus));
			sb.append(",max_total_vms_vcpus="
					+ String.valueOf(max_total_vms_vcpus));
			sb.append(",cpu_load=" + String.valueOf(cpu_load));
			sb.append(",max_cpu_load=" + String.valueOf(max_cpu_load));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",max_system_cpu_usage_percent="
					+ String.valueOf(max_system_cpu_usage_percent));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",max_user_cpu_usage_percent="
					+ String.valueOf(max_user_cpu_usage_percent));
			sb.append(",swap_used_mb=" + String.valueOf(swap_used_mb));
			sb.append(",max_swap_used_mb=" + String.valueOf(max_swap_used_mb));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class host_aggregationStruct implements
			routines.system.IPersistableRow<host_aggregationStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public short host_status;

		public short getHost_status() {
			return this.host_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short ksm_cpu_percent;

		public Short getKsm_cpu_percent() {
			return this.ksm_cpu_percent;
		}

		public Short active_vms;

		public Short getActive_vms() {
			return this.active_vms;
		}

		public Short total_vms;

		public Short getTotal_vms() {
			return this.total_vms;
		}

		public Integer total_vms_vcpus;

		public Integer getTotal_vms_vcpus() {
			return this.total_vms_vcpus;
		}

		public Integer cpu_load;

		public Integer getCpu_load() {
			return this.cpu_load;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Integer swap_used_mb;

		public Integer getSwap_used_mb() {
			return this.swap_used_mb;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.host_id = (Object) dis.readObject();

					this.host_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ksm_cpu_percent = null;
					} else {
						this.ksm_cpu_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.active_vms = null;
					} else {
						this.active_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_vms = null;
					} else {
						this.total_vms = dis.readShort();
					}

					this.total_vms_vcpus = readInteger(dis);

					this.cpu_load = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					this.swap_used_mb = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_id);

				// short

				dos.writeShort(this.host_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.ksm_cpu_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ksm_cpu_percent);
				}

				// Short

				if (this.active_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.active_vms);
				}

				// Short

				if (this.total_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.total_vms);
				}

				// Integer

				writeInteger(this.total_vms_vcpus, dos);

				// Integer

				writeInteger(this.cpu_load, dos);

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Integer

				writeInteger(this.swap_used_mb, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_status=" + String.valueOf(host_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",ksm_cpu_percent=" + String.valueOf(ksm_cpu_percent));
			sb.append(",active_vms=" + String.valueOf(active_vms));
			sb.append(",total_vms=" + String.valueOf(total_vms));
			sb.append(",total_vms_vcpus=" + String.valueOf(total_vms_vcpus));
			sb.append(",cpu_load=" + String.valueOf(cpu_load));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",swap_used_mb=" + String.valueOf(swap_used_mb));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(host_aggregationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int history_id;

		public int getHistory_id() {
			return this.history_id;
		}

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public short host_status;

		public short getHost_status() {
			return this.host_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short ksm_cpu_percent;

		public Short getKsm_cpu_percent() {
			return this.ksm_cpu_percent;
		}

		public Short active_vms;

		public Short getActive_vms() {
			return this.active_vms;
		}

		public Short total_vms;

		public Short getTotal_vms() {
			return this.total_vms;
		}

		public Integer total_vms_vcpus;

		public Integer getTotal_vms_vcpus() {
			return this.total_vms_vcpus;
		}

		public Integer cpu_load;

		public Integer getCpu_load() {
			return this.cpu_load;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Integer swap_used_mb;

		public Integer getSwap_used_mb() {
			return this.swap_used_mb;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_id = dis.readInt();

					this.history_datetime = readDate(dis);

					this.host_id = (Object) dis.readObject();

					this.host_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ksm_cpu_percent = null;
					} else {
						this.ksm_cpu_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.active_vms = null;
					} else {
						this.active_vms = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.total_vms = null;
					} else {
						this.total_vms = dis.readShort();
					}

					this.total_vms_vcpus = readInteger(dis);

					this.cpu_load = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					this.swap_used_mb = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.history_id);

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_id);

				// short

				dos.writeShort(this.host_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.ksm_cpu_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.ksm_cpu_percent);
				}

				// Short

				if (this.active_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.active_vms);
				}

				// Short

				if (this.total_vms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.total_vms);
				}

				// Integer

				writeInteger(this.total_vms_vcpus, dos);

				// Integer

				writeInteger(this.cpu_load, dos);

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Integer

				writeInteger(this.swap_used_mb, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_status=" + String.valueOf(host_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",ksm_cpu_percent=" + String.valueOf(ksm_cpu_percent));
			sb.append(",active_vms=" + String.valueOf(active_vms));
			sb.append(",total_vms=" + String.valueOf(total_vms));
			sb.append(",total_vms_vcpus=" + String.valueOf(total_vms_vcpus));
			sb.append(",cpu_load=" + String.valueOf(cpu_load));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",swap_used_mb=" + String.valueOf(swap_used_mb));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				host_aggregationStruct host_aggregation = new host_aggregationStruct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_2_AGGOUT";

				int tos_count_tAggregateRow_2_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object host_id;
					short host_status;
					BigDecimal minutes_in_status_sum;

					Short memory_usage_percent_sum;
					int memory_usage_percent_count = 0;

					Short max_memory_usage_max;
					Short cpu_usage_percent_sum;
					int cpu_usage_percent_count = 0;

					Short max_cpu_usage_max;
					Short ksm_cpu_percent_sum;
					int ksm_cpu_percent_count = 0;

					Short max_ksm_cpu_percent_max;
					Short active_vms_sum;
					int active_vms_count = 0;

					Short max_active_vms_max;
					Short total_vms_sum;
					int total_vms_count = 0;

					Short max_total_vms_max;
					Integer total_vms_vcpus_sum;
					int total_vms_vcpus_count = 0;

					Integer max_total_vms_vcpus_max;
					Integer cpu_load_sum;
					int cpu_load_count = 0;

					Integer max_cpu_load_max;
					Short system_cpu_usage_percent_sum;
					int system_cpu_usage_percent_count = 0;

					Short max_system_cpu_usage_percent_max;
					Short user_cpu_usage_percent_sum;
					int user_cpu_usage_percent_count = 0;

					Short max_user_cpu_usage_percent_max;
					Integer swap_used_mb_sum;
					int swap_used_mb_count = 0;

					Integer max_swap_used_mb_max;
					Integer host_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.host_id == null) ? 0
											: this.host_id.hashCode());

							result = prime * result + (int) this.host_status;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.host_id == null) {
							if (other.host_id != null)
								return false;
						} else if (!this.host_id.equals(other.host_id))
							return false;

						if (this.host_status != other.host_status)
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				host_aggregationStruct host_aggregation_tmp = new host_aggregationStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());
				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = "SELECT     history_id,     history_datetime,     host_id,     host_status,     minutes_in_status,     memory_usage_percent,     cpu_usage_percent,     ksm_cpu_percent,     active_vms,     total_vms,     total_vms_vcpus,     cpu_load,     system_cpu_usage_percent,     user_cpu_usage_percent,     swap_used_mb,     host_configuration_version  FROM host_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,  		 host_id,        	 host_status";

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);

				java.sql.ResultSet rs_tJDBCInput_2 = stmt_tJDBCInput_2
						.executeQuery(dbquery_tJDBCInput_2);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
						.getMetaData();
				int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
						.getColumnCount();

				String tmpContent_tJDBCInput_2 = null;
				while (rs_tJDBCInput_2.next()) {
					nb_line_tJDBCInput_2++;

					if (colQtyInRs_tJDBCInput_2 < 1) {
						row2.history_id = 0;
					} else {

						if (rs_tJDBCInput_2.getObject(1) != null) {
							row2.history_id = rs_tJDBCInput_2.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_2 < 2) {
						row2.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_2 = null;
						try {
							date_tJDBCInput_2 = rs_tJDBCInput_2.getTimestamp(2);
						} catch (Exception e) {
							date_tJDBCInput_2 = rs_tJDBCInput_2.getDate(2);
						}
						row2.history_datetime = date_tJDBCInput_2;

					}
					if (colQtyInRs_tJDBCInput_2 < 3) {
						row2.host_id = null;
					} else {

						if (rs_tJDBCInput_2.getObject(3) != null) {
							row2.host_id = rs_tJDBCInput_2.getObject(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_2 < 4) {
						row2.host_status = 0;
					} else {

						if (rs_tJDBCInput_2.getObject(4) != null) {
							row2.host_status = rs_tJDBCInput_2.getShort(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_2 < 5) {
						row2.minutes_in_status = 0;
					} else {

						if (rs_tJDBCInput_2.getObject(5) != null) {
							row2.minutes_in_status = rs_tJDBCInput_2
									.getDouble(5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_2 < 6) {
						row2.memory_usage_percent = null;
					} else {

						if (rs_tJDBCInput_2.getObject(6) != null) {
							row2.memory_usage_percent = rs_tJDBCInput_2
									.getShort(6);
						} else {
							row2.memory_usage_percent = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.memory_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 7) {
						row2.cpu_usage_percent = null;
					} else {

						if (rs_tJDBCInput_2.getObject(7) != null) {
							row2.cpu_usage_percent = rs_tJDBCInput_2
									.getShort(7);
						} else {
							row2.cpu_usage_percent = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.cpu_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 8) {
						row2.ksm_cpu_percent = null;
					} else {

						if (rs_tJDBCInput_2.getObject(8) != null) {
							row2.ksm_cpu_percent = rs_tJDBCInput_2.getShort(8);
						} else {
							row2.ksm_cpu_percent = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.ksm_cpu_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 9) {
						row2.active_vms = null;
					} else {

						if (rs_tJDBCInput_2.getObject(9) != null) {
							row2.active_vms = rs_tJDBCInput_2.getShort(9);
						} else {
							row2.active_vms = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.active_vms = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 10) {
						row2.total_vms = null;
					} else {

						if (rs_tJDBCInput_2.getObject(10) != null) {
							row2.total_vms = rs_tJDBCInput_2.getShort(10);
						} else {
							row2.total_vms = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.total_vms = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 11) {
						row2.total_vms_vcpus = null;
					} else {

						if (rs_tJDBCInput_2.getObject(11) != null) {
							row2.total_vms_vcpus = rs_tJDBCInput_2.getInt(11);
						} else {
							row2.total_vms_vcpus = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.total_vms_vcpus = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 12) {
						row2.cpu_load = null;
					} else {

						if (rs_tJDBCInput_2.getObject(12) != null) {
							row2.cpu_load = rs_tJDBCInput_2.getInt(12);
						} else {
							row2.cpu_load = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.cpu_load = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 13) {
						row2.system_cpu_usage_percent = null;
					} else {

						if (rs_tJDBCInput_2.getObject(13) != null) {
							row2.system_cpu_usage_percent = rs_tJDBCInput_2
									.getShort(13);
						} else {
							row2.system_cpu_usage_percent = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.system_cpu_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 14) {
						row2.user_cpu_usage_percent = null;
					} else {

						if (rs_tJDBCInput_2.getObject(14) != null) {
							row2.user_cpu_usage_percent = rs_tJDBCInput_2
									.getShort(14);
						} else {
							row2.user_cpu_usage_percent = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.user_cpu_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 15) {
						row2.swap_used_mb = null;
					} else {

						if (rs_tJDBCInput_2.getObject(15) != null) {
							row2.swap_used_mb = rs_tJDBCInput_2.getInt(15);
						} else {
							row2.swap_used_mb = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.swap_used_mb = null;
						}
					}
					if (colQtyInRs_tJDBCInput_2 < 16) {
						row2.host_configuration_version = null;
					} else {

						if (rs_tJDBCInput_2.getObject(16) != null) {
							row2.host_configuration_version = rs_tJDBCInput_2
									.getInt(16);
						} else {
							row2.host_configuration_version = null;
						}

						if (rs_tJDBCInput_2.wasNull()) {
							row2.host_configuration_version = null;
						}
					}

					/**
					 * [tJDBCInput_2 begin ] stop
					 */
					/**
					 * [tJDBCInput_2 main ] start
					 */

					currentComponent = "tJDBCInput_2";

					tos_count_tJDBCInput_2++;

					/**
					 * [tJDBCInput_2 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row2.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row2'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							host_aggregation = null;

							// # Output table : 'host_aggregation'
							host_aggregation_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row2.history_datetime);
							host_aggregation_tmp.host_id = row2.host_id;
							host_aggregation_tmp.host_status = row2.host_status;
							host_aggregation_tmp.minutes_in_status = row2.minutes_in_status;
							host_aggregation_tmp.memory_usage_percent = row2.memory_usage_percent;
							host_aggregation_tmp.cpu_usage_percent = row2.cpu_usage_percent;
							host_aggregation_tmp.ksm_cpu_percent = row2.ksm_cpu_percent;
							host_aggregation_tmp.active_vms = row2.active_vms;
							host_aggregation_tmp.total_vms = row2.total_vms;
							host_aggregation_tmp.total_vms_vcpus = row2.total_vms_vcpus;
							host_aggregation_tmp.cpu_load = row2.cpu_load;
							host_aggregation_tmp.system_cpu_usage_percent = row2.system_cpu_usage_percent;
							host_aggregation_tmp.user_cpu_usage_percent = row2.user_cpu_usage_percent;
							host_aggregation_tmp.swap_used_mb = row2.swap_used_mb;
							host_aggregation_tmp.host_configuration_version = row2.host_configuration_version;
							host_aggregation = host_aggregation_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "host_aggregation"
						if (host_aggregation != null) {

							/**
							 * [tAggregateRow_2_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_2_AGGOUT";

							operation_finder_tAggregateRow_2.history_datetime = host_aggregation.history_datetime;
							operation_finder_tAggregateRow_2.host_id = host_aggregation.host_id;
							operation_finder_tAggregateRow_2.host_status = host_aggregation.host_status;

							operation_finder_tAggregateRow_2.hashCodeDirty = true;

							operation_result_tAggregateRow_2 = hash_tAggregateRow_2
									.get(operation_finder_tAggregateRow_2);

							boolean isFirstAdd_tAggregateRow_2 = false;

							if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

								operation_result_tAggregateRow_2.history_datetime = operation_finder_tAggregateRow_2.history_datetime;
								operation_result_tAggregateRow_2.host_id = operation_finder_tAggregateRow_2.host_id;
								operation_result_tAggregateRow_2.host_status = operation_finder_tAggregateRow_2.host_status;

								isFirstAdd_tAggregateRow_2 = true;

								hash_tAggregateRow_2.put(
										operation_result_tAggregateRow_2,
										operation_result_tAggregateRow_2);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_2.minutes_in_status_sum == null) {
								operation_result_tAggregateRow_2.minutes_in_status_sum = new BigDecimal(
										0).setScale(0);
							}
							operation_result_tAggregateRow_2.minutes_in_status_sum = operation_result_tAggregateRow_2.minutes_in_status_sum
									.add(new BigDecimal(
											String.valueOf(host_aggregation.minutes_in_status)));

							if (host_aggregation.memory_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.memory_usage_percent_count++;

								if (operation_result_tAggregateRow_2.memory_usage_percent_sum == null) {
									operation_result_tAggregateRow_2.memory_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.memory_usage_percent_sum = (short) (operation_result_tAggregateRow_2.memory_usage_percent_sum
										.shortValue() + host_aggregation.memory_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.memory_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_memory_usage_max == null
										|| host_aggregation.memory_usage_percent > operation_result_tAggregateRow_2.max_memory_usage_max

								) {
									operation_result_tAggregateRow_2.max_memory_usage_max = host_aggregation.memory_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.cpu_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.cpu_usage_percent_count++;

								if (operation_result_tAggregateRow_2.cpu_usage_percent_sum == null) {
									operation_result_tAggregateRow_2.cpu_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.cpu_usage_percent_sum = (short) (operation_result_tAggregateRow_2.cpu_usage_percent_sum
										.shortValue() + host_aggregation.cpu_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.cpu_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_cpu_usage_max == null
										|| host_aggregation.cpu_usage_percent > operation_result_tAggregateRow_2.max_cpu_usage_max

								) {
									operation_result_tAggregateRow_2.max_cpu_usage_max = host_aggregation.cpu_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.ksm_cpu_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.ksm_cpu_percent_count++;

								if (operation_result_tAggregateRow_2.ksm_cpu_percent_sum == null) {
									operation_result_tAggregateRow_2.ksm_cpu_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.ksm_cpu_percent_sum = (short) (operation_result_tAggregateRow_2.ksm_cpu_percent_sum
										.shortValue() + host_aggregation.ksm_cpu_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.ksm_cpu_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_ksm_cpu_percent_max == null
										|| host_aggregation.ksm_cpu_percent > operation_result_tAggregateRow_2.max_ksm_cpu_percent_max

								) {
									operation_result_tAggregateRow_2.max_ksm_cpu_percent_max = host_aggregation.ksm_cpu_percent;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.active_vms != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.active_vms_count++;

								if (operation_result_tAggregateRow_2.active_vms_sum == null) {
									operation_result_tAggregateRow_2.active_vms_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.active_vms_sum = (short) (operation_result_tAggregateRow_2.active_vms_sum
										.shortValue() + host_aggregation.active_vms
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.active_vms != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_active_vms_max == null
										|| host_aggregation.active_vms > operation_result_tAggregateRow_2.max_active_vms_max

								) {
									operation_result_tAggregateRow_2.max_active_vms_max = host_aggregation.active_vms;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.total_vms != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.total_vms_count++;

								if (operation_result_tAggregateRow_2.total_vms_sum == null) {
									operation_result_tAggregateRow_2.total_vms_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.total_vms_sum = (short) (operation_result_tAggregateRow_2.total_vms_sum
										.shortValue() + host_aggregation.total_vms
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.total_vms != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_total_vms_max == null
										|| host_aggregation.total_vms > operation_result_tAggregateRow_2.max_total_vms_max

								) {
									operation_result_tAggregateRow_2.max_total_vms_max = host_aggregation.total_vms;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.total_vms_vcpus != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.total_vms_vcpus_count++;

								if (operation_result_tAggregateRow_2.total_vms_vcpus_sum == null) {
									operation_result_tAggregateRow_2.total_vms_vcpus_sum = (int) 0;
								}

								if (host_aggregation.total_vms_vcpus != null)
									operation_result_tAggregateRow_2.total_vms_vcpus_sum += host_aggregation.total_vms_vcpus;
							} // G_OutMain_AggR_546

							if (host_aggregation.total_vms_vcpus != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_total_vms_vcpus_max == null
										|| host_aggregation.total_vms_vcpus > operation_result_tAggregateRow_2.max_total_vms_vcpus_max

								) {
									operation_result_tAggregateRow_2.max_total_vms_vcpus_max = host_aggregation.total_vms_vcpus;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.cpu_load != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.cpu_load_count++;

								if (operation_result_tAggregateRow_2.cpu_load_sum == null) {
									operation_result_tAggregateRow_2.cpu_load_sum = (int) 0;
								}

								if (host_aggregation.cpu_load != null)
									operation_result_tAggregateRow_2.cpu_load_sum += host_aggregation.cpu_load;
							} // G_OutMain_AggR_546

							if (host_aggregation.cpu_load != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_cpu_load_max == null
										|| host_aggregation.cpu_load > operation_result_tAggregateRow_2.max_cpu_load_max

								) {
									operation_result_tAggregateRow_2.max_cpu_load_max = host_aggregation.cpu_load;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.system_cpu_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.system_cpu_usage_percent_count++;

								if (operation_result_tAggregateRow_2.system_cpu_usage_percent_sum == null) {
									operation_result_tAggregateRow_2.system_cpu_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.system_cpu_usage_percent_sum = (short) (operation_result_tAggregateRow_2.system_cpu_usage_percent_sum
										.shortValue() + host_aggregation.system_cpu_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.system_cpu_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_system_cpu_usage_percent_max == null
										|| host_aggregation.system_cpu_usage_percent > operation_result_tAggregateRow_2.max_system_cpu_usage_percent_max

								) {
									operation_result_tAggregateRow_2.max_system_cpu_usage_percent_max = host_aggregation.system_cpu_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.user_cpu_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.user_cpu_usage_percent_count++;

								if (operation_result_tAggregateRow_2.user_cpu_usage_percent_sum == null) {
									operation_result_tAggregateRow_2.user_cpu_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_2.user_cpu_usage_percent_sum = (short) (operation_result_tAggregateRow_2.user_cpu_usage_percent_sum
										.shortValue() + host_aggregation.user_cpu_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_aggregation.user_cpu_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_user_cpu_usage_percent_max == null
										|| host_aggregation.user_cpu_usage_percent > operation_result_tAggregateRow_2.max_user_cpu_usage_percent_max

								) {
									operation_result_tAggregateRow_2.max_user_cpu_usage_percent_max = host_aggregation.user_cpu_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.swap_used_mb != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.swap_used_mb_count++;

								if (operation_result_tAggregateRow_2.swap_used_mb_sum == null) {
									operation_result_tAggregateRow_2.swap_used_mb_sum = (int) 0;
								}

								if (host_aggregation.swap_used_mb != null)
									operation_result_tAggregateRow_2.swap_used_mb_sum += host_aggregation.swap_used_mb;
							} // G_OutMain_AggR_546

							if (host_aggregation.swap_used_mb != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_2.max_swap_used_mb_max == null
										|| host_aggregation.swap_used_mb > operation_result_tAggregateRow_2.max_swap_used_mb_max

								) {
									operation_result_tAggregateRow_2.max_swap_used_mb_max = host_aggregation.swap_used_mb;
								}

							} // G_OutMain_AggR_546

							if (host_aggregation.host_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_2.host_configuration_version_last = host_aggregation.host_configuration_version;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_2_AGGOUT++;

							/**
							 * [tAggregateRow_2_AGGOUT main ] stop
							 */

						} // End of branch "host_aggregation"

					} // G_TM_M_280 close main tMap filter for table 'row2'

					/**
					 * [tJDBCInput_2 end ] start
					 */

					currentComponent = "tJDBCInput_2";

				}
				stmt_tJDBCInput_2.close();

				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_2_AGGOUT";

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_2 = 10000;
				int batchSizeCounter_tJDBCOutput_2 = 0;

				String insert_tJDBCOutput_2 = "INSERT INTO "
						+ "host_hourly_history"
						+ " (history_datetime,host_id,host_status,minutes_in_status,memory_usage_percent,max_memory_usage,cpu_usage_percent,max_cpu_usage,ksm_cpu_percent,max_ksm_cpu_percent,active_vms,max_active_vms,total_vms,max_total_vms,total_vms_vcpus,max_total_vms_vcpus,cpu_load,max_cpu_load,system_cpu_usage_percent,max_system_cpu_usage_percent,user_cpu_usage_percent,max_user_cpu_usage_percent,swap_used_mb,max_swap_used_mb,host_configuration_version) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(insert_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2
						.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_2_AGGIN";

					row7.history_datetime = aggregated_row_tAggregateRow_2.history_datetime;

					row7.host_id = aggregated_row_tAggregateRow_2.host_id;

					row7.host_status = aggregated_row_tAggregateRow_2.host_status;

					if (aggregated_row_tAggregateRow_2.minutes_in_status_sum != null) {
						row7.minutes_in_status = aggregated_row_tAggregateRow_2.minutes_in_status_sum
								.doubleValue();

					} else {

						row7.minutes_in_status = 0;

					}

					if (aggregated_row_tAggregateRow_2.memory_usage_percent_count > 0) {

						double row7_memory_usage_percent_temp = (double) aggregated_row_tAggregateRow_2.memory_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_2.memory_usage_percent_count;

						row7.memory_usage_percent = (short) row7_memory_usage_percent_temp;

					} else {
						String count = "0";

						row7.memory_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row7.max_memory_usage = aggregated_row_tAggregateRow_2.max_memory_usage_max;
					if (aggregated_row_tAggregateRow_2.cpu_usage_percent_count > 0) {

						double row7_cpu_usage_percent_temp = (double) aggregated_row_tAggregateRow_2.cpu_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_2.cpu_usage_percent_count;

						row7.cpu_usage_percent = (short) row7_cpu_usage_percent_temp;

					} else {
						String count = "0";

						row7.cpu_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row7.max_cpu_usage = aggregated_row_tAggregateRow_2.max_cpu_usage_max;
					if (aggregated_row_tAggregateRow_2.ksm_cpu_percent_count > 0) {

						double row7_ksm_cpu_percent_temp = (double) aggregated_row_tAggregateRow_2.ksm_cpu_percent_sum
								/ (double) aggregated_row_tAggregateRow_2.ksm_cpu_percent_count;

						row7.ksm_cpu_percent = (short) row7_ksm_cpu_percent_temp;

					} else {
						String count = "0";

						row7.ksm_cpu_percent = ParserUtils.parseTo_Short(count);

					}
					row7.max_ksm_cpu_percent = aggregated_row_tAggregateRow_2.max_ksm_cpu_percent_max;
					if (aggregated_row_tAggregateRow_2.active_vms_count > 0) {

						double row7_active_vms_temp = (double) aggregated_row_tAggregateRow_2.active_vms_sum
								/ (double) aggregated_row_tAggregateRow_2.active_vms_count;

						row7.active_vms = (short) row7_active_vms_temp;

					} else {
						String count = "0";

						row7.active_vms = ParserUtils.parseTo_Short(count);

					}
					row7.max_active_vms = aggregated_row_tAggregateRow_2.max_active_vms_max;
					if (aggregated_row_tAggregateRow_2.total_vms_count > 0) {

						double row7_total_vms_temp = (double) aggregated_row_tAggregateRow_2.total_vms_sum
								/ (double) aggregated_row_tAggregateRow_2.total_vms_count;

						row7.total_vms = (short) row7_total_vms_temp;

					} else {
						String count = "0";

						row7.total_vms = ParserUtils.parseTo_Short(count);

					}
					row7.max_total_vms = aggregated_row_tAggregateRow_2.max_total_vms_max;
					if (aggregated_row_tAggregateRow_2.total_vms_vcpus_count > 0) {

						double row7_total_vms_vcpus_temp = (double) aggregated_row_tAggregateRow_2.total_vms_vcpus_sum
								/ (double) aggregated_row_tAggregateRow_2.total_vms_vcpus_count;

						row7.total_vms_vcpus = (int) row7_total_vms_vcpus_temp;

					} else {
						String count = "0";

						row7.total_vms_vcpus = ParserUtils
								.parseTo_Integer(count);

					}
					row7.max_total_vms_vcpus = aggregated_row_tAggregateRow_2.max_total_vms_vcpus_max;
					if (aggregated_row_tAggregateRow_2.cpu_load_count > 0) {

						double row7_cpu_load_temp = (double) aggregated_row_tAggregateRow_2.cpu_load_sum
								/ (double) aggregated_row_tAggregateRow_2.cpu_load_count;

						row7.cpu_load = (int) row7_cpu_load_temp;

					} else {
						String count = "0";

						row7.cpu_load = ParserUtils.parseTo_Integer(count);

					}
					row7.max_cpu_load = aggregated_row_tAggregateRow_2.max_cpu_load_max;
					if (aggregated_row_tAggregateRow_2.system_cpu_usage_percent_count > 0) {

						double row7_system_cpu_usage_percent_temp = (double) aggregated_row_tAggregateRow_2.system_cpu_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_2.system_cpu_usage_percent_count;

						row7.system_cpu_usage_percent = (short) row7_system_cpu_usage_percent_temp;

					} else {
						String count = "0";

						row7.system_cpu_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row7.max_system_cpu_usage_percent = aggregated_row_tAggregateRow_2.max_system_cpu_usage_percent_max;
					if (aggregated_row_tAggregateRow_2.user_cpu_usage_percent_count > 0) {

						double row7_user_cpu_usage_percent_temp = (double) aggregated_row_tAggregateRow_2.user_cpu_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_2.user_cpu_usage_percent_count;

						row7.user_cpu_usage_percent = (short) row7_user_cpu_usage_percent_temp;

					} else {
						String count = "0";

						row7.user_cpu_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row7.max_user_cpu_usage_percent = aggregated_row_tAggregateRow_2.max_user_cpu_usage_percent_max;
					if (aggregated_row_tAggregateRow_2.swap_used_mb_count > 0) {

						double row7_swap_used_mb_temp = (double) aggregated_row_tAggregateRow_2.swap_used_mb_sum
								/ (double) aggregated_row_tAggregateRow_2.swap_used_mb_count;

						row7.swap_used_mb = (int) row7_swap_used_mb_temp;

					} else {
						String count = "0";

						row7.swap_used_mb = ParserUtils.parseTo_Integer(count);

					}
					row7.max_swap_used_mb = aggregated_row_tAggregateRow_2.max_swap_used_mb_max;
					row7.host_configuration_version = aggregated_row_tAggregateRow_2.host_configuration_version_last;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_2 main ] start
					 */

					currentComponent = "tJDBCOutput_2";

					whetherReject_tJDBCOutput_2 = false;
					if (row7.history_datetime != null) {
						pstmt_tJDBCOutput_2.setTimestamp(1,
								new java.sql.Timestamp(row7.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_2.setNull(1, java.sql.Types.DATE);
					}

					if (row7.host_id == null) {
						pstmt_tJDBCOutput_2.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_2.setObject(2, row7.host_id);
					}

					pstmt_tJDBCOutput_2.setShort(3, row7.host_status);

					pstmt_tJDBCOutput_2.setDouble(4, row7.minutes_in_status);

					if (row7.memory_usage_percent == null) {
						pstmt_tJDBCOutput_2.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(5,
								row7.memory_usage_percent);
					}

					if (row7.max_memory_usage == null) {
						pstmt_tJDBCOutput_2.setNull(6, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(6, row7.max_memory_usage);
					}

					if (row7.cpu_usage_percent == null) {
						pstmt_tJDBCOutput_2.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(7, row7.cpu_usage_percent);
					}

					if (row7.max_cpu_usage == null) {
						pstmt_tJDBCOutput_2.setNull(8, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(8, row7.max_cpu_usage);
					}

					if (row7.ksm_cpu_percent == null) {
						pstmt_tJDBCOutput_2.setNull(9, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(9, row7.ksm_cpu_percent);
					}

					if (row7.max_ksm_cpu_percent == null) {
						pstmt_tJDBCOutput_2.setNull(10, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(10,
								row7.max_ksm_cpu_percent);
					}

					if (row7.active_vms == null) {
						pstmt_tJDBCOutput_2.setNull(11, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(11, row7.active_vms);
					}

					if (row7.max_active_vms == null) {
						pstmt_tJDBCOutput_2.setNull(12, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(12, row7.max_active_vms);
					}

					if (row7.total_vms == null) {
						pstmt_tJDBCOutput_2.setNull(13, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(13, row7.total_vms);
					}

					if (row7.max_total_vms == null) {
						pstmt_tJDBCOutput_2.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(14, row7.max_total_vms);
					}

					if (row7.total_vms_vcpus == null) {
						pstmt_tJDBCOutput_2.setNull(15, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setInt(15, row7.total_vms_vcpus);
					}

					if (row7.max_total_vms_vcpus == null) {
						pstmt_tJDBCOutput_2.setNull(16, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2
								.setInt(16, row7.max_total_vms_vcpus);
					}

					if (row7.cpu_load == null) {
						pstmt_tJDBCOutput_2.setNull(17, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setInt(17, row7.cpu_load);
					}

					if (row7.max_cpu_load == null) {
						pstmt_tJDBCOutput_2.setNull(18, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setInt(18, row7.max_cpu_load);
					}

					if (row7.system_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_2.setNull(19, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(19,
								row7.system_cpu_usage_percent);
					}

					if (row7.max_system_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_2.setNull(20, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(20,
								row7.max_system_cpu_usage_percent);
					}

					if (row7.user_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_2.setNull(21, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(21,
								row7.user_cpu_usage_percent);
					}

					if (row7.max_user_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_2.setNull(22, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setShort(22,
								row7.max_user_cpu_usage_percent);
					}

					if (row7.swap_used_mb == null) {
						pstmt_tJDBCOutput_2.setNull(23, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setInt(23, row7.swap_used_mb);
					}

					if (row7.max_swap_used_mb == null) {
						pstmt_tJDBCOutput_2.setNull(24, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setInt(24, row7.max_swap_used_mb);
					}

					if (row7.host_configuration_version == null) {
						pstmt_tJDBCOutput_2.setNull(25, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_2.setInt(25,
								row7.host_configuration_version);
					}

					try {
						insertedCount_tJDBCOutput_2 = insertedCount_tJDBCOutput_2
								+ pstmt_tJDBCOutput_2.executeUpdate();
						nb_line_tJDBCOutput_2++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_2 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_2++;

					/**
					 * [tJDBCOutput_2 main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.put("tAggregateRow_2", null);

		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short max_receive_rate_percent;

		public Short getMax_receive_rate_percent() {
			return this.max_receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Short max_transmit_rate_percent;

		public Short getMax_transmit_rate_percent() {
			return this.max_transmit_rate_percent;
		}

		public Integer host_interface_configuration_version;

		public Integer getHost_interface_configuration_version() {
			return this.host_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.host_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_receive_rate_percent = null;
					} else {
						this.max_receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_transmit_rate_percent = null;
					} else {
						this.max_transmit_rate_percent = dis.readShort();
					}

					this.host_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.max_receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Short

				if (this.max_transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_transmit_rate_percent);
				}

				// Integer

				writeInteger(this.host_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",max_receive_rate_percent="
					+ String.valueOf(max_receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",max_transmit_rate_percent="
					+ String.valueOf(max_transmit_rate_percent));
			sb.append(",host_interface_configuration_version="
					+ String.valueOf(host_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short max_receive_rate_percent;

		public Short getMax_receive_rate_percent() {
			return this.max_receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Short max_transmit_rate_percent;

		public Short getMax_transmit_rate_percent() {
			return this.max_transmit_rate_percent;
		}

		public Integer host_interface_configuration_version;

		public Integer getHost_interface_configuration_version() {
			return this.host_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.host_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_receive_rate_percent = null;
					} else {
						this.max_receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_transmit_rate_percent = null;
					} else {
						this.max_transmit_rate_percent = dis.readShort();
					}

					this.host_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.max_receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Short

				if (this.max_transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_transmit_rate_percent);
				}

				// Integer

				writeInteger(this.host_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",max_receive_rate_percent="
					+ String.valueOf(max_receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",max_transmit_rate_percent="
					+ String.valueOf(max_transmit_rate_percent));
			sb.append(",host_interface_configuration_version="
					+ String.valueOf(host_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class host_history_history_aggregateStruct
			implements
			routines.system.IPersistableRow<host_history_history_aggregateStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Integer host_interface_configuration_version;

		public Integer getHost_interface_configuration_version() {
			return this.host_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.host_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					this.host_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Integer

				writeInteger(this.host_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",host_interface_configuration_version="
					+ String.valueOf(host_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(host_history_history_aggregateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int history_id;

		public int getHistory_id() {
			return this.history_id;
		}

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Integer host_interface_configuration_version;

		public Integer getHost_interface_configuration_version() {
			return this.host_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_id = dis.readInt();

					this.history_datetime = readDate(dis);

					this.host_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					this.host_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.history_id);

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.host_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Integer

				writeInteger(this.host_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",history_datetime=" + String.valueOf(history_datetime));
			sb.append(",host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",host_interface_configuration_version="
					+ String.valueOf(host_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				host_history_history_aggregateStruct host_history_history_aggregate = new host_history_history_aggregateStruct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_3_AGGOUT";

				int tos_count_tAggregateRow_3_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object host_interface_id;
					Short receive_rate_percent_sum;
					int receive_rate_percent_count = 0;

					Short max_receive_rate_percent_max;
					Short transmit_rate_percent_sum;
					int transmit_rate_percent_count = 0;

					Short max_transmit_rate_percent_max;
					Integer host_interface_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.host_interface_id == null) ? 0
											: this.host_interface_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.host_interface_id == null) {
							if (other.host_interface_id != null)
								return false;
						} else if (!this.host_interface_id
								.equals(other.host_interface_id))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				host_history_history_aggregateStruct host_history_history_aggregate_tmp = new host_history_history_aggregateStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());
				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				conn_tJDBCInput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = "SELECT     history_id,     history_datetime,     host_interface_id,     receive_rate_percent,     transmit_rate_percent,     host_interface_configuration_version  FROM host_interface_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,        	 host_interface_id";

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);

				java.sql.ResultSet rs_tJDBCInput_3 = stmt_tJDBCInput_3
						.executeQuery(dbquery_tJDBCInput_3);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
						.getMetaData();
				int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
						.getColumnCount();

				String tmpContent_tJDBCInput_3 = null;
				while (rs_tJDBCInput_3.next()) {
					nb_line_tJDBCInput_3++;

					if (colQtyInRs_tJDBCInput_3 < 1) {
						row3.history_id = 0;
					} else {

						if (rs_tJDBCInput_3.getObject(1) != null) {
							row3.history_id = rs_tJDBCInput_3.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_3 < 2) {
						row3.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_3 = null;
						try {
							date_tJDBCInput_3 = rs_tJDBCInput_3.getTimestamp(2);
						} catch (Exception e) {
							date_tJDBCInput_3 = rs_tJDBCInput_3.getDate(2);
						}
						row3.history_datetime = date_tJDBCInput_3;

					}
					if (colQtyInRs_tJDBCInput_3 < 3) {
						row3.host_interface_id = null;
					} else {

						if (rs_tJDBCInput_3.getObject(3) != null) {
							row3.host_interface_id = rs_tJDBCInput_3
									.getObject(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_3 < 4) {
						row3.receive_rate_percent = null;
					} else {

						if (rs_tJDBCInput_3.getObject(4) != null) {
							row3.receive_rate_percent = rs_tJDBCInput_3
									.getShort(4);
						} else {
							row3.receive_rate_percent = null;
						}

						if (rs_tJDBCInput_3.wasNull()) {
							row3.receive_rate_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_3 < 5) {
						row3.transmit_rate_percent = null;
					} else {

						if (rs_tJDBCInput_3.getObject(5) != null) {
							row3.transmit_rate_percent = rs_tJDBCInput_3
									.getShort(5);
						} else {
							row3.transmit_rate_percent = null;
						}

						if (rs_tJDBCInput_3.wasNull()) {
							row3.transmit_rate_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_3 < 6) {
						row3.host_interface_configuration_version = null;
					} else {

						if (rs_tJDBCInput_3.getObject(6) != null) {
							row3.host_interface_configuration_version = rs_tJDBCInput_3
									.getInt(6);
						} else {
							row3.host_interface_configuration_version = null;
						}

						if (rs_tJDBCInput_3.wasNull()) {
							row3.host_interface_configuration_version = null;
						}
					}

					/**
					 * [tJDBCInput_3 begin ] stop
					 */
					/**
					 * [tJDBCInput_3 main ] start
					 */

					currentComponent = "tJDBCInput_3";

					tos_count_tJDBCInput_3++;

					/**
					 * [tJDBCInput_3 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row3.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row3'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							host_history_history_aggregate = null;

							// # Output table : 'host_history_history_aggregate'
							host_history_history_aggregate_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row3.history_datetime);
							host_history_history_aggregate_tmp.host_interface_id = row3.host_interface_id;
							host_history_history_aggregate_tmp.receive_rate_percent = row3.receive_rate_percent;
							host_history_history_aggregate_tmp.transmit_rate_percent = row3.transmit_rate_percent;
							host_history_history_aggregate_tmp.host_interface_configuration_version = row3.host_interface_configuration_version;
							host_history_history_aggregate = host_history_history_aggregate_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */
						// Start of branch "host_history_history_aggregate"
						if (host_history_history_aggregate != null) {

							/**
							 * [tAggregateRow_3_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_3_AGGOUT";

							operation_finder_tAggregateRow_3.history_datetime = host_history_history_aggregate.history_datetime;
							operation_finder_tAggregateRow_3.host_interface_id = host_history_history_aggregate.host_interface_id;

							operation_finder_tAggregateRow_3.hashCodeDirty = true;

							operation_result_tAggregateRow_3 = hash_tAggregateRow_3
									.get(operation_finder_tAggregateRow_3);

							boolean isFirstAdd_tAggregateRow_3 = false;

							if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

								operation_result_tAggregateRow_3.history_datetime = operation_finder_tAggregateRow_3.history_datetime;
								operation_result_tAggregateRow_3.host_interface_id = operation_finder_tAggregateRow_3.host_interface_id;

								isFirstAdd_tAggregateRow_3 = true;

								hash_tAggregateRow_3.put(
										operation_result_tAggregateRow_3,
										operation_result_tAggregateRow_3);

							} // G_OutMain_AggR_001

							if (host_history_history_aggregate.receive_rate_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_3.receive_rate_percent_count++;

								if (operation_result_tAggregateRow_3.receive_rate_percent_sum == null) {
									operation_result_tAggregateRow_3.receive_rate_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_3.receive_rate_percent_sum = (short) (operation_result_tAggregateRow_3.receive_rate_percent_sum
										.shortValue() + host_history_history_aggregate.receive_rate_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_history_history_aggregate.receive_rate_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_3.max_receive_rate_percent_max == null
										|| host_history_history_aggregate.receive_rate_percent > operation_result_tAggregateRow_3.max_receive_rate_percent_max

								) {
									operation_result_tAggregateRow_3.max_receive_rate_percent_max = host_history_history_aggregate.receive_rate_percent;
								}

							} // G_OutMain_AggR_546

							if (host_history_history_aggregate.transmit_rate_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_3.transmit_rate_percent_count++;

								if (operation_result_tAggregateRow_3.transmit_rate_percent_sum == null) {
									operation_result_tAggregateRow_3.transmit_rate_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_3.transmit_rate_percent_sum = (short) (operation_result_tAggregateRow_3.transmit_rate_percent_sum
										.shortValue() + host_history_history_aggregate.transmit_rate_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (host_history_history_aggregate.transmit_rate_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_3.max_transmit_rate_percent_max == null
										|| host_history_history_aggregate.transmit_rate_percent > operation_result_tAggregateRow_3.max_transmit_rate_percent_max

								) {
									operation_result_tAggregateRow_3.max_transmit_rate_percent_max = host_history_history_aggregate.transmit_rate_percent;
								}

							} // G_OutMain_AggR_546

							if (host_history_history_aggregate.host_interface_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_3.host_interface_configuration_version_last = host_history_history_aggregate.host_interface_configuration_version;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_3_AGGOUT++;

							/**
							 * [tAggregateRow_3_AGGOUT main ] stop
							 */

						} // End of branch "host_history_history_aggregate"

					} // G_TM_M_280 close main tMap filter for table 'row3'

					/**
					 * [tJDBCInput_3 end ] start
					 */

					currentComponent = "tJDBCInput_3";

				}
				stmt_tJDBCInput_3.close();

				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_3_AGGOUT";

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_3 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_3", false);
				start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_3";

				int tos_count_tJDBCOutput_3 = 0;

				int nb_line_tJDBCOutput_3 = 0;
				int nb_line_update_tJDBCOutput_3 = 0;
				int nb_line_inserted_tJDBCOutput_3 = 0;
				int nb_line_deleted_tJDBCOutput_3 = 0;
				int nb_line_rejected_tJDBCOutput_3 = 0;

				int deletedCount_tJDBCOutput_3 = 0;
				int updatedCount_tJDBCOutput_3 = 0;
				int insertedCount_tJDBCOutput_3 = 0;
				int rejectedCount_tJDBCOutput_3 = 0;

				boolean whetherReject_tJDBCOutput_3 = false;

				java.sql.Connection connection_tJDBCOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_3 = 10000;
				int batchSizeCounter_tJDBCOutput_3 = 0;

				String insert_tJDBCOutput_3 = "INSERT INTO "
						+ "host_interface_hourly_history"
						+ " (history_datetime,host_interface_id,receive_rate_percent,max_receive_rate_percent,transmit_rate_percent,max_transmit_rate_percent,host_interface_configuration_version) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(insert_tJDBCOutput_3);

				/**
				 * [tJDBCOutput_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3
						.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_3_AGGIN";

					row8.history_datetime = aggregated_row_tAggregateRow_3.history_datetime;

					row8.host_interface_id = aggregated_row_tAggregateRow_3.host_interface_id;

					if (aggregated_row_tAggregateRow_3.receive_rate_percent_count > 0) {

						double row8_receive_rate_percent_temp = (double) aggregated_row_tAggregateRow_3.receive_rate_percent_sum
								/ (double) aggregated_row_tAggregateRow_3.receive_rate_percent_count;

						row8.receive_rate_percent = (short) row8_receive_rate_percent_temp;

					} else {
						String count = "0";

						row8.receive_rate_percent = ParserUtils
								.parseTo_Short(count);

					}
					row8.max_receive_rate_percent = aggregated_row_tAggregateRow_3.max_receive_rate_percent_max;
					if (aggregated_row_tAggregateRow_3.transmit_rate_percent_count > 0) {

						double row8_transmit_rate_percent_temp = (double) aggregated_row_tAggregateRow_3.transmit_rate_percent_sum
								/ (double) aggregated_row_tAggregateRow_3.transmit_rate_percent_count;

						row8.transmit_rate_percent = (short) row8_transmit_rate_percent_temp;

					} else {
						String count = "0";

						row8.transmit_rate_percent = ParserUtils
								.parseTo_Short(count);

					}
					row8.max_transmit_rate_percent = aggregated_row_tAggregateRow_3.max_transmit_rate_percent_max;
					row8.host_interface_configuration_version = aggregated_row_tAggregateRow_3.host_interface_configuration_version_last;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_3 main ] start
					 */

					currentComponent = "tJDBCOutput_3";

					whetherReject_tJDBCOutput_3 = false;
					if (row8.history_datetime != null) {
						pstmt_tJDBCOutput_3.setTimestamp(1,
								new java.sql.Timestamp(row8.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_3.setNull(1, java.sql.Types.DATE);
					}

					if (row8.host_interface_id == null) {
						pstmt_tJDBCOutput_3.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_3
								.setObject(2, row8.host_interface_id);
					}

					if (row8.receive_rate_percent == null) {
						pstmt_tJDBCOutput_3.setNull(3, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_3.setShort(3,
								row8.receive_rate_percent);
					}

					if (row8.max_receive_rate_percent == null) {
						pstmt_tJDBCOutput_3.setNull(4, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_3.setShort(4,
								row8.max_receive_rate_percent);
					}

					if (row8.transmit_rate_percent == null) {
						pstmt_tJDBCOutput_3.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_3.setShort(5,
								row8.transmit_rate_percent);
					}

					if (row8.max_transmit_rate_percent == null) {
						pstmt_tJDBCOutput_3.setNull(6, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_3.setShort(6,
								row8.max_transmit_rate_percent);
					}

					if (row8.host_interface_configuration_version == null) {
						pstmt_tJDBCOutput_3.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_3.setInt(7,
								row8.host_interface_configuration_version);
					}

					try {
						insertedCount_tJDBCOutput_3 = insertedCount_tJDBCOutput_3
								+ pstmt_tJDBCOutput_3.executeUpdate();
						nb_line_tJDBCOutput_3++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_3 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_3++;

					/**
					 * [tJDBCOutput_3 main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_3 end ] start
				 */

				currentComponent = "tJDBCOutput_3";

				if (pstmt_tJDBCOutput_3 != null) {

					pstmt_tJDBCOutput_3.close();

				}

				nb_line_deleted_tJDBCOutput_3 = nb_line_deleted_tJDBCOutput_3
						+ deletedCount_tJDBCOutput_3;
				nb_line_update_tJDBCOutput_3 = nb_line_update_tJDBCOutput_3
						+ updatedCount_tJDBCOutput_3;
				nb_line_inserted_tJDBCOutput_3 = nb_line_inserted_tJDBCOutput_3
						+ insertedCount_tJDBCOutput_3;
				nb_line_rejected_tJDBCOutput_3 = nb_line_rejected_tJDBCOutput_3
						+ rejectedCount_tJDBCOutput_3;

				globalMap.put("tJDBCOutput_3_NB_LINE", nb_line_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_3);

				ok_Hash.put("tJDBCOutput_3", true);
				end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.put("tAggregateRow_3", null);

		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public short vm_status;

		public short getVm_status() {
			return this.vm_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short max_cpu_usage;

		public Short getMax_cpu_usage() {
			return this.max_cpu_usage;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short max_memory_usage;

		public Short getMax_memory_usage() {
			return this.max_memory_usage;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Short max_user_cpu_usage_percent;

		public Short getMax_user_cpu_usage_percent() {
			return this.max_user_cpu_usage_percent;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public Short max_system_cpu_usage_percent;

		public Short getMax_system_cpu_usage_percent() {
			return this.max_system_cpu_usage_percent;
		}

		public java.util.Date vm_last_up_time;

		public java.util.Date getVm_last_up_time() {
			return this.vm_last_up_time;
		}

		public java.util.Date vm_last_boot_time;

		public java.util.Date getVm_last_boot_time() {
			return this.vm_last_boot_time;
		}

		public String vm_ip;

		public String getVm_ip() {
			return this.vm_ip;
		}

		public String current_user_name;

		public String getCurrent_user_name() {
			return this.current_user_name;
		}

		public Object currently_running_on_host;

		public Object getCurrently_running_on_host() {
			return this.currently_running_on_host;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer current_host_configuration_version;

		public Integer getCurrent_host_configuration_version() {
			return this.current_host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_cpu_usage = null;
					} else {
						this.max_cpu_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_memory_usage = null;
					} else {
						this.max_memory_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_user_cpu_usage_percent = null;
					} else {
						this.max_user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_system_cpu_usage_percent = null;
					} else {
						this.max_system_cpu_usage_percent = dis.readShort();
					}

					this.vm_last_up_time = readDate(dis);

					this.vm_last_boot_time = readDate(dis);

					this.vm_ip = readString(dis);

					this.current_user_name = readString(dis);

					this.currently_running_on_host = (Object) dis.readObject();

					this.vm_configuration_version = readInteger(dis);

					this.current_host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// short

				dos.writeShort(this.vm_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.max_cpu_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_cpu_usage);
				}

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.max_memory_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_memory_usage);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Short

				if (this.max_user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_user_cpu_usage_percent);
				}

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// Short

				if (this.max_system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_system_cpu_usage_percent);
				}

				// java.util.Date

				writeDate(this.vm_last_up_time, dos);

				// java.util.Date

				writeDate(this.vm_last_boot_time, dos);

				// String

				writeString(this.vm_ip, dos);

				// String

				writeString(this.current_user_name, dos);

				// Object

				dos.writeObject(this.currently_running_on_host);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.current_host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_status=" + String.valueOf(vm_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",max_cpu_usage=" + String.valueOf(max_cpu_usage));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",max_memory_usage=" + String.valueOf(max_memory_usage));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",max_user_cpu_usage_percent="
					+ String.valueOf(max_user_cpu_usage_percent));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",max_system_cpu_usage_percent="
					+ String.valueOf(max_system_cpu_usage_percent));
			sb.append(",vm_last_up_time=" + String.valueOf(vm_last_up_time));
			sb.append(",vm_last_boot_time=" + String.valueOf(vm_last_boot_time));
			sb.append(",vm_ip=" + vm_ip);
			sb.append(",current_user_name=" + current_user_name);
			sb.append(",currently_running_on_host="
					+ String.valueOf(currently_running_on_host));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",current_host_configuration_version="
					+ String.valueOf(current_host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public short vm_status;

		public short getVm_status() {
			return this.vm_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short max_cpu_usage;

		public Short getMax_cpu_usage() {
			return this.max_cpu_usage;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short max_memory_usage;

		public Short getMax_memory_usage() {
			return this.max_memory_usage;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Short max_user_cpu_usage_percent;

		public Short getMax_user_cpu_usage_percent() {
			return this.max_user_cpu_usage_percent;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public Short max_system_cpu_usage_percent;

		public Short getMax_system_cpu_usage_percent() {
			return this.max_system_cpu_usage_percent;
		}

		public java.util.Date vm_last_up_time;

		public java.util.Date getVm_last_up_time() {
			return this.vm_last_up_time;
		}

		public java.util.Date vm_last_boot_time;

		public java.util.Date getVm_last_boot_time() {
			return this.vm_last_boot_time;
		}

		public String vm_ip;

		public String getVm_ip() {
			return this.vm_ip;
		}

		public String current_user_name;

		public String getCurrent_user_name() {
			return this.current_user_name;
		}

		public Object currently_running_on_host;

		public Object getCurrently_running_on_host() {
			return this.currently_running_on_host;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer current_host_configuration_version;

		public Integer getCurrent_host_configuration_version() {
			return this.current_host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_cpu_usage = null;
					} else {
						this.max_cpu_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_memory_usage = null;
					} else {
						this.max_memory_usage = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_user_cpu_usage_percent = null;
					} else {
						this.max_user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_system_cpu_usage_percent = null;
					} else {
						this.max_system_cpu_usage_percent = dis.readShort();
					}

					this.vm_last_up_time = readDate(dis);

					this.vm_last_boot_time = readDate(dis);

					this.vm_ip = readString(dis);

					this.current_user_name = readString(dis);

					this.currently_running_on_host = (Object) dis.readObject();

					this.vm_configuration_version = readInteger(dis);

					this.current_host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// short

				dos.writeShort(this.vm_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.max_cpu_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_cpu_usage);
				}

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.max_memory_usage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_memory_usage);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Short

				if (this.max_user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_user_cpu_usage_percent);
				}

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// Short

				if (this.max_system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_system_cpu_usage_percent);
				}

				// java.util.Date

				writeDate(this.vm_last_up_time, dos);

				// java.util.Date

				writeDate(this.vm_last_boot_time, dos);

				// String

				writeString(this.vm_ip, dos);

				// String

				writeString(this.current_user_name, dos);

				// Object

				dos.writeObject(this.currently_running_on_host);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.current_host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_status=" + String.valueOf(vm_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",max_cpu_usage=" + String.valueOf(max_cpu_usage));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",max_memory_usage=" + String.valueOf(max_memory_usage));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",max_user_cpu_usage_percent="
					+ String.valueOf(max_user_cpu_usage_percent));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",max_system_cpu_usage_percent="
					+ String.valueOf(max_system_cpu_usage_percent));
			sb.append(",vm_last_up_time=" + String.valueOf(vm_last_up_time));
			sb.append(",vm_last_boot_time=" + String.valueOf(vm_last_boot_time));
			sb.append(",vm_ip=" + vm_ip);
			sb.append(",current_user_name=" + current_user_name);
			sb.append(",currently_running_on_host="
					+ String.valueOf(currently_running_on_host));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",current_host_configuration_version="
					+ String.valueOf(current_host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class vm_aggregate_historyStruct implements
			routines.system.IPersistableRow<vm_aggregate_historyStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public short vm_status;

		public short getVm_status() {
			return this.vm_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public java.util.Date vm_last_up_time;

		public java.util.Date getVm_last_up_time() {
			return this.vm_last_up_time;
		}

		public java.util.Date vm_last_boot_time;

		public java.util.Date getVm_last_boot_time() {
			return this.vm_last_boot_time;
		}

		public String vm_ip;

		public String getVm_ip() {
			return this.vm_ip;
		}

		public String current_user_name;

		public String getCurrent_user_name() {
			return this.current_user_name;
		}

		public Object currently_running_on_host;

		public Object getCurrently_running_on_host() {
			return this.currently_running_on_host;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer current_host_configuration_version;

		public Integer getCurrent_host_configuration_version() {
			return this.current_host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					this.vm_last_up_time = readDate(dis);

					this.vm_last_boot_time = readDate(dis);

					this.vm_ip = readString(dis);

					this.current_user_name = readString(dis);

					this.currently_running_on_host = (Object) dis.readObject();

					this.vm_configuration_version = readInteger(dis);

					this.current_host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// short

				dos.writeShort(this.vm_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// java.util.Date

				writeDate(this.vm_last_up_time, dos);

				// java.util.Date

				writeDate(this.vm_last_boot_time, dos);

				// String

				writeString(this.vm_ip, dos);

				// String

				writeString(this.current_user_name, dos);

				// Object

				dos.writeObject(this.currently_running_on_host);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.current_host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_status=" + String.valueOf(vm_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",vm_last_up_time=" + String.valueOf(vm_last_up_time));
			sb.append(",vm_last_boot_time=" + String.valueOf(vm_last_boot_time));
			sb.append(",vm_ip=" + vm_ip);
			sb.append(",current_user_name=" + current_user_name);
			sb.append(",currently_running_on_host="
					+ String.valueOf(currently_running_on_host));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",current_host_configuration_version="
					+ String.valueOf(current_host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_aggregate_historyStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int history_id;

		public int getHistory_id() {
			return this.history_id;
		}

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public short vm_status;

		public short getVm_status() {
			return this.vm_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public Short cpu_usage_percent;

		public Short getCpu_usage_percent() {
			return this.cpu_usage_percent;
		}

		public Short memory_usage_percent;

		public Short getMemory_usage_percent() {
			return this.memory_usage_percent;
		}

		public Short user_cpu_usage_percent;

		public Short getUser_cpu_usage_percent() {
			return this.user_cpu_usage_percent;
		}

		public Short system_cpu_usage_percent;

		public Short getSystem_cpu_usage_percent() {
			return this.system_cpu_usage_percent;
		}

		public java.util.Date vm_last_up_time;

		public java.util.Date getVm_last_up_time() {
			return this.vm_last_up_time;
		}

		public java.util.Date vm_last_boot_time;

		public java.util.Date getVm_last_boot_time() {
			return this.vm_last_boot_time;
		}

		public String vm_ip;

		public String getVm_ip() {
			return this.vm_ip;
		}

		public String current_user_name;

		public String getCurrent_user_name() {
			return this.current_user_name;
		}

		public Object currently_running_on_host;

		public Object getCurrently_running_on_host() {
			return this.currently_running_on_host;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer current_host_configuration_version;

		public Integer getCurrent_host_configuration_version() {
			return this.current_host_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_id = dis.readInt();

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_status = dis.readShort();

					this.minutes_in_status = dis.readDouble();

					length = dis.readByte();
					if (length == -1) {
						this.cpu_usage_percent = null;
					} else {
						this.cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.memory_usage_percent = null;
					} else {
						this.memory_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.user_cpu_usage_percent = null;
					} else {
						this.user_cpu_usage_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.system_cpu_usage_percent = null;
					} else {
						this.system_cpu_usage_percent = dis.readShort();
					}

					this.vm_last_up_time = readDate(dis);

					this.vm_last_boot_time = readDate(dis);

					this.vm_ip = readString(dis);

					this.current_user_name = readString(dis);

					this.currently_running_on_host = (Object) dis.readObject();

					this.vm_configuration_version = readInteger(dis);

					this.current_host_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.history_id);

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// short

				dos.writeShort(this.vm_status);

				// double

				dos.writeDouble(this.minutes_in_status);

				// Short

				if (this.cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_usage_percent);
				}

				// Short

				if (this.memory_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.memory_usage_percent);
				}

				// Short

				if (this.user_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.user_cpu_usage_percent);
				}

				// Short

				if (this.system_cpu_usage_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.system_cpu_usage_percent);
				}

				// java.util.Date

				writeDate(this.vm_last_up_time, dos);

				// java.util.Date

				writeDate(this.vm_last_boot_time, dos);

				// String

				writeString(this.vm_ip, dos);

				// String

				writeString(this.current_user_name, dos);

				// Object

				dos.writeObject(this.currently_running_on_host);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.current_host_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_status=" + String.valueOf(vm_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",cpu_usage_percent=" + String.valueOf(cpu_usage_percent));
			sb.append(",memory_usage_percent="
					+ String.valueOf(memory_usage_percent));
			sb.append(",user_cpu_usage_percent="
					+ String.valueOf(user_cpu_usage_percent));
			sb.append(",system_cpu_usage_percent="
					+ String.valueOf(system_cpu_usage_percent));
			sb.append(",vm_last_up_time=" + String.valueOf(vm_last_up_time));
			sb.append(",vm_last_boot_time=" + String.valueOf(vm_last_boot_time));
			sb.append(",vm_ip=" + vm_ip);
			sb.append(",current_user_name=" + current_user_name);
			sb.append(",currently_running_on_host="
					+ String.valueOf(currently_running_on_host));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",current_host_configuration_version="
					+ String.valueOf(current_host_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				vm_aggregate_historyStruct vm_aggregate_history = new vm_aggregate_historyStruct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_4_AGGOUT";

				int tos_count_tAggregateRow_4_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object vm_id;
					short vm_status;
					BigDecimal minutes_in_status_sum;

					Short cpu_usage_percent_sum;
					int cpu_usage_percent_count = 0;

					Short max_cpu_usage_max;
					Short memory_usage_percent_sum;
					int memory_usage_percent_count = 0;

					Short max_memory_usage_max;
					Short user_cpu_usage_percent_sum;
					int user_cpu_usage_percent_count = 0;

					Short max_user_cpu_usage_percent_max;
					Short system_cpu_usage_percent_sum;
					int system_cpu_usage_percent_count = 0;

					Short max_system_cpu_usage_percent_max;
					java.util.Date vm_last_up_time_last;
					java.util.Date vm_last_boot_time_last;
					String vm_ip_last;
					String current_user_name_last;
					Object currently_running_on_host_last;
					Integer vm_configuration_version_last;
					Integer current_host_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.vm_id == null) ? 0 : this.vm_id
											.hashCode());

							result = prime * result + (int) this.vm_status;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.vm_id == null) {
							if (other.vm_id != null)
								return false;
						} else if (!this.vm_id.equals(other.vm_id))
							return false;

						if (this.vm_status != other.vm_status)
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());
				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_aggregate_historyStruct vm_aggregate_history_tmp = new vm_aggregate_historyStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tJDBCInput_4 begin ] start
				 */

				ok_Hash.put("tJDBCInput_4", false);
				start_Hash.put("tJDBCInput_4", System.currentTimeMillis());
				currentComponent = "tJDBCInput_4";

				int tos_count_tJDBCInput_4 = 0;

				int nb_line_tJDBCInput_4 = 0;
				java.sql.Connection conn_tJDBCInput_4 = null;
				conn_tJDBCInput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
						.createStatement();

				String dbquery_tJDBCInput_4 = "SELECT     history_id,     history_datetime,     vm_id,     vm_status,     minutes_in_status,     cpu_usage_percent,     memory_usage_percent,     user_cpu_usage_percent,     system_cpu_usage_percent,     vm_last_up_time,     vm_last_boot_time,     vm_ip,     current_user_name,     currently_running_on_host,     vm_configuration_version,     current_host_configuration_version  FROM vm_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,        	 vm_id,  		 vm_status";

				globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);

				java.sql.ResultSet rs_tJDBCInput_4 = stmt_tJDBCInput_4
						.executeQuery(dbquery_tJDBCInput_4);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
						.getMetaData();
				int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
						.getColumnCount();

				String tmpContent_tJDBCInput_4 = null;
				while (rs_tJDBCInput_4.next()) {
					nb_line_tJDBCInput_4++;

					if (colQtyInRs_tJDBCInput_4 < 1) {
						row4.history_id = 0;
					} else {

						if (rs_tJDBCInput_4.getObject(1) != null) {
							row4.history_id = rs_tJDBCInput_4.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_4 < 2) {
						row4.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_4 = null;
						try {
							date_tJDBCInput_4 = rs_tJDBCInput_4.getTimestamp(2);
						} catch (Exception e) {
							date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(2);
						}
						row4.history_datetime = date_tJDBCInput_4;

					}
					if (colQtyInRs_tJDBCInput_4 < 3) {
						row4.vm_id = null;
					} else {

						if (rs_tJDBCInput_4.getObject(3) != null) {
							row4.vm_id = rs_tJDBCInput_4.getObject(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_4 < 4) {
						row4.vm_status = 0;
					} else {

						if (rs_tJDBCInput_4.getObject(4) != null) {
							row4.vm_status = rs_tJDBCInput_4.getShort(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_4 < 5) {
						row4.minutes_in_status = 0;
					} else {

						if (rs_tJDBCInput_4.getObject(5) != null) {
							row4.minutes_in_status = rs_tJDBCInput_4
									.getDouble(5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_4 < 6) {
						row4.cpu_usage_percent = null;
					} else {

						if (rs_tJDBCInput_4.getObject(6) != null) {
							row4.cpu_usage_percent = rs_tJDBCInput_4
									.getShort(6);
						} else {
							row4.cpu_usage_percent = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.cpu_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 7) {
						row4.memory_usage_percent = null;
					} else {

						if (rs_tJDBCInput_4.getObject(7) != null) {
							row4.memory_usage_percent = rs_tJDBCInput_4
									.getShort(7);
						} else {
							row4.memory_usage_percent = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.memory_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 8) {
						row4.user_cpu_usage_percent = null;
					} else {

						if (rs_tJDBCInput_4.getObject(8) != null) {
							row4.user_cpu_usage_percent = rs_tJDBCInput_4
									.getShort(8);
						} else {
							row4.user_cpu_usage_percent = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.user_cpu_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 9) {
						row4.system_cpu_usage_percent = null;
					} else {

						if (rs_tJDBCInput_4.getObject(9) != null) {
							row4.system_cpu_usage_percent = rs_tJDBCInput_4
									.getShort(9);
						} else {
							row4.system_cpu_usage_percent = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.system_cpu_usage_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 10) {
						row4.vm_last_up_time = null;
					} else {

						java.util.Date date_tJDBCInput_4 = null;
						try {
							date_tJDBCInput_4 = rs_tJDBCInput_4
									.getTimestamp(10);
						} catch (Exception e) {
							date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(10);
						}
						row4.vm_last_up_time = date_tJDBCInput_4;

						if (rs_tJDBCInput_4.wasNull()) {
							row4.vm_last_up_time = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 11) {
						row4.vm_last_boot_time = null;
					} else {

						java.util.Date date_tJDBCInput_4 = null;
						try {
							date_tJDBCInput_4 = rs_tJDBCInput_4
									.getTimestamp(11);
						} catch (Exception e) {
							date_tJDBCInput_4 = rs_tJDBCInput_4.getDate(11);
						}
						row4.vm_last_boot_time = date_tJDBCInput_4;

						if (rs_tJDBCInput_4.wasNull()) {
							row4.vm_last_boot_time = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 12) {
						row4.vm_ip = null;
					} else {

						tmpContent_tJDBCInput_4 = rs_tJDBCInput_4.getString(12);
						if (tmpContent_tJDBCInput_4 != null) {
							row4.vm_ip = tmpContent_tJDBCInput_4;
						} else {
							row4.vm_ip = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.vm_ip = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 13) {
						row4.current_user_name = null;
					} else {

						tmpContent_tJDBCInput_4 = rs_tJDBCInput_4.getString(13);
						if (tmpContent_tJDBCInput_4 != null) {
							row4.current_user_name = tmpContent_tJDBCInput_4;
						} else {
							row4.current_user_name = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.current_user_name = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 14) {
						row4.currently_running_on_host = null;
					} else {

						if (rs_tJDBCInput_4.getObject(14) != null) {
							row4.currently_running_on_host = rs_tJDBCInput_4
									.getObject(14);
						} else {
							row4.currently_running_on_host = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.currently_running_on_host = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 15) {
						row4.vm_configuration_version = null;
					} else {

						if (rs_tJDBCInput_4.getObject(15) != null) {
							row4.vm_configuration_version = rs_tJDBCInput_4
									.getInt(15);
						} else {
							row4.vm_configuration_version = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.vm_configuration_version = null;
						}
					}
					if (colQtyInRs_tJDBCInput_4 < 16) {
						row4.current_host_configuration_version = null;
					} else {

						if (rs_tJDBCInput_4.getObject(16) != null) {
							row4.current_host_configuration_version = rs_tJDBCInput_4
									.getInt(16);
						} else {
							row4.current_host_configuration_version = null;
						}

						if (rs_tJDBCInput_4.wasNull()) {
							row4.current_host_configuration_version = null;
						}
					}

					/**
					 * [tJDBCInput_4 begin ] stop
					 */
					/**
					 * [tJDBCInput_4 main ] start
					 */

					currentComponent = "tJDBCInput_4";

					tos_count_tJDBCInput_4++;

					/**
					 * [tJDBCInput_4 main ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row4.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row4'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							vm_aggregate_history = null;

							// # Output table : 'vm_aggregate_history'
							vm_aggregate_history_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row4.history_datetime);
							vm_aggregate_history_tmp.vm_id = row4.vm_id;
							vm_aggregate_history_tmp.vm_status = row4.vm_status;
							vm_aggregate_history_tmp.minutes_in_status = row4.minutes_in_status;
							vm_aggregate_history_tmp.cpu_usage_percent = row4.cpu_usage_percent;
							vm_aggregate_history_tmp.memory_usage_percent = row4.memory_usage_percent;
							vm_aggregate_history_tmp.user_cpu_usage_percent = row4.user_cpu_usage_percent;
							vm_aggregate_history_tmp.system_cpu_usage_percent = row4.system_cpu_usage_percent;
							vm_aggregate_history_tmp.vm_last_up_time = row4.vm_last_up_time;
							vm_aggregate_history_tmp.vm_last_boot_time = row4.vm_last_boot_time;
							vm_aggregate_history_tmp.vm_ip = row4.vm_ip;
							vm_aggregate_history_tmp.current_user_name = row4.current_user_name;
							vm_aggregate_history_tmp.currently_running_on_host = row4.currently_running_on_host;
							vm_aggregate_history_tmp.vm_configuration_version = row4.vm_configuration_version;
							vm_aggregate_history_tmp.current_host_configuration_version = row4.current_host_configuration_version;
							vm_aggregate_history = vm_aggregate_history_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "vm_aggregate_history"
						if (vm_aggregate_history != null) {

							/**
							 * [tAggregateRow_4_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_4_AGGOUT";

							operation_finder_tAggregateRow_4.history_datetime = vm_aggregate_history.history_datetime;
							operation_finder_tAggregateRow_4.vm_id = vm_aggregate_history.vm_id;
							operation_finder_tAggregateRow_4.vm_status = vm_aggregate_history.vm_status;

							operation_finder_tAggregateRow_4.hashCodeDirty = true;

							operation_result_tAggregateRow_4 = hash_tAggregateRow_4
									.get(operation_finder_tAggregateRow_4);

							boolean isFirstAdd_tAggregateRow_4 = false;

							if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

								operation_result_tAggregateRow_4.history_datetime = operation_finder_tAggregateRow_4.history_datetime;
								operation_result_tAggregateRow_4.vm_id = operation_finder_tAggregateRow_4.vm_id;
								operation_result_tAggregateRow_4.vm_status = operation_finder_tAggregateRow_4.vm_status;

								isFirstAdd_tAggregateRow_4 = true;

								hash_tAggregateRow_4.put(
										operation_result_tAggregateRow_4,
										operation_result_tAggregateRow_4);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_4.minutes_in_status_sum == null) {
								operation_result_tAggregateRow_4.minutes_in_status_sum = new BigDecimal(
										0).setScale(0);
							}
							operation_result_tAggregateRow_4.minutes_in_status_sum = operation_result_tAggregateRow_4.minutes_in_status_sum
									.add(new BigDecimal(
											String.valueOf(vm_aggregate_history.minutes_in_status)));

							if (vm_aggregate_history.cpu_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.cpu_usage_percent_count++;

								if (operation_result_tAggregateRow_4.cpu_usage_percent_sum == null) {
									operation_result_tAggregateRow_4.cpu_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_4.cpu_usage_percent_sum = (short) (operation_result_tAggregateRow_4.cpu_usage_percent_sum
										.shortValue() + vm_aggregate_history.cpu_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.cpu_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_4.max_cpu_usage_max == null
										|| vm_aggregate_history.cpu_usage_percent > operation_result_tAggregateRow_4.max_cpu_usage_max

								) {
									operation_result_tAggregateRow_4.max_cpu_usage_max = vm_aggregate_history.cpu_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.memory_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.memory_usage_percent_count++;

								if (operation_result_tAggregateRow_4.memory_usage_percent_sum == null) {
									operation_result_tAggregateRow_4.memory_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_4.memory_usage_percent_sum = (short) (operation_result_tAggregateRow_4.memory_usage_percent_sum
										.shortValue() + vm_aggregate_history.memory_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.memory_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_4.max_memory_usage_max == null
										|| vm_aggregate_history.memory_usage_percent > operation_result_tAggregateRow_4.max_memory_usage_max

								) {
									operation_result_tAggregateRow_4.max_memory_usage_max = vm_aggregate_history.memory_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.user_cpu_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.user_cpu_usage_percent_count++;

								if (operation_result_tAggregateRow_4.user_cpu_usage_percent_sum == null) {
									operation_result_tAggregateRow_4.user_cpu_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_4.user_cpu_usage_percent_sum = (short) (operation_result_tAggregateRow_4.user_cpu_usage_percent_sum
										.shortValue() + vm_aggregate_history.user_cpu_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.user_cpu_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_4.max_user_cpu_usage_percent_max == null
										|| vm_aggregate_history.user_cpu_usage_percent > operation_result_tAggregateRow_4.max_user_cpu_usage_percent_max

								) {
									operation_result_tAggregateRow_4.max_user_cpu_usage_percent_max = vm_aggregate_history.user_cpu_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.system_cpu_usage_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.system_cpu_usage_percent_count++;

								if (operation_result_tAggregateRow_4.system_cpu_usage_percent_sum == null) {
									operation_result_tAggregateRow_4.system_cpu_usage_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_4.system_cpu_usage_percent_sum = (short) (operation_result_tAggregateRow_4.system_cpu_usage_percent_sum
										.shortValue() + vm_aggregate_history.system_cpu_usage_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.system_cpu_usage_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_4.max_system_cpu_usage_percent_max == null
										|| vm_aggregate_history.system_cpu_usage_percent > operation_result_tAggregateRow_4.max_system_cpu_usage_percent_max

								) {
									operation_result_tAggregateRow_4.max_system_cpu_usage_percent_max = vm_aggregate_history.system_cpu_usage_percent;
								}

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.vm_last_up_time != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.vm_last_up_time_last = vm_aggregate_history.vm_last_up_time;

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.vm_last_boot_time != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.vm_last_boot_time_last = vm_aggregate_history.vm_last_boot_time;

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.vm_ip != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.vm_ip_last = vm_aggregate_history.vm_ip;

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.current_user_name != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.current_user_name_last = vm_aggregate_history.current_user_name;

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.currently_running_on_host != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.currently_running_on_host_last = vm_aggregate_history.currently_running_on_host;

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.vm_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.vm_configuration_version_last = vm_aggregate_history.vm_configuration_version;

							} // G_OutMain_AggR_546

							if (vm_aggregate_history.current_host_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_4.current_host_configuration_version_last = vm_aggregate_history.current_host_configuration_version;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_4_AGGOUT++;

							/**
							 * [tAggregateRow_4_AGGOUT main ] stop
							 */

						} // End of branch "vm_aggregate_history"

					} // G_TM_M_280 close main tMap filter for table 'row4'

					/**
					 * [tJDBCInput_4 end ] start
					 */

					currentComponent = "tJDBCInput_4";

				}
				stmt_tJDBCInput_4.close();

				globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

				ok_Hash.put("tJDBCInput_4", true);
				end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				/**
				 * [tJDBCInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_4_AGGOUT";

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_4 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_4", false);
				start_Hash.put("tJDBCOutput_4", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_4";

				int tos_count_tJDBCOutput_4 = 0;

				int nb_line_tJDBCOutput_4 = 0;
				int nb_line_update_tJDBCOutput_4 = 0;
				int nb_line_inserted_tJDBCOutput_4 = 0;
				int nb_line_deleted_tJDBCOutput_4 = 0;
				int nb_line_rejected_tJDBCOutput_4 = 0;

				int deletedCount_tJDBCOutput_4 = 0;
				int updatedCount_tJDBCOutput_4 = 0;
				int insertedCount_tJDBCOutput_4 = 0;
				int rejectedCount_tJDBCOutput_4 = 0;

				boolean whetherReject_tJDBCOutput_4 = false;

				java.sql.Connection connection_tJDBCOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_4 = 10000;
				int batchSizeCounter_tJDBCOutput_4 = 0;

				String insert_tJDBCOutput_4 = "INSERT INTO "
						+ "vm_hourly_history"
						+ " (history_datetime,vm_id,vm_status,minutes_in_status,cpu_usage_percent,max_cpu_usage,memory_usage_percent,max_memory_usage,user_cpu_usage_percent,max_user_cpu_usage_percent,system_cpu_usage_percent,max_system_cpu_usage_percent,vm_last_up_time,vm_last_boot_time,vm_ip,current_user_name,currently_running_on_host,vm_configuration_version,current_host_configuration_version) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement(insert_tJDBCOutput_4);

				/**
				 * [tJDBCOutput_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4
						.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_4_AGGIN";

					row9.history_datetime = aggregated_row_tAggregateRow_4.history_datetime;

					row9.vm_id = aggregated_row_tAggregateRow_4.vm_id;

					row9.vm_status = aggregated_row_tAggregateRow_4.vm_status;

					if (aggregated_row_tAggregateRow_4.minutes_in_status_sum != null) {
						row9.minutes_in_status = aggregated_row_tAggregateRow_4.minutes_in_status_sum
								.doubleValue();

					} else {

						row9.minutes_in_status = 0;

					}

					if (aggregated_row_tAggregateRow_4.cpu_usage_percent_count > 0) {

						double row9_cpu_usage_percent_temp = (double) aggregated_row_tAggregateRow_4.cpu_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_4.cpu_usage_percent_count;

						row9.cpu_usage_percent = (short) row9_cpu_usage_percent_temp;

					} else {
						String count = "0";

						row9.cpu_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row9.max_cpu_usage = aggregated_row_tAggregateRow_4.max_cpu_usage_max;
					if (aggregated_row_tAggregateRow_4.memory_usage_percent_count > 0) {

						double row9_memory_usage_percent_temp = (double) aggregated_row_tAggregateRow_4.memory_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_4.memory_usage_percent_count;

						row9.memory_usage_percent = (short) row9_memory_usage_percent_temp;

					} else {
						String count = "0";

						row9.memory_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row9.max_memory_usage = aggregated_row_tAggregateRow_4.max_memory_usage_max;
					if (aggregated_row_tAggregateRow_4.user_cpu_usage_percent_count > 0) {

						double row9_user_cpu_usage_percent_temp = (double) aggregated_row_tAggregateRow_4.user_cpu_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_4.user_cpu_usage_percent_count;

						row9.user_cpu_usage_percent = (short) row9_user_cpu_usage_percent_temp;

					} else {
						String count = "0";

						row9.user_cpu_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row9.max_user_cpu_usage_percent = aggregated_row_tAggregateRow_4.max_user_cpu_usage_percent_max;
					if (aggregated_row_tAggregateRow_4.system_cpu_usage_percent_count > 0) {

						double row9_system_cpu_usage_percent_temp = (double) aggregated_row_tAggregateRow_4.system_cpu_usage_percent_sum
								/ (double) aggregated_row_tAggregateRow_4.system_cpu_usage_percent_count;

						row9.system_cpu_usage_percent = (short) row9_system_cpu_usage_percent_temp;

					} else {
						String count = "0";

						row9.system_cpu_usage_percent = ParserUtils
								.parseTo_Short(count);

					}
					row9.max_system_cpu_usage_percent = aggregated_row_tAggregateRow_4.max_system_cpu_usage_percent_max;
					row9.vm_last_up_time = aggregated_row_tAggregateRow_4.vm_last_up_time_last;
					row9.vm_last_boot_time = aggregated_row_tAggregateRow_4.vm_last_boot_time_last;
					row9.vm_ip = aggregated_row_tAggregateRow_4.vm_ip_last;
					row9.current_user_name = aggregated_row_tAggregateRow_4.current_user_name_last;
					row9.currently_running_on_host = aggregated_row_tAggregateRow_4.currently_running_on_host_last;
					row9.vm_configuration_version = aggregated_row_tAggregateRow_4.vm_configuration_version_last;
					row9.current_host_configuration_version = aggregated_row_tAggregateRow_4.current_host_configuration_version_last;

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_4 main ] start
					 */

					currentComponent = "tJDBCOutput_4";

					whetherReject_tJDBCOutput_4 = false;
					if (row9.history_datetime != null) {
						pstmt_tJDBCOutput_4.setTimestamp(1,
								new java.sql.Timestamp(row9.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_4.setNull(1, java.sql.Types.DATE);
					}

					if (row9.vm_id == null) {
						pstmt_tJDBCOutput_4.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_4.setObject(2, row9.vm_id);
					}

					pstmt_tJDBCOutput_4.setShort(3, row9.vm_status);

					pstmt_tJDBCOutput_4.setDouble(4, row9.minutes_in_status);

					if (row9.cpu_usage_percent == null) {
						pstmt_tJDBCOutput_4.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(5, row9.cpu_usage_percent);
					}

					if (row9.max_cpu_usage == null) {
						pstmt_tJDBCOutput_4.setNull(6, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(6, row9.max_cpu_usage);
					}

					if (row9.memory_usage_percent == null) {
						pstmt_tJDBCOutput_4.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(7,
								row9.memory_usage_percent);
					}

					if (row9.max_memory_usage == null) {
						pstmt_tJDBCOutput_4.setNull(8, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(8, row9.max_memory_usage);
					}

					if (row9.user_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_4.setNull(9, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(9,
								row9.user_cpu_usage_percent);
					}

					if (row9.max_user_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_4.setNull(10, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(10,
								row9.max_user_cpu_usage_percent);
					}

					if (row9.system_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_4.setNull(11, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(11,
								row9.system_cpu_usage_percent);
					}

					if (row9.max_system_cpu_usage_percent == null) {
						pstmt_tJDBCOutput_4.setNull(12, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setShort(12,
								row9.max_system_cpu_usage_percent);
					}

					if (row9.vm_last_up_time != null) {
						pstmt_tJDBCOutput_4.setTimestamp(13,
								new java.sql.Timestamp(row9.vm_last_up_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_4.setNull(13, java.sql.Types.DATE);
					}

					if (row9.vm_last_boot_time != null) {
						pstmt_tJDBCOutput_4.setTimestamp(14,
								new java.sql.Timestamp(row9.vm_last_boot_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_4.setNull(14, java.sql.Types.DATE);
					}

					if (row9.vm_ip == null) {
						pstmt_tJDBCOutput_4.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(15, row9.vm_ip);
					}

					if (row9.current_user_name == null) {
						pstmt_tJDBCOutput_4.setNull(16, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(16,
								row9.current_user_name);
					}

					if (row9.currently_running_on_host == null) {
						pstmt_tJDBCOutput_4.setNull(17, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_4.setObject(17,
								row9.currently_running_on_host);
					}

					if (row9.vm_configuration_version == null) {
						pstmt_tJDBCOutput_4.setNull(18, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setInt(18,
								row9.vm_configuration_version);
					}

					if (row9.current_host_configuration_version == null) {
						pstmt_tJDBCOutput_4.setNull(19, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setInt(19,
								row9.current_host_configuration_version);
					}

					try {
						insertedCount_tJDBCOutput_4 = insertedCount_tJDBCOutput_4
								+ pstmt_tJDBCOutput_4.executeUpdate();
						nb_line_tJDBCOutput_4++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_4 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_4++;

					/**
					 * [tJDBCOutput_4 main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_4 end ] start
				 */

				currentComponent = "tJDBCOutput_4";

				if (pstmt_tJDBCOutput_4 != null) {

					pstmt_tJDBCOutput_4.close();

				}

				nb_line_deleted_tJDBCOutput_4 = nb_line_deleted_tJDBCOutput_4
						+ deletedCount_tJDBCOutput_4;
				nb_line_update_tJDBCOutput_4 = nb_line_update_tJDBCOutput_4
						+ updatedCount_tJDBCOutput_4;
				nb_line_inserted_tJDBCOutput_4 = nb_line_inserted_tJDBCOutput_4
						+ insertedCount_tJDBCOutput_4;
				nb_line_rejected_tJDBCOutput_4 = nb_line_rejected_tJDBCOutput_4
						+ rejectedCount_tJDBCOutput_4;

				globalMap.put("tJDBCOutput_4_NB_LINE", nb_line_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_4);

				ok_Hash.put("tJDBCOutput_4", true);
				end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.put("tAggregateRow_4", null);

		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short max_receive_rate_percent;

		public Short getMax_receive_rate_percent() {
			return this.max_receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Short max_transmit_rate_percent;

		public Short getMax_transmit_rate_percent() {
			return this.max_transmit_rate_percent;
		}

		public Integer vm_interface_configuration_version;

		public Integer getVm_interface_configuration_version() {
			return this.vm_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_receive_rate_percent = null;
					} else {
						this.max_receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_transmit_rate_percent = null;
					} else {
						this.max_transmit_rate_percent = dis.readShort();
					}

					this.vm_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.max_receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Short

				if (this.max_transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_transmit_rate_percent);
				}

				// Integer

				writeInteger(this.vm_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",max_receive_rate_percent="
					+ String.valueOf(max_receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",max_transmit_rate_percent="
					+ String.valueOf(max_transmit_rate_percent));
			sb.append(",vm_interface_configuration_version="
					+ String.valueOf(vm_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short max_receive_rate_percent;

		public Short getMax_receive_rate_percent() {
			return this.max_receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Short max_transmit_rate_percent;

		public Short getMax_transmit_rate_percent() {
			return this.max_transmit_rate_percent;
		}

		public Integer vm_interface_configuration_version;

		public Integer getVm_interface_configuration_version() {
			return this.vm_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_receive_rate_percent = null;
					} else {
						this.max_receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_transmit_rate_percent = null;
					} else {
						this.max_transmit_rate_percent = dis.readShort();
					}

					this.vm_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.max_receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Short

				if (this.max_transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.max_transmit_rate_percent);
				}

				// Integer

				writeInteger(this.vm_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",max_receive_rate_percent="
					+ String.valueOf(max_receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",max_transmit_rate_percent="
					+ String.valueOf(max_transmit_rate_percent));
			sb.append(",vm_interface_configuration_version="
					+ String.valueOf(vm_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class vm_interface_aggregateStruct implements
			routines.system.IPersistableRow<vm_interface_aggregateStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Integer vm_interface_configuration_version;

		public Integer getVm_interface_configuration_version() {
			return this.vm_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					this.vm_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Integer

				writeInteger(this.vm_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",vm_interface_configuration_version="
					+ String.valueOf(vm_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_interface_aggregateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int history_id;

		public int getHistory_id() {
			return this.history_id;
		}

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public Short receive_rate_percent;

		public Short getReceive_rate_percent() {
			return this.receive_rate_percent;
		}

		public Short transmit_rate_percent;

		public Short getTransmit_rate_percent() {
			return this.transmit_rate_percent;
		}

		public Integer vm_interface_configuration_version;

		public Integer getVm_interface_configuration_version() {
			return this.vm_interface_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_id = dis.readInt();

					this.history_datetime = readDate(dis);

					this.vm_interface_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.receive_rate_percent = null;
					} else {
						this.receive_rate_percent = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.transmit_rate_percent = null;
					} else {
						this.transmit_rate_percent = dis.readShort();
					}

					this.vm_interface_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.history_id);

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_interface_id);

				// Short

				if (this.receive_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.receive_rate_percent);
				}

				// Short

				if (this.transmit_rate_percent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.transmit_rate_percent);
				}

				// Integer

				writeInteger(this.vm_interface_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",receive_rate_percent="
					+ String.valueOf(receive_rate_percent));
			sb.append(",transmit_rate_percent="
					+ String.valueOf(transmit_rate_percent));
			sb.append(",vm_interface_configuration_version="
					+ String.valueOf(vm_interface_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				vm_interface_aggregateStruct vm_interface_aggregate = new vm_interface_aggregateStruct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_5_AGGOUT";

				int tos_count_tAggregateRow_5_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object vm_interface_id;
					Short receive_rate_percent_sum;
					int receive_rate_percent_count = 0;

					Short max_receive_rate_percent_max;
					Short transmit_rate_percent_sum;
					int transmit_rate_percent_count = 0;

					Short max_transmit_rate_percent_max;
					Integer vm_interface_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.vm_interface_id == null) ? 0
											: this.vm_interface_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.vm_interface_id == null) {
							if (other.vm_interface_id != null)
								return false;
						} else if (!this.vm_interface_id
								.equals(other.vm_interface_id))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());
				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_interface_aggregateStruct vm_interface_aggregate_tmp = new vm_interface_aggregateStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tJDBCInput_5 begin ] start
				 */

				ok_Hash.put("tJDBCInput_5", false);
				start_Hash.put("tJDBCInput_5", System.currentTimeMillis());
				currentComponent = "tJDBCInput_5";

				int tos_count_tJDBCInput_5 = 0;

				int nb_line_tJDBCInput_5 = 0;
				java.sql.Connection conn_tJDBCInput_5 = null;
				conn_tJDBCInput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_5 = conn_tJDBCInput_5
						.createStatement();

				String dbquery_tJDBCInput_5 = "SELECT     history_id,     history_datetime,     vm_interface_id,     receive_rate_percent,     transmit_rate_percent,     vm_interface_configuration_version  FROM vm_interface_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,  		 vm_interface_id";

				globalMap.put("tJDBCInput_5_QUERY", dbquery_tJDBCInput_5);

				java.sql.ResultSet rs_tJDBCInput_5 = stmt_tJDBCInput_5
						.executeQuery(dbquery_tJDBCInput_5);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_5 = rs_tJDBCInput_5
						.getMetaData();
				int colQtyInRs_tJDBCInput_5 = rsmd_tJDBCInput_5
						.getColumnCount();

				String tmpContent_tJDBCInput_5 = null;
				while (rs_tJDBCInput_5.next()) {
					nb_line_tJDBCInput_5++;

					if (colQtyInRs_tJDBCInput_5 < 1) {
						row5.history_id = 0;
					} else {

						if (rs_tJDBCInput_5.getObject(1) != null) {
							row5.history_id = rs_tJDBCInput_5.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_5 < 2) {
						row5.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_5 = null;
						try {
							date_tJDBCInput_5 = rs_tJDBCInput_5.getTimestamp(2);
						} catch (Exception e) {
							date_tJDBCInput_5 = rs_tJDBCInput_5.getDate(2);
						}
						row5.history_datetime = date_tJDBCInput_5;

					}
					if (colQtyInRs_tJDBCInput_5 < 3) {
						row5.vm_interface_id = null;
					} else {

						if (rs_tJDBCInput_5.getObject(3) != null) {
							row5.vm_interface_id = rs_tJDBCInput_5.getObject(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_5 < 4) {
						row5.receive_rate_percent = null;
					} else {

						if (rs_tJDBCInput_5.getObject(4) != null) {
							row5.receive_rate_percent = rs_tJDBCInput_5
									.getShort(4);
						} else {
							row5.receive_rate_percent = null;
						}

						if (rs_tJDBCInput_5.wasNull()) {
							row5.receive_rate_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_5 < 5) {
						row5.transmit_rate_percent = null;
					} else {

						if (rs_tJDBCInput_5.getObject(5) != null) {
							row5.transmit_rate_percent = rs_tJDBCInput_5
									.getShort(5);
						} else {
							row5.transmit_rate_percent = null;
						}

						if (rs_tJDBCInput_5.wasNull()) {
							row5.transmit_rate_percent = null;
						}
					}
					if (colQtyInRs_tJDBCInput_5 < 6) {
						row5.vm_interface_configuration_version = null;
					} else {

						if (rs_tJDBCInput_5.getObject(6) != null) {
							row5.vm_interface_configuration_version = rs_tJDBCInput_5
									.getInt(6);
						} else {
							row5.vm_interface_configuration_version = null;
						}

						if (rs_tJDBCInput_5.wasNull()) {
							row5.vm_interface_configuration_version = null;
						}
					}

					/**
					 * [tJDBCInput_5 begin ] stop
					 */
					/**
					 * [tJDBCInput_5 main ] start
					 */

					currentComponent = "tJDBCInput_5";

					tos_count_tJDBCInput_5++;

					/**
					 * [tJDBCInput_5 main ] stop
					 */

					/**
					 * [tMap_5 main ] start
					 */

					currentComponent = "tMap_5";

					boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_5 = false;
					boolean mainRowRejected_tMap_5 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row5.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row5'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							vm_interface_aggregate = null;

							// # Output table : 'vm_interface_aggregate'
							vm_interface_aggregate_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row5.history_datetime);
							vm_interface_aggregate_tmp.vm_interface_id = row5.vm_interface_id;
							vm_interface_aggregate_tmp.receive_rate_percent = row5.receive_rate_percent;
							vm_interface_aggregate_tmp.transmit_rate_percent = row5.transmit_rate_percent;
							vm_interface_aggregate_tmp.vm_interface_configuration_version = row5.vm_interface_configuration_version;
							vm_interface_aggregate = vm_interface_aggregate_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "vm_interface_aggregate"
						if (vm_interface_aggregate != null) {

							/**
							 * [tAggregateRow_5_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_5_AGGOUT";

							operation_finder_tAggregateRow_5.history_datetime = vm_interface_aggregate.history_datetime;
							operation_finder_tAggregateRow_5.vm_interface_id = vm_interface_aggregate.vm_interface_id;

							operation_finder_tAggregateRow_5.hashCodeDirty = true;

							operation_result_tAggregateRow_5 = hash_tAggregateRow_5
									.get(operation_finder_tAggregateRow_5);

							boolean isFirstAdd_tAggregateRow_5 = false;

							if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

								operation_result_tAggregateRow_5.history_datetime = operation_finder_tAggregateRow_5.history_datetime;
								operation_result_tAggregateRow_5.vm_interface_id = operation_finder_tAggregateRow_5.vm_interface_id;

								isFirstAdd_tAggregateRow_5 = true;

								hash_tAggregateRow_5.put(
										operation_result_tAggregateRow_5,
										operation_result_tAggregateRow_5);

							} // G_OutMain_AggR_001

							if (vm_interface_aggregate.receive_rate_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_5.receive_rate_percent_count++;

								if (operation_result_tAggregateRow_5.receive_rate_percent_sum == null) {
									operation_result_tAggregateRow_5.receive_rate_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_5.receive_rate_percent_sum = (short) (operation_result_tAggregateRow_5.receive_rate_percent_sum
										.shortValue() + vm_interface_aggregate.receive_rate_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (vm_interface_aggregate.receive_rate_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_5.max_receive_rate_percent_max == null
										|| vm_interface_aggregate.receive_rate_percent > operation_result_tAggregateRow_5.max_receive_rate_percent_max

								) {
									operation_result_tAggregateRow_5.max_receive_rate_percent_max = vm_interface_aggregate.receive_rate_percent;
								}

							} // G_OutMain_AggR_546

							if (vm_interface_aggregate.transmit_rate_percent != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_5.transmit_rate_percent_count++;

								if (operation_result_tAggregateRow_5.transmit_rate_percent_sum == null) {
									operation_result_tAggregateRow_5.transmit_rate_percent_sum = (short) 0;
								}
								operation_result_tAggregateRow_5.transmit_rate_percent_sum = (short) (operation_result_tAggregateRow_5.transmit_rate_percent_sum
										.shortValue() + vm_interface_aggregate.transmit_rate_percent
										.shortValue());

							} // G_OutMain_AggR_546

							if (vm_interface_aggregate.transmit_rate_percent != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_5.max_transmit_rate_percent_max == null
										|| vm_interface_aggregate.transmit_rate_percent > operation_result_tAggregateRow_5.max_transmit_rate_percent_max

								) {
									operation_result_tAggregateRow_5.max_transmit_rate_percent_max = vm_interface_aggregate.transmit_rate_percent;
								}

							} // G_OutMain_AggR_546

							if (vm_interface_aggregate.vm_interface_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_5.vm_interface_configuration_version_last = vm_interface_aggregate.vm_interface_configuration_version;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_5_AGGOUT++;

							/**
							 * [tAggregateRow_5_AGGOUT main ] stop
							 */

						} // End of branch "vm_interface_aggregate"

					} // G_TM_M_280 close main tMap filter for table 'row5'

					/**
					 * [tJDBCInput_5 end ] start
					 */

					currentComponent = "tJDBCInput_5";

				}
				stmt_tJDBCInput_5.close();

				globalMap.put("tJDBCInput_5_NB_LINE", nb_line_tJDBCInput_5);

				ok_Hash.put("tJDBCInput_5", true);
				end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				/**
				 * [tJDBCInput_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_5_AGGOUT";

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_5 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_5", false);
				start_Hash.put("tJDBCOutput_5", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_5";

				int tos_count_tJDBCOutput_5 = 0;

				int nb_line_tJDBCOutput_5 = 0;
				int nb_line_update_tJDBCOutput_5 = 0;
				int nb_line_inserted_tJDBCOutput_5 = 0;
				int nb_line_deleted_tJDBCOutput_5 = 0;
				int nb_line_rejected_tJDBCOutput_5 = 0;

				int deletedCount_tJDBCOutput_5 = 0;
				int updatedCount_tJDBCOutput_5 = 0;
				int insertedCount_tJDBCOutput_5 = 0;
				int rejectedCount_tJDBCOutput_5 = 0;

				boolean whetherReject_tJDBCOutput_5 = false;

				java.sql.Connection connection_tJDBCOutput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_5 = 10000;
				int batchSizeCounter_tJDBCOutput_5 = 0;

				String insert_tJDBCOutput_5 = "INSERT INTO "
						+ "vm_interface_hourly_history"
						+ " (history_datetime,vm_interface_id,receive_rate_percent,max_receive_rate_percent,transmit_rate_percent,max_transmit_rate_percent,vm_interface_configuration_version) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_5 = connection_tJDBCOutput_5
						.prepareStatement(insert_tJDBCOutput_5);

				/**
				 * [tJDBCOutput_5 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5
						.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_5_AGGIN";

					row10.history_datetime = aggregated_row_tAggregateRow_5.history_datetime;

					row10.vm_interface_id = aggregated_row_tAggregateRow_5.vm_interface_id;

					if (aggregated_row_tAggregateRow_5.receive_rate_percent_count > 0) {

						double row10_receive_rate_percent_temp = (double) aggregated_row_tAggregateRow_5.receive_rate_percent_sum
								/ (double) aggregated_row_tAggregateRow_5.receive_rate_percent_count;

						row10.receive_rate_percent = (short) row10_receive_rate_percent_temp;

					} else {
						String count = "0";

						row10.receive_rate_percent = ParserUtils
								.parseTo_Short(count);

					}
					row10.max_receive_rate_percent = aggregated_row_tAggregateRow_5.max_receive_rate_percent_max;
					if (aggregated_row_tAggregateRow_5.transmit_rate_percent_count > 0) {

						double row10_transmit_rate_percent_temp = (double) aggregated_row_tAggregateRow_5.transmit_rate_percent_sum
								/ (double) aggregated_row_tAggregateRow_5.transmit_rate_percent_count;

						row10.transmit_rate_percent = (short) row10_transmit_rate_percent_temp;

					} else {
						String count = "0";

						row10.transmit_rate_percent = ParserUtils
								.parseTo_Short(count);

					}
					row10.max_transmit_rate_percent = aggregated_row_tAggregateRow_5.max_transmit_rate_percent_max;
					row10.vm_interface_configuration_version = aggregated_row_tAggregateRow_5.vm_interface_configuration_version_last;

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_5 main ] start
					 */

					currentComponent = "tJDBCOutput_5";

					whetherReject_tJDBCOutput_5 = false;
					if (row10.history_datetime != null) {
						pstmt_tJDBCOutput_5.setTimestamp(1,
								new java.sql.Timestamp(row10.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_5.setNull(1, java.sql.Types.DATE);
					}

					if (row10.vm_interface_id == null) {
						pstmt_tJDBCOutput_5.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_5.setObject(2, row10.vm_interface_id);
					}

					if (row10.receive_rate_percent == null) {
						pstmt_tJDBCOutput_5.setNull(3, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_5.setShort(3,
								row10.receive_rate_percent);
					}

					if (row10.max_receive_rate_percent == null) {
						pstmt_tJDBCOutput_5.setNull(4, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_5.setShort(4,
								row10.max_receive_rate_percent);
					}

					if (row10.transmit_rate_percent == null) {
						pstmt_tJDBCOutput_5.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_5.setShort(5,
								row10.transmit_rate_percent);
					}

					if (row10.max_transmit_rate_percent == null) {
						pstmt_tJDBCOutput_5.setNull(6, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_5.setShort(6,
								row10.max_transmit_rate_percent);
					}

					if (row10.vm_interface_configuration_version == null) {
						pstmt_tJDBCOutput_5.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_5.setInt(7,
								row10.vm_interface_configuration_version);
					}

					try {
						insertedCount_tJDBCOutput_5 = insertedCount_tJDBCOutput_5
								+ pstmt_tJDBCOutput_5.executeUpdate();
						nb_line_tJDBCOutput_5++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_5 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_5++;

					/**
					 * [tJDBCOutput_5 main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_5 end ] start
				 */

				currentComponent = "tJDBCOutput_5";

				if (pstmt_tJDBCOutput_5 != null) {

					pstmt_tJDBCOutput_5.close();

				}

				nb_line_deleted_tJDBCOutput_5 = nb_line_deleted_tJDBCOutput_5
						+ deletedCount_tJDBCOutput_5;
				nb_line_update_tJDBCOutput_5 = nb_line_update_tJDBCOutput_5
						+ updatedCount_tJDBCOutput_5;
				nb_line_inserted_tJDBCOutput_5 = nb_line_inserted_tJDBCOutput_5
						+ insertedCount_tJDBCOutput_5;
				nb_line_rejected_tJDBCOutput_5 = nb_line_rejected_tJDBCOutput_5
						+ rejectedCount_tJDBCOutput_5;

				globalMap.put("tJDBCOutput_5_NB_LINE", nb_line_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_5);

				ok_Hash.put("tJDBCOutput_5", true);
				end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_5 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.put("tAggregateRow_5", null);

		}

		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer available_disk_size_gb;

		public Integer getAvailable_disk_size_gb() {
			return this.available_disk_size_gb;
		}

		public Integer used_disk_size_gb;

		public Integer getUsed_disk_size_gb() {
			return this.used_disk_size_gb;
		}

		public Integer storage_configuration_version;

		public Integer getStorage_configuration_version() {
			return this.storage_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.storage_domain_id = (Object) dis.readObject();

					this.available_disk_size_gb = readInteger(dis);

					this.used_disk_size_gb = readInteger(dis);

					this.storage_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.available_disk_size_gb, dos);

				// Integer

				writeInteger(this.used_disk_size_gb, dos);

				// Integer

				writeInteger(this.storage_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",available_disk_size_gb="
					+ String.valueOf(available_disk_size_gb));
			sb.append(",used_disk_size_gb=" + String.valueOf(used_disk_size_gb));
			sb.append(",storage_configuration_version="
					+ String.valueOf(storage_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_6 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer available_disk_size_gb;

		public Integer getAvailable_disk_size_gb() {
			return this.available_disk_size_gb;
		}

		public Integer used_disk_size_gb;

		public Integer getUsed_disk_size_gb() {
			return this.used_disk_size_gb;
		}

		public Integer storage_configuration_version;

		public Integer getStorage_configuration_version() {
			return this.storage_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.storage_domain_id = (Object) dis.readObject();

					this.available_disk_size_gb = readInteger(dis);

					this.used_disk_size_gb = readInteger(dis);

					this.storage_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.available_disk_size_gb, dos);

				// Integer

				writeInteger(this.used_disk_size_gb, dos);

				// Integer

				writeInteger(this.storage_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",available_disk_size_gb="
					+ String.valueOf(available_disk_size_gb));
			sb.append(",used_disk_size_gb=" + String.valueOf(used_disk_size_gb));
			sb.append(",storage_configuration_version="
					+ String.valueOf(storage_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class storage_aggregateStruct implements
			routines.system.IPersistableRow<storage_aggregateStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer available_disk_size_gb;

		public Integer getAvailable_disk_size_gb() {
			return this.available_disk_size_gb;
		}

		public Integer used_disk_size_gb;

		public Integer getUsed_disk_size_gb() {
			return this.used_disk_size_gb;
		}

		public Integer storage_configuration_version;

		public Integer getStorage_configuration_version() {
			return this.storage_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.storage_domain_id = (Object) dis.readObject();

					this.available_disk_size_gb = readInteger(dis);

					this.used_disk_size_gb = readInteger(dis);

					this.storage_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.available_disk_size_gb, dos);

				// Integer

				writeInteger(this.used_disk_size_gb, dos);

				// Integer

				writeInteger(this.storage_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",available_disk_size_gb="
					+ String.valueOf(available_disk_size_gb));
			sb.append(",used_disk_size_gb=" + String.valueOf(used_disk_size_gb));
			sb.append(",storage_configuration_version="
					+ String.valueOf(storage_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(storage_aggregateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public int history_id;

		public int getHistory_id() {
			return this.history_id;
		}

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer available_disk_size_gb;

		public Integer getAvailable_disk_size_gb() {
			return this.available_disk_size_gb;
		}

		public Integer used_disk_size_gb;

		public Integer getUsed_disk_size_gb() {
			return this.used_disk_size_gb;
		}

		public Integer storage_configuration_version;

		public Integer getStorage_configuration_version() {
			return this.storage_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_id = dis.readInt();

					this.history_datetime = readDate(dis);

					this.storage_domain_id = (Object) dis.readObject();

					this.available_disk_size_gb = readInteger(dis);

					this.used_disk_size_gb = readInteger(dis);

					this.storage_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.history_id);

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.available_disk_size_gb, dos);

				// Integer

				writeInteger(this.used_disk_size_gb, dos);

				// Integer

				writeInteger(this.storage_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",history_datetime=" + String.valueOf(history_datetime));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",available_disk_size_gb="
					+ String.valueOf(available_disk_size_gb));
			sb.append(",used_disk_size_gb=" + String.valueOf(used_disk_size_gb));
			sb.append(",storage_configuration_version="
					+ String.valueOf(storage_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();
				storage_aggregateStruct storage_aggregate = new storage_aggregateStruct();
				row17Struct row17 = new row17Struct();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGOUT", false);
				start_Hash.put("tAggregateRow_6_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_6_AGGOUT";

				int tos_count_tAggregateRow_6_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

				class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object storage_domain_id;
					Integer available_disk_size_gb_sum;
					int available_disk_size_gb_count = 0;

					Integer used_disk_size_gb_sum;
					int used_disk_size_gb_count = 0;

					Integer storage_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.storage_domain_id == null) ? 0
											: this.storage_domain_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.storage_domain_id == null) {
							if (other.storage_domain_id != null)
								return false;
						} else if (!this.storage_domain_id
								.equals(other.storage_domain_id))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
				AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
				java.util.Map<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6, AggOperationStruct_tAggregateRow_6>();

				/**
				 * [tAggregateRow_6_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());
				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				storage_aggregateStruct storage_aggregate_tmp = new storage_aggregateStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tJDBCInput_11 begin ] start
				 */

				ok_Hash.put("tJDBCInput_11", false);
				start_Hash.put("tJDBCInput_11", System.currentTimeMillis());
				currentComponent = "tJDBCInput_11";

				int tos_count_tJDBCInput_11 = 0;

				int nb_line_tJDBCInput_11 = 0;
				java.sql.Connection conn_tJDBCInput_11 = null;
				conn_tJDBCInput_11 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_11 = conn_tJDBCInput_11
						.createStatement();

				String dbquery_tJDBCInput_11 = "SELECT     history_id,   history_datetime,    storage_domain_id,    available_disk_size_gb,    used_disk_size_gb,    storage_configuration_version FROM storage_domain_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,        	 storage_domain_id";

				globalMap.put("tJDBCInput_11_QUERY", dbquery_tJDBCInput_11);

				java.sql.ResultSet rs_tJDBCInput_11 = stmt_tJDBCInput_11
						.executeQuery(dbquery_tJDBCInput_11);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_11 = rs_tJDBCInput_11
						.getMetaData();
				int colQtyInRs_tJDBCInput_11 = rsmd_tJDBCInput_11
						.getColumnCount();

				String tmpContent_tJDBCInput_11 = null;
				while (rs_tJDBCInput_11.next()) {
					nb_line_tJDBCInput_11++;

					if (colQtyInRs_tJDBCInput_11 < 1) {
						row16.history_id = 0;
					} else {

						if (rs_tJDBCInput_11.getObject(1) != null) {
							row16.history_id = rs_tJDBCInput_11.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_11 < 2) {
						row16.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_11 = null;
						try {
							date_tJDBCInput_11 = rs_tJDBCInput_11
									.getTimestamp(2);
						} catch (Exception e) {
							date_tJDBCInput_11 = rs_tJDBCInput_11.getDate(2);
						}
						row16.history_datetime = date_tJDBCInput_11;

					}
					if (colQtyInRs_tJDBCInput_11 < 3) {
						row16.storage_domain_id = null;
					} else {

						if (rs_tJDBCInput_11.getObject(3) != null) {
							row16.storage_domain_id = rs_tJDBCInput_11
									.getObject(3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_11 < 4) {
						row16.available_disk_size_gb = null;
					} else {

						if (rs_tJDBCInput_11.getObject(4) != null) {
							row16.available_disk_size_gb = rs_tJDBCInput_11
									.getInt(4);
						} else {
							row16.available_disk_size_gb = null;
						}

						if (rs_tJDBCInput_11.wasNull()) {
							row16.available_disk_size_gb = null;
						}
					}
					if (colQtyInRs_tJDBCInput_11 < 5) {
						row16.used_disk_size_gb = null;
					} else {

						if (rs_tJDBCInput_11.getObject(5) != null) {
							row16.used_disk_size_gb = rs_tJDBCInput_11
									.getInt(5);
						} else {
							row16.used_disk_size_gb = null;
						}

						if (rs_tJDBCInput_11.wasNull()) {
							row16.used_disk_size_gb = null;
						}
					}
					if (colQtyInRs_tJDBCInput_11 < 6) {
						row16.storage_configuration_version = null;
					} else {

						if (rs_tJDBCInput_11.getObject(6) != null) {
							row16.storage_configuration_version = rs_tJDBCInput_11
									.getInt(6);
						} else {
							row16.storage_configuration_version = null;
						}

						if (rs_tJDBCInput_11.wasNull()) {
							row16.storage_configuration_version = null;
						}
					}

					/**
					 * [tJDBCInput_11 begin ] stop
					 */
					/**
					 * [tJDBCInput_11 main ] start
					 */

					currentComponent = "tJDBCInput_11";

					tos_count_tJDBCInput_11++;

					/**
					 * [tJDBCInput_11 main ] stop
					 */

					/**
					 * [tMap_11 main ] start
					 */

					currentComponent = "tMap_11";

					boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_11 = false;
					boolean mainRowRejected_tMap_11 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row16.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row16'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							storage_aggregate = null;

							// # Output table : 'storage_aggregate'
							storage_aggregate_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row16.history_datetime);
							storage_aggregate_tmp.storage_domain_id = row16.storage_domain_id;
							storage_aggregate_tmp.available_disk_size_gb = row16.available_disk_size_gb;
							storage_aggregate_tmp.used_disk_size_gb = row16.used_disk_size_gb;
							storage_aggregate_tmp.storage_configuration_version = row16.storage_configuration_version;
							storage_aggregate = storage_aggregate_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_11 = false;

						tos_count_tMap_11++;

						/**
						 * [tMap_11 main ] stop
						 */
						// Start of branch "storage_aggregate"
						if (storage_aggregate != null) {

							/**
							 * [tAggregateRow_6_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_6_AGGOUT";

							operation_finder_tAggregateRow_6.history_datetime = storage_aggregate.history_datetime;
							operation_finder_tAggregateRow_6.storage_domain_id = storage_aggregate.storage_domain_id;

							operation_finder_tAggregateRow_6.hashCodeDirty = true;

							operation_result_tAggregateRow_6 = hash_tAggregateRow_6
									.get(operation_finder_tAggregateRow_6);

							boolean isFirstAdd_tAggregateRow_6 = false;

							if (operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

								operation_result_tAggregateRow_6.history_datetime = operation_finder_tAggregateRow_6.history_datetime;
								operation_result_tAggregateRow_6.storage_domain_id = operation_finder_tAggregateRow_6.storage_domain_id;

								isFirstAdd_tAggregateRow_6 = true;

								hash_tAggregateRow_6.put(
										operation_result_tAggregateRow_6,
										operation_result_tAggregateRow_6);

							} // G_OutMain_AggR_001

							if (storage_aggregate.available_disk_size_gb != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_6.available_disk_size_gb_count++;

								if (operation_result_tAggregateRow_6.available_disk_size_gb_sum == null) {
									operation_result_tAggregateRow_6.available_disk_size_gb_sum = (int) 0;
								}

								if (storage_aggregate.available_disk_size_gb != null)
									operation_result_tAggregateRow_6.available_disk_size_gb_sum += storage_aggregate.available_disk_size_gb;
							} // G_OutMain_AggR_546

							if (storage_aggregate.used_disk_size_gb != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_6.used_disk_size_gb_count++;

								if (operation_result_tAggregateRow_6.used_disk_size_gb_sum == null) {
									operation_result_tAggregateRow_6.used_disk_size_gb_sum = (int) 0;
								}

								if (storage_aggregate.used_disk_size_gb != null)
									operation_result_tAggregateRow_6.used_disk_size_gb_sum += storage_aggregate.used_disk_size_gb;
							} // G_OutMain_AggR_546

							if (storage_aggregate.storage_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_6.storage_configuration_version_last = storage_aggregate.storage_configuration_version;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_6_AGGOUT++;

							/**
							 * [tAggregateRow_6_AGGOUT main ] stop
							 */

						} // End of branch "storage_aggregate"

					} // G_TM_M_280 close main tMap filter for table 'row16'

					/**
					 * [tJDBCInput_11 end ] start
					 */

					currentComponent = "tJDBCInput_11";

				}
				stmt_tJDBCInput_11.close();

				globalMap.put("tJDBCInput_11_NB_LINE", nb_line_tJDBCInput_11);

				ok_Hash.put("tJDBCInput_11", true);
				end_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				/**
				 * [tJDBCInput_11 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_6_AGGOUT";

				ok_Hash.put("tAggregateRow_6_AGGOUT", true);
				end_Hash.put("tAggregateRow_6_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_11 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_11", false);
				start_Hash.put("tJDBCOutput_11", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_11";

				int tos_count_tJDBCOutput_11 = 0;

				int nb_line_tJDBCOutput_11 = 0;
				int nb_line_update_tJDBCOutput_11 = 0;
				int nb_line_inserted_tJDBCOutput_11 = 0;
				int nb_line_deleted_tJDBCOutput_11 = 0;
				int nb_line_rejected_tJDBCOutput_11 = 0;

				int deletedCount_tJDBCOutput_11 = 0;
				int updatedCount_tJDBCOutput_11 = 0;
				int insertedCount_tJDBCOutput_11 = 0;
				int rejectedCount_tJDBCOutput_11 = 0;

				boolean whetherReject_tJDBCOutput_11 = false;

				java.sql.Connection connection_tJDBCOutput_11 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_11 = 10000;
				int batchSizeCounter_tJDBCOutput_11 = 0;

				String insert_tJDBCOutput_11 = "INSERT INTO "
						+ "storage_domain_hourly_history"
						+ " (history_datetime,storage_domain_id,available_disk_size_gb,used_disk_size_gb,storage_configuration_version) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_11 = connection_tJDBCOutput_11
						.prepareStatement(insert_tJDBCOutput_11);

				/**
				 * [tJDBCOutput_11 begin ] stop
				 */

				/**
				 * [tAggregateRow_6_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_6_AGGIN", false);
				start_Hash.put("tAggregateRow_6_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_6_AGGIN";

				int tos_count_tAggregateRow_6_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6
						.values();

				globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6
						.size());

				for (AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600

					/**
					 * [tAggregateRow_6_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_6_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_6_AGGIN";

					row17.history_datetime = aggregated_row_tAggregateRow_6.history_datetime;

					row17.storage_domain_id = aggregated_row_tAggregateRow_6.storage_domain_id;

					if (aggregated_row_tAggregateRow_6.available_disk_size_gb_count > 0) {

						double row17_available_disk_size_gb_temp = (double) aggregated_row_tAggregateRow_6.available_disk_size_gb_sum
								/ (double) aggregated_row_tAggregateRow_6.available_disk_size_gb_count;

						row17.available_disk_size_gb = (int) row17_available_disk_size_gb_temp;

					} else {
						String count = "0";

						row17.available_disk_size_gb = ParserUtils
								.parseTo_Integer(count);

					}
					if (aggregated_row_tAggregateRow_6.used_disk_size_gb_count > 0) {

						double row17_used_disk_size_gb_temp = (double) aggregated_row_tAggregateRow_6.used_disk_size_gb_sum
								/ (double) aggregated_row_tAggregateRow_6.used_disk_size_gb_count;

						row17.used_disk_size_gb = (int) row17_used_disk_size_gb_temp;

					} else {
						String count = "0";

						row17.used_disk_size_gb = ParserUtils
								.parseTo_Integer(count);

					}
					row17.storage_configuration_version = aggregated_row_tAggregateRow_6.storage_configuration_version_last;

					tos_count_tAggregateRow_6_AGGIN++;

					/**
					 * [tAggregateRow_6_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_11 main ] start
					 */

					currentComponent = "tJDBCOutput_11";

					whetherReject_tJDBCOutput_11 = false;
					if (row17.history_datetime != null) {
						pstmt_tJDBCOutput_11.setTimestamp(1,
								new java.sql.Timestamp(row17.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_11.setNull(1, java.sql.Types.DATE);
					}

					if (row17.storage_domain_id == null) {
						pstmt_tJDBCOutput_11.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_11.setObject(2,
								row17.storage_domain_id);
					}

					if (row17.available_disk_size_gb == null) {
						pstmt_tJDBCOutput_11.setNull(3, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_11.setInt(3,
								row17.available_disk_size_gb);
					}

					if (row17.used_disk_size_gb == null) {
						pstmt_tJDBCOutput_11.setNull(4, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_11.setInt(4, row17.used_disk_size_gb);
					}

					if (row17.storage_configuration_version == null) {
						pstmt_tJDBCOutput_11.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_11.setInt(5,
								row17.storage_configuration_version);
					}

					try {
						insertedCount_tJDBCOutput_11 = insertedCount_tJDBCOutput_11
								+ pstmt_tJDBCOutput_11.executeUpdate();
						nb_line_tJDBCOutput_11++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_11 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_11++;

					/**
					 * [tJDBCOutput_11 main ] stop
					 */

					/**
					 * [tAggregateRow_6_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_6_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_6_AGGIN", true);
				end_Hash.put("tAggregateRow_6_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_6_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_11 end ] start
				 */

				currentComponent = "tJDBCOutput_11";

				if (pstmt_tJDBCOutput_11 != null) {

					pstmt_tJDBCOutput_11.close();

				}

				nb_line_deleted_tJDBCOutput_11 = nb_line_deleted_tJDBCOutput_11
						+ deletedCount_tJDBCOutput_11;
				nb_line_update_tJDBCOutput_11 = nb_line_update_tJDBCOutput_11
						+ updatedCount_tJDBCOutput_11;
				nb_line_inserted_tJDBCOutput_11 = nb_line_inserted_tJDBCOutput_11
						+ insertedCount_tJDBCOutput_11;
				nb_line_rejected_tJDBCOutput_11 = nb_line_rejected_tJDBCOutput_11
						+ rejectedCount_tJDBCOutput_11;

				globalMap.put("tJDBCOutput_11_NB_LINE", nb_line_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_11);
				globalMap.put("tJDBCOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_11);

				ok_Hash.put("tJDBCOutput_11", true);
				end_Hash.put("tJDBCOutput_11", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_11 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_6_AGGIN"
			globalMap.put("tAggregateRow_6", null);

		}

		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public Short vm_disk_status;

		public Short getVm_disk_status() {
			return this.vm_disk_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int vm_disk_actual_size_mb;

		public int getVm_disk_actual_size_mb() {
			return this.vm_disk_actual_size_mb;
		}

		public Integer read_rate_bytes_per_second;

		public Integer getRead_rate_bytes_per_second() {
			return this.read_rate_bytes_per_second;
		}

		public Integer max_read_rate_bytes_per_second;

		public Integer getMax_read_rate_bytes_per_second() {
			return this.max_read_rate_bytes_per_second;
		}

		public Double read_latency_seconds;

		public Double getRead_latency_seconds() {
			return this.read_latency_seconds;
		}

		public Double max_read_latency_seconds;

		public Double getMax_read_latency_seconds() {
			return this.max_read_latency_seconds;
		}

		public Integer write_rate_bytes_per_second;

		public Integer getWrite_rate_bytes_per_second() {
			return this.write_rate_bytes_per_second;
		}

		public Integer max_write_rate_bytes_per_second;

		public Integer getMax_write_rate_bytes_per_second() {
			return this.max_write_rate_bytes_per_second;
		}

		public Double write_latency_seconds;

		public Double getWrite_latency_seconds() {
			return this.write_latency_seconds;
		}

		public Double max_write_latency_seconds;

		public Double getMax_write_latency_seconds() {
			return this.max_write_latency_seconds;
		}

		public Double flush_latency_seconds;

		public Double getFlush_latency_seconds() {
			return this.flush_latency_seconds;
		}

		public Double max_flush_latency_seconds;

		public Double getMax_flush_latency_seconds() {
			return this.max_flush_latency_seconds;
		}

		public Integer vm_disk_configuration_version;

		public Integer getVm_disk_configuration_version() {
			return this.vm_disk_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_disk_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_status = null;
					} else {
						this.vm_disk_status = dis.readShort();
					}

					this.minutes_in_status = dis.readDouble();

					this.vm_disk_actual_size_mb = dis.readInt();

					this.read_rate_bytes_per_second = readInteger(dis);

					this.max_read_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.read_latency_seconds = null;
					} else {
						this.read_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_read_latency_seconds = null;
					} else {
						this.max_read_latency_seconds = dis.readDouble();
					}

					this.write_rate_bytes_per_second = readInteger(dis);

					this.max_write_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.write_latency_seconds = null;
					} else {
						this.write_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_write_latency_seconds = null;
					} else {
						this.max_write_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.flush_latency_seconds = null;
					} else {
						this.flush_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_flush_latency_seconds = null;
					} else {
						this.max_flush_latency_seconds = dis.readDouble();
					}

					this.vm_disk_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// Short

				if (this.vm_disk_status == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_status);
				}

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.vm_disk_actual_size_mb);

				// Integer

				writeInteger(this.read_rate_bytes_per_second, dos);

				// Integer

				writeInteger(this.max_read_rate_bytes_per_second, dos);

				// Double

				if (this.read_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.read_latency_seconds);
				}

				// Double

				if (this.max_read_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.max_read_latency_seconds);
				}

				// Integer

				writeInteger(this.write_rate_bytes_per_second, dos);

				// Integer

				writeInteger(this.max_write_rate_bytes_per_second, dos);

				// Double

				if (this.write_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.write_latency_seconds);
				}

				// Double

				if (this.max_write_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.max_write_latency_seconds);
				}

				// Double

				if (this.flush_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.flush_latency_seconds);
				}

				// Double

				if (this.max_flush_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.max_flush_latency_seconds);
				}

				// Integer

				writeInteger(this.vm_disk_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_status=" + String.valueOf(vm_disk_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",vm_disk_actual_size_mb="
					+ String.valueOf(vm_disk_actual_size_mb));
			sb.append(",read_rate_bytes_per_second="
					+ String.valueOf(read_rate_bytes_per_second));
			sb.append(",max_read_rate_bytes_per_second="
					+ String.valueOf(max_read_rate_bytes_per_second));
			sb.append(",read_latency_seconds="
					+ String.valueOf(read_latency_seconds));
			sb.append(",max_read_latency_seconds="
					+ String.valueOf(max_read_latency_seconds));
			sb.append(",write_rate_bytes_per_second="
					+ String.valueOf(write_rate_bytes_per_second));
			sb.append(",max_write_rate_bytes_per_second="
					+ String.valueOf(max_write_rate_bytes_per_second));
			sb.append(",write_latency_seconds="
					+ String.valueOf(write_latency_seconds));
			sb.append(",max_write_latency_seconds="
					+ String.valueOf(max_write_latency_seconds));
			sb.append(",flush_latency_seconds="
					+ String.valueOf(flush_latency_seconds));
			sb.append(",max_flush_latency_seconds="
					+ String.valueOf(max_flush_latency_seconds));
			sb.append(",vm_disk_configuration_version="
					+ String.valueOf(vm_disk_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_7 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public Short vm_disk_status;

		public Short getVm_disk_status() {
			return this.vm_disk_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int vm_disk_actual_size_mb;

		public int getVm_disk_actual_size_mb() {
			return this.vm_disk_actual_size_mb;
		}

		public Integer read_rate_bytes_per_second;

		public Integer getRead_rate_bytes_per_second() {
			return this.read_rate_bytes_per_second;
		}

		public Integer max_read_rate_bytes_per_second;

		public Integer getMax_read_rate_bytes_per_second() {
			return this.max_read_rate_bytes_per_second;
		}

		public Double read_latency_seconds;

		public Double getRead_latency_seconds() {
			return this.read_latency_seconds;
		}

		public Double max_read_latency_seconds;

		public Double getMax_read_latency_seconds() {
			return this.max_read_latency_seconds;
		}

		public Integer write_rate_bytes_per_second;

		public Integer getWrite_rate_bytes_per_second() {
			return this.write_rate_bytes_per_second;
		}

		public Integer max_write_rate_bytes_per_second;

		public Integer getMax_write_rate_bytes_per_second() {
			return this.max_write_rate_bytes_per_second;
		}

		public Double write_latency_seconds;

		public Double getWrite_latency_seconds() {
			return this.write_latency_seconds;
		}

		public Double max_write_latency_seconds;

		public Double getMax_write_latency_seconds() {
			return this.max_write_latency_seconds;
		}

		public Double flush_latency_seconds;

		public Double getFlush_latency_seconds() {
			return this.flush_latency_seconds;
		}

		public Double max_flush_latency_seconds;

		public Double getMax_flush_latency_seconds() {
			return this.max_flush_latency_seconds;
		}

		public Integer vm_disk_configuration_version;

		public Integer getVm_disk_configuration_version() {
			return this.vm_disk_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_disk_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_status = null;
					} else {
						this.vm_disk_status = dis.readShort();
					}

					this.minutes_in_status = dis.readDouble();

					this.vm_disk_actual_size_mb = dis.readInt();

					this.read_rate_bytes_per_second = readInteger(dis);

					this.max_read_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.read_latency_seconds = null;
					} else {
						this.read_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_read_latency_seconds = null;
					} else {
						this.max_read_latency_seconds = dis.readDouble();
					}

					this.write_rate_bytes_per_second = readInteger(dis);

					this.max_write_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.write_latency_seconds = null;
					} else {
						this.write_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_write_latency_seconds = null;
					} else {
						this.max_write_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.flush_latency_seconds = null;
					} else {
						this.flush_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.max_flush_latency_seconds = null;
					} else {
						this.max_flush_latency_seconds = dis.readDouble();
					}

					this.vm_disk_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// Short

				if (this.vm_disk_status == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_status);
				}

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.vm_disk_actual_size_mb);

				// Integer

				writeInteger(this.read_rate_bytes_per_second, dos);

				// Integer

				writeInteger(this.max_read_rate_bytes_per_second, dos);

				// Double

				if (this.read_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.read_latency_seconds);
				}

				// Double

				if (this.max_read_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.max_read_latency_seconds);
				}

				// Integer

				writeInteger(this.write_rate_bytes_per_second, dos);

				// Integer

				writeInteger(this.max_write_rate_bytes_per_second, dos);

				// Double

				if (this.write_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.write_latency_seconds);
				}

				// Double

				if (this.max_write_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.max_write_latency_seconds);
				}

				// Double

				if (this.flush_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.flush_latency_seconds);
				}

				// Double

				if (this.max_flush_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.max_flush_latency_seconds);
				}

				// Integer

				writeInteger(this.vm_disk_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_status=" + String.valueOf(vm_disk_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",vm_disk_actual_size_mb="
					+ String.valueOf(vm_disk_actual_size_mb));
			sb.append(",read_rate_bytes_per_second="
					+ String.valueOf(read_rate_bytes_per_second));
			sb.append(",max_read_rate_bytes_per_second="
					+ String.valueOf(max_read_rate_bytes_per_second));
			sb.append(",read_latency_seconds="
					+ String.valueOf(read_latency_seconds));
			sb.append(",max_read_latency_seconds="
					+ String.valueOf(max_read_latency_seconds));
			sb.append(",write_rate_bytes_per_second="
					+ String.valueOf(write_rate_bytes_per_second));
			sb.append(",max_write_rate_bytes_per_second="
					+ String.valueOf(max_write_rate_bytes_per_second));
			sb.append(",write_latency_seconds="
					+ String.valueOf(write_latency_seconds));
			sb.append(",max_write_latency_seconds="
					+ String.valueOf(max_write_latency_seconds));
			sb.append(",flush_latency_seconds="
					+ String.valueOf(flush_latency_seconds));
			sb.append(",max_flush_latency_seconds="
					+ String.valueOf(max_flush_latency_seconds));
			sb.append(",vm_disk_configuration_version="
					+ String.valueOf(vm_disk_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class vm_disk_aggregateStruct implements
			routines.system.IPersistableRow<vm_disk_aggregateStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public Short vm_disk_status;

		public Short getVm_disk_status() {
			return this.vm_disk_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int vm_disk_actual_size_mb;

		public int getVm_disk_actual_size_mb() {
			return this.vm_disk_actual_size_mb;
		}

		public Integer read_rate_bytes_per_second;

		public Integer getRead_rate_bytes_per_second() {
			return this.read_rate_bytes_per_second;
		}

		public Double read_latency_seconds;

		public Double getRead_latency_seconds() {
			return this.read_latency_seconds;
		}

		public Integer write_rate_bytes_per_second;

		public Integer getWrite_rate_bytes_per_second() {
			return this.write_rate_bytes_per_second;
		}

		public Double write_latency_seconds;

		public Double getWrite_latency_seconds() {
			return this.write_latency_seconds;
		}

		public Double flush_latency_seconds;

		public Double getFlush_latency_seconds() {
			return this.flush_latency_seconds;
		}

		public Integer vm_disk_configuration_version;

		public Integer getVm_disk_configuration_version() {
			return this.vm_disk_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_disk_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_status = null;
					} else {
						this.vm_disk_status = dis.readShort();
					}

					this.minutes_in_status = dis.readDouble();

					this.vm_disk_actual_size_mb = dis.readInt();

					this.read_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.read_latency_seconds = null;
					} else {
						this.read_latency_seconds = dis.readDouble();
					}

					this.write_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.write_latency_seconds = null;
					} else {
						this.write_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.flush_latency_seconds = null;
					} else {
						this.flush_latency_seconds = dis.readDouble();
					}

					this.vm_disk_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// Short

				if (this.vm_disk_status == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_status);
				}

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.vm_disk_actual_size_mb);

				// Integer

				writeInteger(this.read_rate_bytes_per_second, dos);

				// Double

				if (this.read_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.read_latency_seconds);
				}

				// Integer

				writeInteger(this.write_rate_bytes_per_second, dos);

				// Double

				if (this.write_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.write_latency_seconds);
				}

				// Double

				if (this.flush_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.flush_latency_seconds);
				}

				// Integer

				writeInteger(this.vm_disk_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_status=" + String.valueOf(vm_disk_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",vm_disk_actual_size_mb="
					+ String.valueOf(vm_disk_actual_size_mb));
			sb.append(",read_rate_bytes_per_second="
					+ String.valueOf(read_rate_bytes_per_second));
			sb.append(",read_latency_seconds="
					+ String.valueOf(read_latency_seconds));
			sb.append(",write_rate_bytes_per_second="
					+ String.valueOf(write_rate_bytes_per_second));
			sb.append(",write_latency_seconds="
					+ String.valueOf(write_latency_seconds));
			sb.append(",flush_latency_seconds="
					+ String.valueOf(flush_latency_seconds));
			sb.append(",vm_disk_configuration_version="
					+ String.valueOf(vm_disk_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_disk_aggregateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public Short vm_disk_status;

		public Short getVm_disk_status() {
			return this.vm_disk_status;
		}

		public double minutes_in_status;

		public double getMinutes_in_status() {
			return this.minutes_in_status;
		}

		public int vm_disk_actual_size_mb;

		public int getVm_disk_actual_size_mb() {
			return this.vm_disk_actual_size_mb;
		}

		public Integer read_rate_bytes_per_second;

		public Integer getRead_rate_bytes_per_second() {
			return this.read_rate_bytes_per_second;
		}

		public Double read_latency_seconds;

		public Double getRead_latency_seconds() {
			return this.read_latency_seconds;
		}

		public Integer write_rate_bytes_per_second;

		public Integer getWrite_rate_bytes_per_second() {
			return this.write_rate_bytes_per_second;
		}

		public Double write_latency_seconds;

		public Double getWrite_latency_seconds() {
			return this.write_latency_seconds;
		}

		public Double flush_latency_seconds;

		public Double getFlush_latency_seconds() {
			return this.flush_latency_seconds;
		}

		public Integer vm_disk_configuration_version;

		public Integer getVm_disk_configuration_version() {
			return this.vm_disk_configuration_version;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_disk_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_status = null;
					} else {
						this.vm_disk_status = dis.readShort();
					}

					this.minutes_in_status = dis.readDouble();

					this.vm_disk_actual_size_mb = dis.readInt();

					this.read_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.read_latency_seconds = null;
					} else {
						this.read_latency_seconds = dis.readDouble();
					}

					this.write_rate_bytes_per_second = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.write_latency_seconds = null;
					} else {
						this.write_latency_seconds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.flush_latency_seconds = null;
					} else {
						this.flush_latency_seconds = dis.readDouble();
					}

					this.vm_disk_configuration_version = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// Short

				if (this.vm_disk_status == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_status);
				}

				// double

				dos.writeDouble(this.minutes_in_status);

				// int

				dos.writeInt(this.vm_disk_actual_size_mb);

				// Integer

				writeInteger(this.read_rate_bytes_per_second, dos);

				// Double

				if (this.read_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.read_latency_seconds);
				}

				// Integer

				writeInteger(this.write_rate_bytes_per_second, dos);

				// Double

				if (this.write_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.write_latency_seconds);
				}

				// Double

				if (this.flush_latency_seconds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.flush_latency_seconds);
				}

				// Integer

				writeInteger(this.vm_disk_configuration_version, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_status=" + String.valueOf(vm_disk_status));
			sb.append(",minutes_in_status=" + String.valueOf(minutes_in_status));
			sb.append(",vm_disk_actual_size_mb="
					+ String.valueOf(vm_disk_actual_size_mb));
			sb.append(",read_rate_bytes_per_second="
					+ String.valueOf(read_rate_bytes_per_second));
			sb.append(",read_latency_seconds="
					+ String.valueOf(read_latency_seconds));
			sb.append(",write_rate_bytes_per_second="
					+ String.valueOf(write_rate_bytes_per_second));
			sb.append(",write_latency_seconds="
					+ String.valueOf(write_latency_seconds));
			sb.append(",flush_latency_seconds="
					+ String.valueOf(flush_latency_seconds));
			sb.append(",vm_disk_configuration_version="
					+ String.valueOf(vm_disk_configuration_version));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				vm_disk_aggregateStruct vm_disk_aggregate = new vm_disk_aggregateStruct();
				row20Struct row20 = new row20Struct();

				/**
				 * [tAggregateRow_7_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_7_AGGOUT", false);
				start_Hash.put("tAggregateRow_7_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_7_AGGOUT";

				int tos_count_tAggregateRow_7_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_7 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_7 utilClass_tAggregateRow_7 = new UtilClass_tAggregateRow_7();

				class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object vm_disk_id;
					Short vm_disk_status;
					BigDecimal minutes_in_status_sum;

					int vm_disk_actual_size_mb_sum;
					int vm_disk_actual_size_mb_count = 0;

					Integer read_rate_bytes_per_second_sum;
					int read_rate_bytes_per_second_count = 0;

					Integer max_read_rate_bytes_per_second_max;
					BigDecimal read_latency_seconds_sum;
					int read_latency_seconds_count = 0;

					Double max_read_latency_seconds_max;
					Integer write_rate_bytes_per_second_sum;
					int write_rate_bytes_per_second_count = 0;

					Integer max_write_rate_bytes_per_second_max;
					BigDecimal write_latency_seconds_sum;
					int write_latency_seconds_count = 0;

					Double max_write_latency_seconds_max;
					BigDecimal flush_latency_seconds_sum;
					int flush_latency_seconds_count = 0;

					Double max_flush_latency_seconds_max;
					Integer vm_disk_configuration_version_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.vm_disk_id == null) ? 0
											: this.vm_disk_id.hashCode());

							result = prime
									* result
									+ ((this.vm_disk_status == null) ? 0
											: this.vm_disk_status.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.vm_disk_id == null) {
							if (other.vm_disk_id != null)
								return false;
						} else if (!this.vm_disk_id.equals(other.vm_disk_id))
							return false;

						if (this.vm_disk_status == null) {
							if (other.vm_disk_status != null)
								return false;
						} else if (!this.vm_disk_status
								.equals(other.vm_disk_status))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
				AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
				java.util.Map<AggOperationStruct_tAggregateRow_7, AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7, AggOperationStruct_tAggregateRow_7>();

				/**
				 * [tAggregateRow_7_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());
				currentComponent = "tMap_13";

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_disk_aggregateStruct vm_disk_aggregate_tmp = new vm_disk_aggregateStruct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tJDBCInput_13 begin ] start
				 */

				ok_Hash.put("tJDBCInput_13", false);
				start_Hash.put("tJDBCInput_13", System.currentTimeMillis());
				currentComponent = "tJDBCInput_13";

				int tos_count_tJDBCInput_13 = 0;

				int nb_line_tJDBCInput_13 = 0;
				java.sql.Connection conn_tJDBCInput_13 = null;
				conn_tJDBCInput_13 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_13 = conn_tJDBCInput_13
						.createStatement();

				String dbquery_tJDBCInput_13 = "SELECT history_datetime, 		vm_disk_id, 		vm_disk_status,  		minutes_in_status, 		vm_disk_actual_size_mb, 		read_rate_bytes_per_second, 		read_latency_seconds, 		write_rate_bytes_per_second, 		write_latency_seconds, 		flush_latency_seconds, 		vm_disk_configuration_version  FROM vm_disk_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastHourAggr')  ORDER BY history_datetime,  		 vm_disk_id,     		 vm_disk_status";

				globalMap.put("tJDBCInput_13_QUERY", dbquery_tJDBCInput_13);

				java.sql.ResultSet rs_tJDBCInput_13 = stmt_tJDBCInput_13
						.executeQuery(dbquery_tJDBCInput_13);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_13 = rs_tJDBCInput_13
						.getMetaData();
				int colQtyInRs_tJDBCInput_13 = rsmd_tJDBCInput_13
						.getColumnCount();

				String tmpContent_tJDBCInput_13 = null;
				while (rs_tJDBCInput_13.next()) {
					nb_line_tJDBCInput_13++;

					if (colQtyInRs_tJDBCInput_13 < 1) {
						row19.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_13 = null;
						try {
							date_tJDBCInput_13 = rs_tJDBCInput_13
									.getTimestamp(1);
						} catch (Exception e) {
							date_tJDBCInput_13 = rs_tJDBCInput_13.getDate(1);
						}
						row19.history_datetime = date_tJDBCInput_13;

					}
					if (colQtyInRs_tJDBCInput_13 < 2) {
						row19.vm_disk_id = null;
					} else {

						if (rs_tJDBCInput_13.getObject(2) != null) {
							row19.vm_disk_id = rs_tJDBCInput_13.getObject(2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_13 < 3) {
						row19.vm_disk_status = null;
					} else {

						if (rs_tJDBCInput_13.getObject(3) != null) {
							row19.vm_disk_status = rs_tJDBCInput_13.getShort(3);
						} else {
							row19.vm_disk_status = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.vm_disk_status = null;
						}
					}
					if (colQtyInRs_tJDBCInput_13 < 4) {
						row19.minutes_in_status = 0;
					} else {

						if (rs_tJDBCInput_13.getObject(4) != null) {
							row19.minutes_in_status = rs_tJDBCInput_13
									.getDouble(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_13 < 5) {
						row19.vm_disk_actual_size_mb = 0;
					} else {

						if (rs_tJDBCInput_13.getObject(5) != null) {
							row19.vm_disk_actual_size_mb = rs_tJDBCInput_13
									.getInt(5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_13 < 6) {
						row19.read_rate_bytes_per_second = null;
					} else {

						if (rs_tJDBCInput_13.getObject(6) != null) {
							row19.read_rate_bytes_per_second = rs_tJDBCInput_13
									.getInt(6);
						} else {
							row19.read_rate_bytes_per_second = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.read_rate_bytes_per_second = null;
						}
					}
					if (colQtyInRs_tJDBCInput_13 < 7) {
						row19.read_latency_seconds = null;
					} else {

						if (rs_tJDBCInput_13.getObject(7) != null) {
							row19.read_latency_seconds = rs_tJDBCInput_13
									.getDouble(7);
						} else {
							row19.read_latency_seconds = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.read_latency_seconds = null;
						}
					}
					if (colQtyInRs_tJDBCInput_13 < 8) {
						row19.write_rate_bytes_per_second = null;
					} else {

						if (rs_tJDBCInput_13.getObject(8) != null) {
							row19.write_rate_bytes_per_second = rs_tJDBCInput_13
									.getInt(8);
						} else {
							row19.write_rate_bytes_per_second = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.write_rate_bytes_per_second = null;
						}
					}
					if (colQtyInRs_tJDBCInput_13 < 9) {
						row19.write_latency_seconds = null;
					} else {

						if (rs_tJDBCInput_13.getObject(9) != null) {
							row19.write_latency_seconds = rs_tJDBCInput_13
									.getDouble(9);
						} else {
							row19.write_latency_seconds = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.write_latency_seconds = null;
						}
					}
					if (colQtyInRs_tJDBCInput_13 < 10) {
						row19.flush_latency_seconds = null;
					} else {

						if (rs_tJDBCInput_13.getObject(10) != null) {
							row19.flush_latency_seconds = rs_tJDBCInput_13
									.getDouble(10);
						} else {
							row19.flush_latency_seconds = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.flush_latency_seconds = null;
						}
					}
					if (colQtyInRs_tJDBCInput_13 < 11) {
						row19.vm_disk_configuration_version = null;
					} else {

						if (rs_tJDBCInput_13.getObject(11) != null) {
							row19.vm_disk_configuration_version = rs_tJDBCInput_13
									.getInt(11);
						} else {
							row19.vm_disk_configuration_version = null;
						}

						if (rs_tJDBCInput_13.wasNull()) {
							row19.vm_disk_configuration_version = null;
						}
					}

					/**
					 * [tJDBCInput_13 begin ] stop
					 */
					/**
					 * [tJDBCInput_13 main ] start
					 */

					currentComponent = "tJDBCInput_13";

					tos_count_tJDBCInput_13++;

					/**
					 * [tJDBCInput_13 main ] stop
					 */

					/**
					 * [tMap_13 main ] start
					 */

					currentComponent = "tMap_13";

					boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_13 = false;
					boolean mainRowRejected_tMap_13 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row19.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfHour(context.runTime), -1,
											"HH")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row19'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							vm_disk_aggregate = null;

							// # Output table : 'vm_disk_aggregate'
							vm_disk_aggregate_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row19.history_datetime);
							vm_disk_aggregate_tmp.vm_disk_id = row19.vm_disk_id;
							vm_disk_aggregate_tmp.vm_disk_status = row19.vm_disk_status;
							vm_disk_aggregate_tmp.minutes_in_status = row19.minutes_in_status;
							vm_disk_aggregate_tmp.vm_disk_actual_size_mb = row19.vm_disk_actual_size_mb;
							vm_disk_aggregate_tmp.read_rate_bytes_per_second = row19.read_rate_bytes_per_second;
							vm_disk_aggregate_tmp.read_latency_seconds = row19.read_latency_seconds;
							vm_disk_aggregate_tmp.write_rate_bytes_per_second = row19.write_rate_bytes_per_second;
							vm_disk_aggregate_tmp.write_latency_seconds = row19.write_latency_seconds;
							vm_disk_aggregate_tmp.flush_latency_seconds = row19.flush_latency_seconds;
							vm_disk_aggregate_tmp.vm_disk_configuration_version = row19.vm_disk_configuration_version;
							vm_disk_aggregate = vm_disk_aggregate_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_13 = false;

						tos_count_tMap_13++;

						/**
						 * [tMap_13 main ] stop
						 */
						// Start of branch "vm_disk_aggregate"
						if (vm_disk_aggregate != null) {

							/**
							 * [tAggregateRow_7_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_7_AGGOUT";

							operation_finder_tAggregateRow_7.history_datetime = vm_disk_aggregate.history_datetime;
							operation_finder_tAggregateRow_7.vm_disk_id = vm_disk_aggregate.vm_disk_id;
							operation_finder_tAggregateRow_7.vm_disk_status = vm_disk_aggregate.vm_disk_status;

							operation_finder_tAggregateRow_7.hashCodeDirty = true;

							operation_result_tAggregateRow_7 = hash_tAggregateRow_7
									.get(operation_finder_tAggregateRow_7);

							boolean isFirstAdd_tAggregateRow_7 = false;

							if (operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

								operation_result_tAggregateRow_7.history_datetime = operation_finder_tAggregateRow_7.history_datetime;
								operation_result_tAggregateRow_7.vm_disk_id = operation_finder_tAggregateRow_7.vm_disk_id;
								operation_result_tAggregateRow_7.vm_disk_status = operation_finder_tAggregateRow_7.vm_disk_status;

								isFirstAdd_tAggregateRow_7 = true;

								hash_tAggregateRow_7.put(
										operation_result_tAggregateRow_7,
										operation_result_tAggregateRow_7);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_7.minutes_in_status_sum == null) {
								operation_result_tAggregateRow_7.minutes_in_status_sum = new BigDecimal(
										0).setScale(2);
							}
							operation_result_tAggregateRow_7.minutes_in_status_sum = operation_result_tAggregateRow_7.minutes_in_status_sum
									.add(new BigDecimal(
											String.valueOf(vm_disk_aggregate.minutes_in_status)));

							operation_result_tAggregateRow_7.vm_disk_actual_size_mb_count++;

							operation_result_tAggregateRow_7.vm_disk_actual_size_mb_sum += vm_disk_aggregate.vm_disk_actual_size_mb;

							if (vm_disk_aggregate.read_rate_bytes_per_second != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_7.read_rate_bytes_per_second_count++;

								if (operation_result_tAggregateRow_7.read_rate_bytes_per_second_sum == null) {
									operation_result_tAggregateRow_7.read_rate_bytes_per_second_sum = (int) 0;
								}

								if (vm_disk_aggregate.read_rate_bytes_per_second != null)
									operation_result_tAggregateRow_7.read_rate_bytes_per_second_sum += vm_disk_aggregate.read_rate_bytes_per_second;
							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.read_rate_bytes_per_second != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_7.max_read_rate_bytes_per_second_max == null
										|| vm_disk_aggregate.read_rate_bytes_per_second > operation_result_tAggregateRow_7.max_read_rate_bytes_per_second_max

								) {
									operation_result_tAggregateRow_7.max_read_rate_bytes_per_second_max = vm_disk_aggregate.read_rate_bytes_per_second;
								}

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.read_latency_seconds != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_7.read_latency_seconds_count++;

								if (operation_result_tAggregateRow_7.read_latency_seconds_sum == null) {
									operation_result_tAggregateRow_7.read_latency_seconds_sum = new BigDecimal(
											0).setScale(9);
								}
								operation_result_tAggregateRow_7.read_latency_seconds_sum = operation_result_tAggregateRow_7.read_latency_seconds_sum
										.add(new BigDecimal(
												String.valueOf(vm_disk_aggregate.read_latency_seconds)));

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.read_latency_seconds != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_7.max_read_latency_seconds_max == null
										|| vm_disk_aggregate.read_latency_seconds > operation_result_tAggregateRow_7.max_read_latency_seconds_max

								) {
									operation_result_tAggregateRow_7.max_read_latency_seconds_max = vm_disk_aggregate.read_latency_seconds;
								}

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.write_rate_bytes_per_second != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_7.write_rate_bytes_per_second_count++;

								if (operation_result_tAggregateRow_7.write_rate_bytes_per_second_sum == null) {
									operation_result_tAggregateRow_7.write_rate_bytes_per_second_sum = (int) 0;
								}

								if (vm_disk_aggregate.write_rate_bytes_per_second != null)
									operation_result_tAggregateRow_7.write_rate_bytes_per_second_sum += vm_disk_aggregate.write_rate_bytes_per_second;
							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.write_rate_bytes_per_second != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_7.max_write_rate_bytes_per_second_max == null
										|| vm_disk_aggregate.write_rate_bytes_per_second > operation_result_tAggregateRow_7.max_write_rate_bytes_per_second_max

								) {
									operation_result_tAggregateRow_7.max_write_rate_bytes_per_second_max = vm_disk_aggregate.write_rate_bytes_per_second;
								}

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.write_latency_seconds != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_7.write_latency_seconds_count++;

								if (operation_result_tAggregateRow_7.write_latency_seconds_sum == null) {
									operation_result_tAggregateRow_7.write_latency_seconds_sum = new BigDecimal(
											0).setScale(9);
								}
								operation_result_tAggregateRow_7.write_latency_seconds_sum = operation_result_tAggregateRow_7.write_latency_seconds_sum
										.add(new BigDecimal(
												String.valueOf(vm_disk_aggregate.write_latency_seconds)));

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.write_latency_seconds != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_7.max_write_latency_seconds_max == null
										|| vm_disk_aggregate.write_latency_seconds > operation_result_tAggregateRow_7.max_write_latency_seconds_max

								) {
									operation_result_tAggregateRow_7.max_write_latency_seconds_max = vm_disk_aggregate.write_latency_seconds;
								}

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.flush_latency_seconds != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_7.flush_latency_seconds_count++;

								if (operation_result_tAggregateRow_7.flush_latency_seconds_sum == null) {
									operation_result_tAggregateRow_7.flush_latency_seconds_sum = new BigDecimal(
											0).setScale(9);
								}
								operation_result_tAggregateRow_7.flush_latency_seconds_sum = operation_result_tAggregateRow_7.flush_latency_seconds_sum
										.add(new BigDecimal(
												String.valueOf(vm_disk_aggregate.flush_latency_seconds)));

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.flush_latency_seconds != null) { // G_OutMain_AggR_546

								if (operation_result_tAggregateRow_7.max_flush_latency_seconds_max == null
										|| vm_disk_aggregate.flush_latency_seconds > operation_result_tAggregateRow_7.max_flush_latency_seconds_max

								) {
									operation_result_tAggregateRow_7.max_flush_latency_seconds_max = vm_disk_aggregate.flush_latency_seconds;
								}

							} // G_OutMain_AggR_546

							if (vm_disk_aggregate.vm_disk_configuration_version != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_7.vm_disk_configuration_version_last = vm_disk_aggregate.vm_disk_configuration_version;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_7_AGGOUT++;

							/**
							 * [tAggregateRow_7_AGGOUT main ] stop
							 */

						} // End of branch "vm_disk_aggregate"

					} // G_TM_M_280 close main tMap filter for table 'row19'

					/**
					 * [tJDBCInput_13 end ] start
					 */

					currentComponent = "tJDBCInput_13";

				}
				stmt_tJDBCInput_13.close();

				globalMap.put("tJDBCInput_13_NB_LINE", nb_line_tJDBCInput_13);

				ok_Hash.put("tJDBCInput_13", true);
				end_Hash.put("tJDBCInput_13", System.currentTimeMillis());

				/**
				 * [tJDBCInput_13 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_7_AGGOUT";

				ok_Hash.put("tAggregateRow_7_AGGOUT", true);
				end_Hash.put("tAggregateRow_7_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_7_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_13 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_13", false);
				start_Hash.put("tJDBCOutput_13", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_13";

				int tos_count_tJDBCOutput_13 = 0;

				int nb_line_tJDBCOutput_13 = 0;
				int nb_line_update_tJDBCOutput_13 = 0;
				int nb_line_inserted_tJDBCOutput_13 = 0;
				int nb_line_deleted_tJDBCOutput_13 = 0;
				int nb_line_rejected_tJDBCOutput_13 = 0;

				int deletedCount_tJDBCOutput_13 = 0;
				int updatedCount_tJDBCOutput_13 = 0;
				int insertedCount_tJDBCOutput_13 = 0;
				int rejectedCount_tJDBCOutput_13 = 0;

				boolean whetherReject_tJDBCOutput_13 = false;

				java.sql.Connection connection_tJDBCOutput_13 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_13 = 10000;
				int batchSizeCounter_tJDBCOutput_13 = 0;

				String insert_tJDBCOutput_13 = "INSERT INTO "
						+ "vm_disk_hourly_history"
						+ " (history_datetime,vm_disk_id,vm_disk_status,minutes_in_status,vm_disk_actual_size_mb,read_rate_bytes_per_second,max_read_rate_bytes_per_second,read_latency_seconds,max_read_latency_seconds,write_rate_bytes_per_second,max_write_rate_bytes_per_second,write_latency_seconds,max_write_latency_seconds,flush_latency_seconds,max_flush_latency_seconds,vm_disk_configuration_version) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_13 = connection_tJDBCOutput_13
						.prepareStatement(insert_tJDBCOutput_13);

				/**
				 * [tJDBCOutput_13 begin ] stop
				 */

				/**
				 * [tAggregateRow_7_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_7_AGGIN", false);
				start_Hash.put("tAggregateRow_7_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_7_AGGIN";

				int tos_count_tAggregateRow_7_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7
						.values();

				globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7
						.size());

				for (AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600

					/**
					 * [tAggregateRow_7_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_7_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_7_AGGIN";

					row20.history_datetime = aggregated_row_tAggregateRow_7.history_datetime;

					row20.vm_disk_id = aggregated_row_tAggregateRow_7.vm_disk_id;

					row20.vm_disk_status = aggregated_row_tAggregateRow_7.vm_disk_status;

					if (aggregated_row_tAggregateRow_7.minutes_in_status_sum != null) {
						row20.minutes_in_status = aggregated_row_tAggregateRow_7.minutes_in_status_sum
								.doubleValue();

					} else {

						row20.minutes_in_status = 0;

					}

					if (aggregated_row_tAggregateRow_7.vm_disk_actual_size_mb_count > 0) {

						double row20_vm_disk_actual_size_mb_temp = (double) aggregated_row_tAggregateRow_7.vm_disk_actual_size_mb_sum
								/ (double) aggregated_row_tAggregateRow_7.vm_disk_actual_size_mb_count;

						row20.vm_disk_actual_size_mb = (int) row20_vm_disk_actual_size_mb_temp;

					} else {
						String count = "0";

						row20.vm_disk_actual_size_mb = ParserUtils
								.parseTo_int(count);

					}
					if (aggregated_row_tAggregateRow_7.read_rate_bytes_per_second_count > 0) {

						double row20_read_rate_bytes_per_second_temp = (double) aggregated_row_tAggregateRow_7.read_rate_bytes_per_second_sum
								/ (double) aggregated_row_tAggregateRow_7.read_rate_bytes_per_second_count;

						row20.read_rate_bytes_per_second = (int) row20_read_rate_bytes_per_second_temp;

					} else {
						String count = "0";

						row20.read_rate_bytes_per_second = ParserUtils
								.parseTo_Integer(count);

					}
					row20.max_read_rate_bytes_per_second = aggregated_row_tAggregateRow_7.max_read_rate_bytes_per_second_max;
					if (aggregated_row_tAggregateRow_7.read_latency_seconds_count > 0) {

						row20.read_latency_seconds = aggregated_row_tAggregateRow_7.read_latency_seconds_sum
								.divide(
										new BigDecimal(
												String.valueOf(aggregated_row_tAggregateRow_7.read_latency_seconds_count)),
										9, BigDecimal.ROUND_HALF_UP)

								.doubleValue()

						;

					} else {
						String count = "0";

						row20.read_latency_seconds = ParserUtils
								.parseTo_Double(count);

					}
					row20.max_read_latency_seconds = aggregated_row_tAggregateRow_7.max_read_latency_seconds_max;
					if (aggregated_row_tAggregateRow_7.write_rate_bytes_per_second_count > 0) {

						double row20_write_rate_bytes_per_second_temp = (double) aggregated_row_tAggregateRow_7.write_rate_bytes_per_second_sum
								/ (double) aggregated_row_tAggregateRow_7.write_rate_bytes_per_second_count;

						row20.write_rate_bytes_per_second = (int) row20_write_rate_bytes_per_second_temp;

					} else {
						String count = "0";

						row20.write_rate_bytes_per_second = ParserUtils
								.parseTo_Integer(count);

					}
					row20.max_write_rate_bytes_per_second = aggregated_row_tAggregateRow_7.max_write_rate_bytes_per_second_max;
					if (aggregated_row_tAggregateRow_7.write_latency_seconds_count > 0) {

						row20.write_latency_seconds = aggregated_row_tAggregateRow_7.write_latency_seconds_sum
								.divide(
										new BigDecimal(
												String.valueOf(aggregated_row_tAggregateRow_7.write_latency_seconds_count)),
										9, BigDecimal.ROUND_HALF_UP)

								.doubleValue()

						;

					} else {
						String count = "0";

						row20.write_latency_seconds = ParserUtils
								.parseTo_Double(count);

					}
					row20.max_write_latency_seconds = aggregated_row_tAggregateRow_7.max_write_latency_seconds_max;
					if (aggregated_row_tAggregateRow_7.flush_latency_seconds_count > 0) {

						row20.flush_latency_seconds = aggregated_row_tAggregateRow_7.flush_latency_seconds_sum
								.divide(
										new BigDecimal(
												String.valueOf(aggregated_row_tAggregateRow_7.flush_latency_seconds_count)),
										9, BigDecimal.ROUND_HALF_UP)

								.doubleValue()

						;

					} else {
						String count = "0";

						row20.flush_latency_seconds = ParserUtils
								.parseTo_Double(count);

					}
					row20.max_flush_latency_seconds = aggregated_row_tAggregateRow_7.max_flush_latency_seconds_max;
					row20.vm_disk_configuration_version = aggregated_row_tAggregateRow_7.vm_disk_configuration_version_last;

					tos_count_tAggregateRow_7_AGGIN++;

					/**
					 * [tAggregateRow_7_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_13 main ] start
					 */

					currentComponent = "tJDBCOutput_13";

					whetherReject_tJDBCOutput_13 = false;
					if (row20.history_datetime != null) {
						pstmt_tJDBCOutput_13.setTimestamp(1,
								new java.sql.Timestamp(row20.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_13.setNull(1, java.sql.Types.DATE);
					}

					if (row20.vm_disk_id == null) {
						pstmt_tJDBCOutput_13.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_13.setObject(2, row20.vm_disk_id);
					}

					if (row20.vm_disk_status == null) {
						pstmt_tJDBCOutput_13.setNull(3, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_13.setShort(3, row20.vm_disk_status);
					}

					pstmt_tJDBCOutput_13.setDouble(4, row20.minutes_in_status);

					pstmt_tJDBCOutput_13
							.setInt(5, row20.vm_disk_actual_size_mb);

					if (row20.read_rate_bytes_per_second == null) {
						pstmt_tJDBCOutput_13.setNull(6, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_13.setInt(6,
								row20.read_rate_bytes_per_second);
					}

					if (row20.max_read_rate_bytes_per_second == null) {
						pstmt_tJDBCOutput_13.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_13.setInt(7,
								row20.max_read_rate_bytes_per_second);
					}

					if (row20.read_latency_seconds == null) {
						pstmt_tJDBCOutput_13.setNull(8, java.sql.Types.DOUBLE);
					} else {
						pstmt_tJDBCOutput_13.setDouble(8,
								row20.read_latency_seconds);
					}

					if (row20.max_read_latency_seconds == null) {
						pstmt_tJDBCOutput_13.setNull(9, java.sql.Types.DOUBLE);
					} else {
						pstmt_tJDBCOutput_13.setDouble(9,
								row20.max_read_latency_seconds);
					}

					if (row20.write_rate_bytes_per_second == null) {
						pstmt_tJDBCOutput_13
								.setNull(10, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_13.setInt(10,
								row20.write_rate_bytes_per_second);
					}

					if (row20.max_write_rate_bytes_per_second == null) {
						pstmt_tJDBCOutput_13
								.setNull(11, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_13.setInt(11,
								row20.max_write_rate_bytes_per_second);
					}

					if (row20.write_latency_seconds == null) {
						pstmt_tJDBCOutput_13.setNull(12, java.sql.Types.DOUBLE);
					} else {
						pstmt_tJDBCOutput_13.setDouble(12,
								row20.write_latency_seconds);
					}

					if (row20.max_write_latency_seconds == null) {
						pstmt_tJDBCOutput_13.setNull(13, java.sql.Types.DOUBLE);
					} else {
						pstmt_tJDBCOutput_13.setDouble(13,
								row20.max_write_latency_seconds);
					}

					if (row20.flush_latency_seconds == null) {
						pstmt_tJDBCOutput_13.setNull(14, java.sql.Types.DOUBLE);
					} else {
						pstmt_tJDBCOutput_13.setDouble(14,
								row20.flush_latency_seconds);
					}

					if (row20.max_flush_latency_seconds == null) {
						pstmt_tJDBCOutput_13.setNull(15, java.sql.Types.DOUBLE);
					} else {
						pstmt_tJDBCOutput_13.setDouble(15,
								row20.max_flush_latency_seconds);
					}

					if (row20.vm_disk_configuration_version == null) {
						pstmt_tJDBCOutput_13
								.setNull(16, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_13.setInt(16,
								row20.vm_disk_configuration_version);
					}

					try {
						insertedCount_tJDBCOutput_13 = insertedCount_tJDBCOutput_13
								+ pstmt_tJDBCOutput_13.executeUpdate();
						nb_line_tJDBCOutput_13++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_13 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_13++;

					/**
					 * [tJDBCOutput_13 main ] stop
					 */

					/**
					 * [tAggregateRow_7_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_7_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_7_AGGIN", true);
				end_Hash.put("tAggregateRow_7_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_7_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_13 end ] start
				 */

				currentComponent = "tJDBCOutput_13";

				if (pstmt_tJDBCOutput_13 != null) {

					pstmt_tJDBCOutput_13.close();

				}

				nb_line_deleted_tJDBCOutput_13 = nb_line_deleted_tJDBCOutput_13
						+ deletedCount_tJDBCOutput_13;
				nb_line_update_tJDBCOutput_13 = nb_line_update_tJDBCOutput_13
						+ updatedCount_tJDBCOutput_13;
				nb_line_inserted_tJDBCOutput_13 = nb_line_inserted_tJDBCOutput_13
						+ insertedCount_tJDBCOutput_13;
				nb_line_rejected_tJDBCOutput_13 = nb_line_rejected_tJDBCOutput_13
						+ rejectedCount_tJDBCOutput_13;

				globalMap.put("tJDBCOutput_13_NB_LINE", nb_line_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_13);
				globalMap.put("tJDBCOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_13);

				ok_Hash.put("tJDBCOutput_13", true);
				end_Hash.put("tJDBCOutput_13", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_13 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_7_AGGIN"
			globalMap.put("tAggregateRow_7", null);

		}

		globalMap.put("tJDBCInput_13_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());
				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJDBCConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.ovirtHistoryJdbcConnection;

				String userName_tJDBCConnection_1 = context.ovirtHistoryUser;

				String password_tJDBCConnection_1 = context.ovirtHistoryPassword;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String sharedConnectionName_tJDBCConnection_1 = "hourly_ovirt_history";
				conn_tJDBCConnection_1 = SharedDBConnection.getDBConnection(
						context.ovirtHistoryDriverClass, url_tJDBCConnection_1,
						userName_tJDBCConnection_1, password_tJDBCConnection_1,
						sharedConnectionName_tJDBCConnection_1);

				conn_tJDBCConnection_1.setAutoCommit(false);

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());
				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */
				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */
				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tJDBCInput_6Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public static class dc_aggregate_dateStruct implements
			routines.system.IPersistableRow<dc_aggregate_dateStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String var_name;

		public String getVar_name() {
			return this.var_name;
		}

		public String var_value;

		public String getVar_value() {
			return this.var_value;
		}

		public java.util.Date var_datetime;

		public java.util.Date getVar_datetime() {
			return this.var_datetime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.var_name = readString(dis);

					this.var_value = readString(dis);

					this.var_datetime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.var_name, dos);

				// String

				writeString(this.var_value, dos);

				// java.util.Date

				writeDate(this.var_datetime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("var_name=" + var_name);
			sb.append(",var_value=" + var_value);
			sb.append(",var_datetime=" + String.valueOf(var_datetime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dc_aggregate_dateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String var_name;

		public String getVar_name() {
			return this.var_name;
		}

		public String var_value;

		public String getVar_value() {
			return this.var_value;
		}

		public java.util.Date var_datetime;

		public java.util.Date getVar_datetime() {
			return this.var_datetime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.var_name = readString(dis);

					this.var_value = readString(dis);

					this.var_datetime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.var_name, dos);

				// String

				writeString(this.var_value, dos);

				// java.util.Date

				writeDate(this.var_datetime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("var_name=" + var_name);
			sb.append(",var_value=" + var_value);
			sb.append(",var_datetime=" + String.valueOf(var_datetime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				dc_aggregate_dateStruct dc_aggregate_date = new dc_aggregate_dateStruct();

				/**
				 * [tJDBCOutput_6 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_6", false);
				start_Hash.put("tJDBCOutput_6", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_6";

				int tos_count_tJDBCOutput_6 = 0;

				int updateKeyCount_tJDBCOutput_6 = 1;
				if (updateKeyCount_tJDBCOutput_6 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_6 = 0;
				int nb_line_update_tJDBCOutput_6 = 0;
				int nb_line_inserted_tJDBCOutput_6 = 0;
				int nb_line_deleted_tJDBCOutput_6 = 0;
				int nb_line_rejected_tJDBCOutput_6 = 0;

				int deletedCount_tJDBCOutput_6 = 0;
				int updatedCount_tJDBCOutput_6 = 0;
				int insertedCount_tJDBCOutput_6 = 0;
				int rejectedCount_tJDBCOutput_6 = 0;

				boolean whetherReject_tJDBCOutput_6 = false;

				java.sql.Connection connection_tJDBCOutput_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_6 = 10000;
				int batchSizeCounter_tJDBCOutput_6 = 0;

				String update_tJDBCOutput_6 = "UPDATE "
						+ "history_configuration"
						+ " SET var_value = ?,var_datetime = ? WHERE var_name = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_6 = connection_tJDBCOutput_6
						.prepareStatement(update_tJDBCOutput_6);

				/**
				 * [tJDBCOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());
				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				dc_aggregate_dateStruct dc_aggregate_date_tmp = new dc_aggregate_dateStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tJDBCInput_6 begin ] start
				 */

				ok_Hash.put("tJDBCInput_6", false);
				start_Hash.put("tJDBCInput_6", System.currentTimeMillis());
				currentComponent = "tJDBCInput_6";

				int tos_count_tJDBCInput_6 = 0;

				int nb_line_tJDBCInput_6 = 0;
				java.sql.Connection conn_tJDBCInput_6 = null;
				conn_tJDBCInput_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_6 = conn_tJDBCInput_6
						.createStatement();

				String dbquery_tJDBCInput_6 = "SELECT *  FROM history_configuration  WHERE var_name = 'lastHourAggr'";

				globalMap.put("tJDBCInput_6_QUERY", dbquery_tJDBCInput_6);

				java.sql.ResultSet rs_tJDBCInput_6 = stmt_tJDBCInput_6
						.executeQuery(dbquery_tJDBCInput_6);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_6 = rs_tJDBCInput_6
						.getMetaData();
				int colQtyInRs_tJDBCInput_6 = rsmd_tJDBCInput_6
						.getColumnCount();

				String tmpContent_tJDBCInput_6 = null;
				while (rs_tJDBCInput_6.next()) {
					nb_line_tJDBCInput_6++;

					if (colQtyInRs_tJDBCInput_6 < 1) {
						row11.var_name = null;
					} else {

						tmpContent_tJDBCInput_6 = rs_tJDBCInput_6.getString(1);
						if (tmpContent_tJDBCInput_6 != null) {
							row11.var_name = tmpContent_tJDBCInput_6;
						} else {
							row11.var_name = null;
						}

					}
					if (colQtyInRs_tJDBCInput_6 < 2) {
						row11.var_value = null;
					} else {

						tmpContent_tJDBCInput_6 = rs_tJDBCInput_6.getString(2);
						if (tmpContent_tJDBCInput_6 != null) {
							row11.var_value = tmpContent_tJDBCInput_6;
						} else {
							row11.var_value = null;
						}

						if (rs_tJDBCInput_6.wasNull()) {
							row11.var_value = null;
						}
					}
					if (colQtyInRs_tJDBCInput_6 < 3) {
						row11.var_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_6 = null;
						try {
							date_tJDBCInput_6 = rs_tJDBCInput_6.getTimestamp(3);
						} catch (Exception e) {
							date_tJDBCInput_6 = rs_tJDBCInput_6.getDate(3);
						}
						row11.var_datetime = date_tJDBCInput_6;

						if (rs_tJDBCInput_6.wasNull()) {
							row11.var_datetime = null;
						}
					}

					/**
					 * [tJDBCInput_6 begin ] stop
					 */
					/**
					 * [tJDBCInput_6 main ] start
					 */

					currentComponent = "tJDBCInput_6";

					tos_count_tJDBCInput_6++;

					/**
					 * [tJDBCInput_6 main ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						dc_aggregate_date = null;

						// # Output table : 'dc_aggregate_date'
						dc_aggregate_date_tmp.var_name = row11.var_name;
						dc_aggregate_date_tmp.var_value = row11.var_value;
						dc_aggregate_date_tmp.var_datetime = TalendDate
								.addDate(routines.RoutineHistoryETL
										.startOfHour(context.runTime), -1, "HH");
						dc_aggregate_date = dc_aggregate_date_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */
					// Start of branch "dc_aggregate_date"
					if (dc_aggregate_date != null) {

						/**
						 * [tJDBCOutput_6 main ] start
						 */

						currentComponent = "tJDBCOutput_6";

						whetherReject_tJDBCOutput_6 = false;
						if (dc_aggregate_date.var_value == null) {
							pstmt_tJDBCOutput_6.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_6.setString(1,
									dc_aggregate_date.var_value);
						}

						if (dc_aggregate_date.var_datetime != null) {
							pstmt_tJDBCOutput_6.setTimestamp(2,
									new java.sql.Timestamp(
											dc_aggregate_date.var_datetime
													.getTime()));
						} else {
							pstmt_tJDBCOutput_6.setNull(2, java.sql.Types.DATE);
						}

						if (dc_aggregate_date.var_name == null) {
							pstmt_tJDBCOutput_6.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_6.setString(3,
									dc_aggregate_date.var_name);
						}

						try {
							updatedCount_tJDBCOutput_6 = updatedCount_tJDBCOutput_6
									+ pstmt_tJDBCOutput_6.executeUpdate();
							nb_line_tJDBCOutput_6++;
						} catch (Exception e) {
							whetherReject_tJDBCOutput_6 = true;
							throw (e);
						}

						tos_count_tJDBCOutput_6++;

						/**
						 * [tJDBCOutput_6 main ] stop
						 */

					} // End of branch "dc_aggregate_date"

					/**
					 * [tJDBCInput_6 end ] start
					 */

					currentComponent = "tJDBCInput_6";

				}
				stmt_tJDBCInput_6.close();

				globalMap.put("tJDBCInput_6_NB_LINE", nb_line_tJDBCInput_6);

				ok_Hash.put("tJDBCInput_6", true);
				end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				/**
				 * [tJDBCInput_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tJDBCOutput_6 end ] start
				 */

				currentComponent = "tJDBCOutput_6";

				if (pstmt_tJDBCOutput_6 != null) {

					pstmt_tJDBCOutput_6.close();

				}

				nb_line_deleted_tJDBCOutput_6 = nb_line_deleted_tJDBCOutput_6
						+ deletedCount_tJDBCOutput_6;
				nb_line_update_tJDBCOutput_6 = nb_line_update_tJDBCOutput_6
						+ updatedCount_tJDBCOutput_6;
				nb_line_inserted_tJDBCOutput_6 = nb_line_inserted_tJDBCOutput_6
						+ insertedCount_tJDBCOutput_6;
				nb_line_rejected_tJDBCOutput_6 = nb_line_rejected_tJDBCOutput_6
						+ rejectedCount_tJDBCOutput_6;

				globalMap.put("tJDBCOutput_6_NB_LINE", nb_line_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_6);

				ok_Hash.put("tJDBCOutput_6", true);
				end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_6 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String disks_usage;

		public String getDisks_usage() {
			return this.disks_usage;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.disks_usage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.disks_usage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",disks_usage=" + disks_usage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_8 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_8> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String disks_usage;

		public String getDisks_usage() {
			return this.disks_usage;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.disks_usage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.disks_usage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",disks_usage=" + disks_usage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_8 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class vm_disks_usage_aggregate_historyStruct
			implements
			routines.system.IPersistableRow<vm_disks_usage_aggregate_historyStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String disks_usage;

		public String getDisks_usage() {
			return this.disks_usage;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.disks_usage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.disks_usage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",disks_usage=" + disks_usage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_disks_usage_aggregate_historyStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date history_datetime;

		public java.util.Date getHistory_datetime() {
			return this.history_datetime;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String disks_usage;

		public String getDisks_usage() {
			return this.disks_usage;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.history_datetime = readDate(dis);

					this.vm_id = (Object) dis.readObject();

					this.disks_usage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.history_datetime, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.disks_usage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_datetime=" + String.valueOf(history_datetime));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",disks_usage=" + disks_usage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				vm_disks_usage_aggregate_historyStruct vm_disks_usage_aggregate_history = new vm_disks_usage_aggregate_historyStruct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tAggregateRow_8_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_8_AGGOUT", false);
				start_Hash.put("tAggregateRow_8_AGGOUT", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_8_AGGOUT";

				int tos_count_tAggregateRow_8_AGGOUT = 0;

				// ------------

				java.util.Map hashAggreg_tAggregateRow_8 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_8 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'int/Integer'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) Float.MIN_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > b) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a), String
														.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < Double.MIN_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_8 utilClass_tAggregateRow_8 = new UtilClass_tAggregateRow_8();

				class AggOperationStruct_tAggregateRow_8 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date history_datetime;
					Object vm_id;
					String disks_usage_last;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.history_datetime == null) ? 0
											: this.history_datetime.hashCode());

							result = prime
									* result
									+ ((this.vm_id == null) ? 0 : this.vm_id
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_8 other = (AggOperationStruct_tAggregateRow_8) obj;

						if (this.history_datetime == null) {
							if (other.history_datetime != null)
								return false;
						} else if (!this.history_datetime
								.equals(other.history_datetime))
							return false;

						if (this.vm_id == null) {
							if (other.vm_id != null)
								return false;
						} else if (!this.vm_id.equals(other.vm_id))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_8 operation_result_tAggregateRow_8 = null;
				AggOperationStruct_tAggregateRow_8 operation_finder_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();
				java.util.Map<AggOperationStruct_tAggregateRow_8, AggOperationStruct_tAggregateRow_8> hash_tAggregateRow_8 = new java.util.HashMap<AggOperationStruct_tAggregateRow_8, AggOperationStruct_tAggregateRow_8>();

				/**
				 * [tAggregateRow_8_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());
				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_disks_usage_aggregate_historyStruct vm_disks_usage_aggregate_history_tmp = new vm_disks_usage_aggregate_historyStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tJDBCInput_9 begin ] start
				 */

				ok_Hash.put("tJDBCInput_9", false);
				start_Hash.put("tJDBCInput_9", System.currentTimeMillis());
				currentComponent = "tJDBCInput_9";

				int tos_count_tJDBCInput_9 = 0;

				int nb_line_tJDBCInput_9 = 0;
				java.sql.Connection conn_tJDBCInput_9 = null;
				conn_tJDBCInput_9 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_9 = conn_tJDBCInput_9
						.createStatement();

				String dbquery_tJDBCInput_9 = "SELECT     history_datetime,     vm_id,     disks_usage  FROM vm_disks_usage_samples_history  WHERE history_datetime > (SELECT var_datetime  						  FROM history_configuration  						  WHERE var_name = 'lastDayAggr')  ORDER BY history_datetime,        	 vm_id";

				globalMap.put("tJDBCInput_9_QUERY", dbquery_tJDBCInput_9);

				java.sql.ResultSet rs_tJDBCInput_9 = stmt_tJDBCInput_9
						.executeQuery(dbquery_tJDBCInput_9);
				java.sql.ResultSetMetaData rsmd_tJDBCInput_9 = rs_tJDBCInput_9
						.getMetaData();
				int colQtyInRs_tJDBCInput_9 = rsmd_tJDBCInput_9
						.getColumnCount();

				String tmpContent_tJDBCInput_9 = null;
				while (rs_tJDBCInput_9.next()) {
					nb_line_tJDBCInput_9++;

					if (colQtyInRs_tJDBCInput_9 < 1) {
						row12.history_datetime = null;
					} else {

						java.util.Date date_tJDBCInput_9 = null;
						try {
							date_tJDBCInput_9 = rs_tJDBCInput_9.getTimestamp(1);
						} catch (Exception e) {
							date_tJDBCInput_9 = rs_tJDBCInput_9.getDate(1);
						}
						row12.history_datetime = date_tJDBCInput_9;

					}
					if (colQtyInRs_tJDBCInput_9 < 2) {
						row12.vm_id = null;
					} else {

						if (rs_tJDBCInput_9.getObject(2) != null) {
							row12.vm_id = rs_tJDBCInput_9.getObject(2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tJDBCInput_9 < 3) {
						row12.disks_usage = null;
					} else {

						tmpContent_tJDBCInput_9 = rs_tJDBCInput_9.getString(3);
						if (tmpContent_tJDBCInput_9 != null) {
							row12.disks_usage = tmpContent_tJDBCInput_9;
						} else {
							row12.disks_usage = null;
						}

						if (rs_tJDBCInput_9.wasNull()) {
							row12.disks_usage = null;
						}
					}

					/**
					 * [tJDBCInput_9 begin ] stop
					 */
					/**
					 * [tJDBCInput_9 main ] start
					 */

					currentComponent = "tJDBCInput_9";

					tos_count_tJDBCInput_9++;

					/**
					 * [tJDBCInput_9 main ] stop
					 */

					/**
					 * [tMap_9 main ] start
					 */

					currentComponent = "tMap_9";

					boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_9 = false;
					boolean mainRowRejected_tMap_9 = false;

					if (

					(

					routines.RoutineHistoryETL.dateCompare(
							row12.history_datetime, routines.RoutineHistoryETL
									.manipulateDate(routines.RoutineHistoryETL
											.startOfDay(context.runTime), -1,
											"dd")) <= 0

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row12'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							vm_disks_usage_aggregate_history = null;

							// # Output table :
							// 'vm_disks_usage_aggregate_history'
							vm_disks_usage_aggregate_history_tmp.history_datetime = RoutineHistoryETL
									.startOfHour(row12.history_datetime);
							vm_disks_usage_aggregate_history_tmp.vm_id = row12.vm_id;
							vm_disks_usage_aggregate_history_tmp.disks_usage = row12.disks_usage;
							vm_disks_usage_aggregate_history = vm_disks_usage_aggregate_history_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_9 = false;

						tos_count_tMap_9++;

						/**
						 * [tMap_9 main ] stop
						 */
						// Start of branch "vm_disks_usage_aggregate_history"
						if (vm_disks_usage_aggregate_history != null) {

							/**
							 * [tAggregateRow_8_AGGOUT main ] start
							 */

							currentComponent = "tAggregateRow_8_AGGOUT";

							operation_finder_tAggregateRow_8.history_datetime = vm_disks_usage_aggregate_history.history_datetime;
							operation_finder_tAggregateRow_8.vm_id = vm_disks_usage_aggregate_history.vm_id;

							operation_finder_tAggregateRow_8.hashCodeDirty = true;

							operation_result_tAggregateRow_8 = hash_tAggregateRow_8
									.get(operation_finder_tAggregateRow_8);

							boolean isFirstAdd_tAggregateRow_8 = false;

							if (operation_result_tAggregateRow_8 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();

								operation_result_tAggregateRow_8.history_datetime = operation_finder_tAggregateRow_8.history_datetime;
								operation_result_tAggregateRow_8.vm_id = operation_finder_tAggregateRow_8.vm_id;

								isFirstAdd_tAggregateRow_8 = true;

								hash_tAggregateRow_8.put(
										operation_result_tAggregateRow_8,
										operation_result_tAggregateRow_8);

							} // G_OutMain_AggR_001

							if (vm_disks_usage_aggregate_history.disks_usage != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_8.disks_usage_last = vm_disks_usage_aggregate_history.disks_usage;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_8_AGGOUT++;

							/**
							 * [tAggregateRow_8_AGGOUT main ] stop
							 */

						} // End of branch "vm_disks_usage_aggregate_history"

					} // G_TM_M_280 close main tMap filter for table 'row12'

					/**
					 * [tJDBCInput_9 end ] start
					 */

					currentComponent = "tJDBCInput_9";

				}
				stmt_tJDBCInput_9.close();

				globalMap.put("tJDBCInput_9_NB_LINE", nb_line_tJDBCInput_9);

				ok_Hash.put("tJDBCInput_9", true);
				end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

				/**
				 * [tJDBCInput_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGOUT end ] start
				 */

				currentComponent = "tAggregateRow_8_AGGOUT";

				ok_Hash.put("tAggregateRow_8_AGGOUT", true);
				end_Hash.put("tAggregateRow_8_AGGOUT", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_8_AGGOUT end ] stop
				 */

				/**
				 * [tJDBCOutput_9 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_9", false);
				start_Hash.put("tJDBCOutput_9", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_9";

				int tos_count_tJDBCOutput_9 = 0;

				int nb_line_tJDBCOutput_9 = 0;
				int nb_line_update_tJDBCOutput_9 = 0;
				int nb_line_inserted_tJDBCOutput_9 = 0;
				int nb_line_deleted_tJDBCOutput_9 = 0;
				int nb_line_rejected_tJDBCOutput_9 = 0;

				int deletedCount_tJDBCOutput_9 = 0;
				int updatedCount_tJDBCOutput_9 = 0;
				int insertedCount_tJDBCOutput_9 = 0;
				int rejectedCount_tJDBCOutput_9 = 0;

				boolean whetherReject_tJDBCOutput_9 = false;

				java.sql.Connection connection_tJDBCOutput_9 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				int batchSize_tJDBCOutput_9 = 10000;
				int batchSizeCounter_tJDBCOutput_9 = 0;

				String insert_tJDBCOutput_9 = "INSERT INTO "
						+ "vm_disks_usage_hourly_history"
						+ " (history_datetime,vm_id,disks_usage) VALUES (?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_9 = connection_tJDBCOutput_9
						.prepareStatement(insert_tJDBCOutput_9);

				/**
				 * [tJDBCOutput_9 begin ] stop
				 */

				/**
				 * [tAggregateRow_8_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_8_AGGIN", false);
				start_Hash.put("tAggregateRow_8_AGGIN", System
						.currentTimeMillis());
				currentComponent = "tAggregateRow_8_AGGIN";

				int tos_count_tAggregateRow_8_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_8> values_tAggregateRow_8 = hash_tAggregateRow_8
						.values();

				globalMap.put("tAggregateRow_8_NB_LINE", values_tAggregateRow_8
						.size());

				for (AggOperationStruct_tAggregateRow_8 aggregated_row_tAggregateRow_8 : values_tAggregateRow_8) { // G_AggR_600

					/**
					 * [tAggregateRow_8_AGGIN begin ] stop
					 */
					/**
					 * [tAggregateRow_8_AGGIN main ] start
					 */

					currentComponent = "tAggregateRow_8_AGGIN";

					row13.history_datetime = aggregated_row_tAggregateRow_8.history_datetime;

					row13.vm_id = aggregated_row_tAggregateRow_8.vm_id;

					row13.disks_usage = aggregated_row_tAggregateRow_8.disks_usage_last;

					tos_count_tAggregateRow_8_AGGIN++;

					/**
					 * [tAggregateRow_8_AGGIN main ] stop
					 */

					/**
					 * [tJDBCOutput_9 main ] start
					 */

					currentComponent = "tJDBCOutput_9";

					whetherReject_tJDBCOutput_9 = false;
					if (row13.history_datetime != null) {
						pstmt_tJDBCOutput_9.setTimestamp(1,
								new java.sql.Timestamp(row13.history_datetime
										.getTime()));
					} else {
						pstmt_tJDBCOutput_9.setNull(1, java.sql.Types.DATE);
					}

					if (row13.vm_id == null) {
						pstmt_tJDBCOutput_9.setNull(2, java.sql.Types.OTHER);
					} else {
						pstmt_tJDBCOutput_9.setObject(2, row13.vm_id);
					}

					if (row13.disks_usage == null) {
						pstmt_tJDBCOutput_9.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_9.setString(3, row13.disks_usage);
					}

					try {
						insertedCount_tJDBCOutput_9 = insertedCount_tJDBCOutput_9
								+ pstmt_tJDBCOutput_9.executeUpdate();
						nb_line_tJDBCOutput_9++;
					} catch (Exception e) {
						whetherReject_tJDBCOutput_9 = true;
						throw (e);
					}

					tos_count_tJDBCOutput_9++;

					/**
					 * [tJDBCOutput_9 main ] stop
					 */

					/**
					 * [tAggregateRow_8_AGGIN end ] start
					 */

					currentComponent = "tAggregateRow_8_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_8_AGGIN", true);
				end_Hash.put("tAggregateRow_8_AGGIN", System
						.currentTimeMillis());

				/**
				 * [tAggregateRow_8_AGGIN end ] stop
				 */

				/**
				 * [tJDBCOutput_9 end ] start
				 */

				currentComponent = "tJDBCOutput_9";

				if (pstmt_tJDBCOutput_9 != null) {

					pstmt_tJDBCOutput_9.close();

				}

				nb_line_deleted_tJDBCOutput_9 = nb_line_deleted_tJDBCOutput_9
						+ deletedCount_tJDBCOutput_9;
				nb_line_update_tJDBCOutput_9 = nb_line_update_tJDBCOutput_9
						+ updatedCount_tJDBCOutput_9;
				nb_line_inserted_tJDBCOutput_9 = nb_line_inserted_tJDBCOutput_9
						+ insertedCount_tJDBCOutput_9;
				nb_line_rejected_tJDBCOutput_9 = nb_line_rejected_tJDBCOutput_9
						+ rejectedCount_tJDBCOutput_9;

				globalMap.put("tJDBCOutput_9_NB_LINE", nb_line_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_9);

				ok_Hash.put("tJDBCOutput_9", true);
				end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_9 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tAggregateRow_8_AGGIN"
			globalMap.put("tAggregateRow_8", null);

		}

		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_CONSOLE begin ] start
				 */

				ok_Hash.put("talendLogs_CONSOLE", false);
				start_Hash
						.put("talendLogs_CONSOLE", System.currentTimeMillis());
				currentComponent = "talendLogs_CONSOLE";

				int tos_count_talendLogs_CONSOLE = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
				java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

				StringBuilder strBuffer_talendLogs_CONSOLE = null;
				int nb_line_talendLogs_CONSOLE = 0;
				// /////////////////////

				/**
				 * [talendLogs_CONSOLE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
						.getMessages()) {
					row_talendLogs_LOGS.type = lcm.getType();
					row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row_talendLogs_LOGS.priority = lcm.getPriority();
					row_talendLogs_LOGS.message = lcm.getMessage();
					row_talendLogs_LOGS.code = lcm.getCode();

					row_talendLogs_LOGS.moment = java.util.Calendar
							.getInstance().getTime();

					row_talendLogs_LOGS.pid = pid;
					row_talendLogs_LOGS.root_pid = rootPid;
					row_talendLogs_LOGS.father_pid = fatherPid;

					row_talendLogs_LOGS.project = projectName;
					row_talendLogs_LOGS.job = jobName;
					row_talendLogs_LOGS.context = contextStr;

					/**
					 * [talendLogs_LOGS begin ] stop
					 */
					/**
					 * [talendLogs_LOGS main ] start
					 */

					currentComponent = "talendLogs_LOGS";

					tos_count_talendLogs_LOGS++;

					/**
					 * [talendLogs_LOGS main ] stop
					 */

					/**
					 * [talendLogs_CONSOLE main ] start
					 */

					currentComponent = "talendLogs_CONSOLE";

					// /////////////////////

					strBuffer_talendLogs_CONSOLE = new StringBuilder();

					if (row_talendLogs_LOGS.moment != null) { //

						strBuffer_talendLogs_CONSOLE.append(FormatterUtils
								.format_Date(row_talendLogs_LOGS.moment,
										"yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.root_pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.root_pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.father_pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.father_pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.project != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.project));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.job != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.job));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.context != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.context));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.priority != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.priority));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.type != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.type));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.origin != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.origin));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.message != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.message));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.code != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.code));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE",
								consoleOut_talendLogs_CONSOLE);
					}

					consoleOut_talendLogs_CONSOLE
							.println(strBuffer_talendLogs_CONSOLE.toString());
					consoleOut_talendLogs_CONSOLE.flush();
					nb_line_talendLogs_CONSOLE++;
					// ////

					// ////

					// /////////////////////

					tos_count_talendLogs_CONSOLE++;

					/**
					 * [talendLogs_CONSOLE main ] stop
					 */

					/**
					 * [talendLogs_LOGS end ] start
					 */

					currentComponent = "talendLogs_LOGS";

				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_CONSOLE end ] start
				 */

				currentComponent = "talendLogs_CONSOLE";

				// ////
				// ////
				globalMap.put("talendLogs_CONSOLE_NB_LINE",
						nb_line_talendLogs_CONSOLE);

				// /////////////////////

				ok_Hash.put("talendLogs_CONSOLE", true);
				end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				/**
				 * [talendLogs_CONSOLE end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}
	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final AggregationToHourly AggregationToHourlyClass = new AggregationToHourly();

		int exitCode = AggregationToHourlyClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = AggregationToHourly.class
					.getClassLoader().getResourceAsStream(
							"ovirt_dwh/aggregationtohourly_3_0/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}

				if (!context_param.isEmpty()) {
					context.putAll(context_param);
				}

				context.ovirtHistoryJdbcConnection = (String) context
						.getProperty("ovirtHistoryJdbcConnection");

				context.ovirtHistoryDriverClass = (String) context
						.getProperty("ovirtHistoryDriverClass");

				context.ovirtHistoryPassword = (java.lang.String) context
						.getProperty("ovirtHistoryPassword");

				context.ovirtHistoryUser = (String) context
						.getProperty("ovirtHistoryUser");

				try {
					String context_runTime_value = context
							.getProperty("runTime");
					if (context_runTime_value == null) {
						context_runTime_value = "";
					}
					int context_runTime_pos = context_runTime_value
							.indexOf(";");
					String context_runTime_pattern = "yyyy-MM-dd HH:mm:ss";
					if (context_runTime_pos > -1) {
						context_runTime_pattern = context_runTime_value
								.substring(0, context_runTime_pos);
						context_runTime_value = context_runTime_value
								.substring(context_runTime_pos + 1);
					}

					context.runTime = (java.util.Date) (new java.text.SimpleDateFormat(
							context_runTime_pattern)
							.parse(context_runTime_value));

				} catch (ParseException e) {
					context.runTime = null;
				}

			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ovirtHistoryJdbcConnection")) {
				context.ovirtHistoryJdbcConnection = (String) parentContextMap
						.get("ovirtHistoryJdbcConnection");
			}
			if (parentContextMap.containsKey("ovirtHistoryDriverClass")) {
				context.ovirtHistoryDriverClass = (String) parentContextMap
						.get("ovirtHistoryDriverClass");
			}
			if (parentContextMap.containsKey("ovirtHistoryPassword")) {
				context.ovirtHistoryPassword = (java.lang.String) parentContextMap
						.get("ovirtHistoryPassword");
			}
			if (parentContextMap.containsKey("ovirtHistoryUser")) {
				context.ovirtHistoryUser = (String) parentContextMap
						.get("ovirtHistoryUser");
			}
			if (parentContextMap.containsKey("runTime")) {
				context.runTime = (java.util.Date) parentContextMap
						.get("runTime");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			status = "failure";
			e_tPrejob_1.printStackTrace();
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_1Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_1) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_1.printStackTrace();
					globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_2Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_2) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_2.printStackTrace();
					globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_3Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_3) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_3.printStackTrace();
					globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_4Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_4) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_4.printStackTrace();
					globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_5Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_5) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_5.printStackTrace();
					globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_11Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_11) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_11.printStackTrace();
					globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_13Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_13) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_13.printStackTrace();
					globalMap.put("tJDBCInput_13_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_9Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJDBCInput_9) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJDBCInput_9.printStackTrace();
					globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			status = "failure";
			e_tPostjob_1.printStackTrace();
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : AggregationToHourly");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index),
						replaceEscapeChars(keyValue.substring(index + 1)));
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 578664 characters generated by Talend Open Studio for Data Integration on the
 * December 21, 2011 12:33:30 PM IST
 ************************************************************************************************/
