// ============================================================================
//
// Copyright (c) 2005-2010, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.0.1.r74687)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package ovirt_dwh.historyetl_3_0;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.RoutineHistoryETL;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

/**
 * Job: HistoryETL Purpose: <br>
 * Description: <br>
 * 
 * @author ydary@redhat.com
 * @version 5.0.1.r74687
 * @status
 */
public class HistoryETL implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (hoursToKeepDaily != null) {

				this.setProperty("hoursToKeepDaily", hoursToKeepDaily
						.toString());

			}

			if (hoursToKeepHourly != null) {

				this.setProperty("hoursToKeepHourly", hoursToKeepHourly
						.toString());

			}

			if (hoursToKeepSamples != null) {

				this.setProperty("hoursToKeepSamples", hoursToKeepSamples
						.toString());

			}

			if (lastErrorSent != null) {

				String pattern_lastErrorSent = "yyyy-MM-dd HH:mm:ss";
				String value_lastErrorSent = "yyyy-MM-dd HH:mm:ss;0200-01-01 00:00:00";
				String[] parts_lastErrorSent = value_lastErrorSent.split(";");
				if (parts_lastErrorSent.length > 1) {
					pattern_lastErrorSent = parts_lastErrorSent[0];
					this.setProperty("lastErrorSent", pattern_lastErrorSent
							+ ";"
							+ FormatterUtils.format_Date(lastErrorSent,
									pattern_lastErrorSent));
				} else {
					this.setProperty("lastErrorSent", FormatterUtils
							.format_Date(lastErrorSent, pattern_lastErrorSent));
				}

			}

			if (ovirtEngineDbDriverClass != null) {

				this.setProperty("ovirtEngineDbDriverClass",
						ovirtEngineDbDriverClass.toString());

			}

			if (ovirtEngineDbJdbcConnection != null) {

				this.setProperty("ovirtEngineDbJdbcConnection",
						ovirtEngineDbJdbcConnection.toString());

			}

			if (ovirtEngineDbPassword != null) {

				this.setProperty("ovirtEngineDbPassword", ovirtEngineDbPassword
						.toString());

			}

			if (ovirtEngineDbUser != null) {

				this.setProperty("ovirtEngineDbUser", ovirtEngineDbUser
						.toString());

			}

			if (ovirtEnginePortalAddress != null) {

				this.setProperty("ovirtEnginePortalAddress",
						ovirtEnginePortalAddress.toString());

			}

			if (ovirtEnginePortalConnectionProtocol != null) {

				this.setProperty("ovirtEnginePortalConnectionProtocol",
						ovirtEnginePortalConnectionProtocol.toString());

			}

			if (ovirtEnginePortalPort != null) {

				this.setProperty("ovirtEnginePortalPort", ovirtEnginePortalPort
						.toString());

			}

			if (ovirtHistoryDbDriverClass != null) {

				this.setProperty("ovirtHistoryDbDriverClass",
						ovirtHistoryDbDriverClass.toString());

			}

			if (ovirtHistoryDbJdbcConnection != null) {

				this.setProperty("ovirtHistoryDbJdbcConnection",
						ovirtHistoryDbJdbcConnection.toString());

			}

			if (ovirtHistoryDbPassword != null) {

				this.setProperty("ovirtHistoryDbPassword",
						ovirtHistoryDbPassword.toString());

			}

			if (ovirtHistoryDbUser != null) {

				this.setProperty("ovirtHistoryDbUser", ovirtHistoryDbUser
						.toString());

			}

			if (runDeleteTime != null) {

				this.setProperty("runDeleteTime", runDeleteTime.toString());

			}

			if (runInterleave != null) {

				this.setProperty("runInterleave", runInterleave.toString());

			}

		}

		public Integer hoursToKeepDaily;

		public Integer getHoursToKeepDaily() {
			return this.hoursToKeepDaily;
		}

		public Integer hoursToKeepHourly;

		public Integer getHoursToKeepHourly() {
			return this.hoursToKeepHourly;
		}

		public Integer hoursToKeepSamples;

		public Integer getHoursToKeepSamples() {
			return this.hoursToKeepSamples;
		}

		public java.util.Date lastErrorSent;

		public java.util.Date getLastErrorSent() {
			return this.lastErrorSent;
		}

		public String ovirtEngineDbDriverClass;

		public String getOvirtEngineDbDriverClass() {
			return this.ovirtEngineDbDriverClass;
		}

		public String ovirtEngineDbJdbcConnection;

		public String getOvirtEngineDbJdbcConnection() {
			return this.ovirtEngineDbJdbcConnection;
		}

		public java.lang.String ovirtEngineDbPassword;

		public java.lang.String getOvirtEngineDbPassword() {
			return this.ovirtEngineDbPassword;
		}

		public String ovirtEngineDbUser;

		public String getOvirtEngineDbUser() {
			return this.ovirtEngineDbUser;
		}

		public String ovirtEnginePortalAddress;

		public String getOvirtEnginePortalAddress() {
			return this.ovirtEnginePortalAddress;
		}

		public String ovirtEnginePortalConnectionProtocol;

		public String getOvirtEnginePortalConnectionProtocol() {
			return this.ovirtEnginePortalConnectionProtocol;
		}

		public String ovirtEnginePortalPort;

		public String getOvirtEnginePortalPort() {
			return this.ovirtEnginePortalPort;
		}

		public String ovirtHistoryDbDriverClass;

		public String getOvirtHistoryDbDriverClass() {
			return this.ovirtHistoryDbDriverClass;
		}

		public String ovirtHistoryDbJdbcConnection;

		public String getOvirtHistoryDbJdbcConnection() {
			return this.ovirtHistoryDbJdbcConnection;
		}

		public java.lang.String ovirtHistoryDbPassword;

		public java.lang.String getOvirtHistoryDbPassword() {
			return this.ovirtHistoryDbPassword;
		}

		public String ovirtHistoryDbUser;

		public String getOvirtHistoryDbUser() {
			return this.ovirtHistoryDbUser;
		}

		public Integer runDeleteTime;

		public Integer getRunDeleteTime() {
			return this.runDeleteTime;
		}

		public Integer runInterleave;

		public Integer getRunInterleave() {
			return this.runInterleave;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "3.0";
	private final String jobName = "HistoryETL";
	private final String projectName = "OVIRT_DWH";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	public boolean isExportedAsOSGI = false;

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {
		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					HistoryETL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(HistoryETL.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						try {
							tLogCatcher_1Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_4", System.currentTimeMillis());

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostjob_1", System.currentTimeMillis());

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCRollback_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRollback_1", System.currentTimeMillis());

		tJDBCRollback_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCRollback_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRollback_2", System.currentTimeMillis());

		tJDBCRollback_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCRollback_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRollback_3", System.currentTimeMillis());

		tJDBCRollback_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCRollback_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRollback_4", System.currentTimeMillis());

		tJDBCRollback_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCRollback_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRollback_5", System.currentTimeMillis());

		tJDBCRollback_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRowGenerator_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRowGenerator_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_5", System.currentTimeMillis());

		tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

		tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCRollback_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRollback_6", System.currentTimeMillis());

		tJDBCRollback_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRowGenerator_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_2", System.currentTimeMillis());

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputProperties_1", System.currentTimeMillis());

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tContextLoad_1", System.currentTimeMillis());

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);

	}

	public void tJDBCConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

		tJDBCConnection_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCConnection_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_6", System.currentTimeMillis());

		tJDBCConnection_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRowGenerator_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_6", System.currentTimeMillis());

		tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

		tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

		tJDBCConnection_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCConnection_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

		tJDBCConnection_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCConnection_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_5", System.currentTimeMillis());

		tJDBCConnection_5_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tWaitForFile_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tWaitForFile_1", System.currentTimeMillis());

		tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		tJava_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		try {

			((java.util.Map) threadLocal.get()).put("errorCode", null);
			((java.util.Map) threadLocal.get()).put("status", "failure");
			tRowGenerator_4Process(globalMap);

		} catch (Exception e) {
			e.printStackTrace();
		}

		tJava_3_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRowGenerator_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_4", System.currentTimeMillis());

		tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_4", System.currentTimeMillis());

		tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_4", System.currentTimeMillis());

		tJava_4_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tContextLoad_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tContextLoad_2", System.currentTimeMillis());

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tJDBCOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);

	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);

	}

	public void talendLogs_CONSOLE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tRunJob_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRollback_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRollback_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRollback_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRollback_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRollback_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRollback_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tWaitForFile_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "ERROR", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

		try {

			((java.util.Map) threadLocal.get()).put("errorCode", null);
			((java.util.Map) threadLocal.get()).put("status", "failure");
			tJava_2Process(globalMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());
				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */
				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_4 = context
						.propertyNames();
				while (propertyNames_tRunJob_4.hasMoreElements()) {
					String key_tRunJob_4 = (String) propertyNames_tRunJob_4
							.nextElement();
					Object value_tRunJob_4 = (Object) context
							.get(key_tRunJob_4);
					paraList_tRunJob_4.add("--context_param " + key_tRunJob_4
							+ "=" + value_tRunJob_4);
				}

				parentContextMap_tRunJob_4.put("hoursToKeepDaily",
						context.hoursToKeepDaily);
				parentContextMap_tRunJob_4.put("hoursToKeepHourly",
						context.hoursToKeepHourly);
				parentContextMap_tRunJob_4.put("hoursToKeepSamples",
						context.hoursToKeepSamples);
				parentContextMap_tRunJob_4.put("lastErrorSent",
						context.lastErrorSent);
				parentContextMap_tRunJob_4.put("ovirtEngineDbDriverClass",
						context.ovirtEngineDbDriverClass);
				parentContextMap_tRunJob_4.put("ovirtEngineDbJdbcConnection",
						context.ovirtEngineDbJdbcConnection);
				parentContextMap_tRunJob_4.put("ovirtEngineDbPassword",
						context.ovirtEngineDbPassword);
				parentContextMap_tRunJob_4.put("ovirtEngineDbUser",
						context.ovirtEngineDbUser);
				parentContextMap_tRunJob_4.put("ovirtEnginePortalAddress",
						context.ovirtEnginePortalAddress);
				parentContextMap_tRunJob_4.put(
						"ovirtEnginePortalConnectionProtocol",
						context.ovirtEnginePortalConnectionProtocol);
				parentContextMap_tRunJob_4.put("ovirtEnginePortalPort",
						context.ovirtEnginePortalPort);
				parentContextMap_tRunJob_4.put("ovirtHistoryDbDriverClass",
						context.ovirtHistoryDbDriverClass);
				parentContextMap_tRunJob_4.put("ovirtHistoryDbJdbcConnection",
						context.ovirtHistoryDbJdbcConnection);
				parentContextMap_tRunJob_4.put("ovirtHistoryDbPassword",
						context.ovirtHistoryDbPassword);
				parentContextMap_tRunJob_4.put("ovirtHistoryDbUser",
						context.ovirtHistoryDbUser);
				parentContextMap_tRunJob_4.put("runDeleteTime",
						context.runDeleteTime);
				parentContextMap_tRunJob_4.put("runInterleave",
						context.runInterleave);

				Object obj_tRunJob_4 = null;

				ovirt_dwh.parallelrun_3_0.ParallelRun childJob_tRunJob_4 = new ovirt_dwh.parallelrun_3_0.ParallelRun();
				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));
				((java.util.Map) threadLocal.get()).put("errorCode",
						childJob_tRunJob_4.getErrorCode());

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}
				globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_4.getExceptionStackTrace());

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */
				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());
				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */
				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */
				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tJDBCRollback_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRollback_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRollback_1 begin ] start
				 */

				ok_Hash.put("tJDBCRollback_1", false);
				start_Hash.put("tJDBCRollback_1", System.currentTimeMillis());
				currentComponent = "tJDBCRollback_1";

				int tos_count_tJDBCRollback_1 = 0;

				/**
				 * [tJDBCRollback_1 begin ] stop
				 */
				/**
				 * [tJDBCRollback_1 main ] start
				 */

				currentComponent = "tJDBCRollback_1";

				java.sql.Connection conn_tJDBCRollback_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				if (conn_tJDBCRollback_1 != null
						&& !conn_tJDBCRollback_1.isClosed()) {
					conn_tJDBCRollback_1.rollback();
					conn_tJDBCRollback_1.close();
				}

				tos_count_tJDBCRollback_1++;

				/**
				 * [tJDBCRollback_1 main ] stop
				 */
				/**
				 * [tJDBCRollback_1 end ] start
				 */

				currentComponent = "tJDBCRollback_1";

				ok_Hash.put("tJDBCRollback_1", true);
				end_Hash.put("tJDBCRollback_1", System.currentTimeMillis());

				/**
				 * [tJDBCRollback_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRollback_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRollback_2Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCRollback_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRollback_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRollback_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRollback_2 begin ] start
				 */

				ok_Hash.put("tJDBCRollback_2", false);
				start_Hash.put("tJDBCRollback_2", System.currentTimeMillis());
				currentComponent = "tJDBCRollback_2";

				int tos_count_tJDBCRollback_2 = 0;

				/**
				 * [tJDBCRollback_2 begin ] stop
				 */
				/**
				 * [tJDBCRollback_2 main ] start
				 */

				currentComponent = "tJDBCRollback_2";

				java.sql.Connection conn_tJDBCRollback_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				if (conn_tJDBCRollback_2 != null
						&& !conn_tJDBCRollback_2.isClosed()) {
					conn_tJDBCRollback_2.rollback();
					conn_tJDBCRollback_2.close();
				}

				tos_count_tJDBCRollback_2++;

				/**
				 * [tJDBCRollback_2 main ] stop
				 */
				/**
				 * [tJDBCRollback_2 end ] start
				 */

				currentComponent = "tJDBCRollback_2";

				ok_Hash.put("tJDBCRollback_2", true);
				end_Hash.put("tJDBCRollback_2", System.currentTimeMillis());

				/**
				 * [tJDBCRollback_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRollback_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRollback_3Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCRollback_2_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRollback_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRollback_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRollback_3 begin ] start
				 */

				ok_Hash.put("tJDBCRollback_3", false);
				start_Hash.put("tJDBCRollback_3", System.currentTimeMillis());
				currentComponent = "tJDBCRollback_3";

				int tos_count_tJDBCRollback_3 = 0;

				/**
				 * [tJDBCRollback_3 begin ] stop
				 */
				/**
				 * [tJDBCRollback_3 main ] start
				 */

				currentComponent = "tJDBCRollback_3";

				java.sql.Connection conn_tJDBCRollback_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_3");
				if (conn_tJDBCRollback_3 != null
						&& !conn_tJDBCRollback_3.isClosed()) {
					conn_tJDBCRollback_3.rollback();
					conn_tJDBCRollback_3.close();
				}

				tos_count_tJDBCRollback_3++;

				/**
				 * [tJDBCRollback_3 main ] stop
				 */
				/**
				 * [tJDBCRollback_3 end ] start
				 */

				currentComponent = "tJDBCRollback_3";

				ok_Hash.put("tJDBCRollback_3", true);
				end_Hash.put("tJDBCRollback_3", System.currentTimeMillis());

				/**
				 * [tJDBCRollback_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRollback_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRollback_4Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCRollback_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRollback_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRollback_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRollback_4 begin ] start
				 */

				ok_Hash.put("tJDBCRollback_4", false);
				start_Hash.put("tJDBCRollback_4", System.currentTimeMillis());
				currentComponent = "tJDBCRollback_4";

				int tos_count_tJDBCRollback_4 = 0;

				/**
				 * [tJDBCRollback_4 begin ] stop
				 */
				/**
				 * [tJDBCRollback_4 main ] start
				 */

				currentComponent = "tJDBCRollback_4";

				java.sql.Connection conn_tJDBCRollback_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_4");
				if (conn_tJDBCRollback_4 != null
						&& !conn_tJDBCRollback_4.isClosed()) {
					conn_tJDBCRollback_4.rollback();
					conn_tJDBCRollback_4.close();
				}

				tos_count_tJDBCRollback_4++;

				/**
				 * [tJDBCRollback_4 main ] stop
				 */
				/**
				 * [tJDBCRollback_4 end ] start
				 */

				currentComponent = "tJDBCRollback_4";

				ok_Hash.put("tJDBCRollback_4", true);
				end_Hash.put("tJDBCRollback_4", System.currentTimeMillis());

				/**
				 * [tJDBCRollback_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRollback_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRollback_5Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCRollback_4_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRollback_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRollback_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRollback_5 begin ] start
				 */

				ok_Hash.put("tJDBCRollback_5", false);
				start_Hash.put("tJDBCRollback_5", System.currentTimeMillis());
				currentComponent = "tJDBCRollback_5";

				int tos_count_tJDBCRollback_5 = 0;

				/**
				 * [tJDBCRollback_5 begin ] stop
				 */
				/**
				 * [tJDBCRollback_5 main ] start
				 */

				currentComponent = "tJDBCRollback_5";

				java.sql.Connection conn_tJDBCRollback_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_5");
				if (conn_tJDBCRollback_5 != null
						&& !conn_tJDBCRollback_5.isClosed()) {
					conn_tJDBCRollback_5.rollback();
					conn_tJDBCRollback_5.close();
				}

				tos_count_tJDBCRollback_5++;

				/**
				 * [tJDBCRollback_5 main ] stop
				 */
				/**
				 * [tJDBCRollback_5 end ] start
				 */

				currentComponent = "tJDBCRollback_5";

				ok_Hash.put("tJDBCRollback_5", true);
				end_Hash.put("tJDBCRollback_5", System.currentTimeMillis());

				/**
				 * [tJDBCRollback_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRollback_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRowGenerator_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCRollback_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String time;

		public String getTime() {
			return this.time;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.time = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.time, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("time=" + time);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());
				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1;

				class tRowGenerator_1Randomizer {
					public String getRandomtime() {

						return TalendDate.getDate("CCYY-MM-DD hh:mm:ss");

					}

					public String getRandommessage() {

						return "ETL Service Stopped";

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row6.time = randtRowGenerator_1.getRandomtime();
					row6.message = randtRowGenerator_1.getRandommessage();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */
					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row6.time != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row6.time));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row6.message != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row6.message));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}

					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRowGenerator_5Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfevent_outputStruct implements
			routines.system.IPersistableRow<copyOfevent_outputStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date log_time;

		public java.util.Date getLog_time() {
			return this.log_time;
		}

		public String log_type_name;

		public String getLog_type_name() {
			return this.log_type_name;
		}

		public int log_type;

		public int getLog_type() {
			return this.log_type;
		}

		public int severity;

		public int getSeverity() {
			return this.severity;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.log_time = readDate(dis);

					this.log_type_name = readString(dis);

					this.log_type = dis.readInt();

					this.severity = dis.readInt();

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.log_time, dos);

				// String

				writeString(this.log_type_name, dos);

				// int

				dos.writeInt(this.log_type);

				// int

				dos.writeInt(this.severity);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("log_time=" + String.valueOf(log_time));
			sb.append(",log_type_name=" + log_type_name);
			sb.append(",log_type=" + String.valueOf(log_type));
			sb.append(",severity=" + String.valueOf(severity));
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfevent_outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date time;

		public java.util.Date getTime() {
			return this.time;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.time = readDate(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.time, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("time=" + String.valueOf(time));
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfevent_outputStruct copyOfevent_output = new copyOfevent_outputStruct();

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_6");

				int batchSize_tJDBCOutput_2 = 10000;
				int batchSizeCounter_tJDBCOutput_2 = 0;

				String insert_tJDBCOutput_2 = "INSERT INTO "
						+ "audit_log"
						+ " (log_time,log_type_name,log_type,severity,message) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(insert_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfevent_outputStruct copyOfevent_output_tmp = new copyOfevent_outputStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tRowGenerator_5 begin ] start
				 */

				ok_Hash.put("tRowGenerator_5", false);
				start_Hash.put("tRowGenerator_5", System.currentTimeMillis());
				currentComponent = "tRowGenerator_5";

				int tos_count_tRowGenerator_5 = 0;

				int nb_line_tRowGenerator_5 = 0;
				int nb_max_row_tRowGenerator_5 = 1;

				class tRowGenerator_5Randomizer {
					public java.util.Date getRandomtime() {

						return TalendDate.getCurrentDate();

					}

					public String getRandommessage() {

						return "ETL Service Stopped";

					}
				}
				tRowGenerator_5Randomizer randtRowGenerator_5 = new tRowGenerator_5Randomizer();

				for (int itRowGenerator_5 = 0; itRowGenerator_5 < nb_max_row_tRowGenerator_5; itRowGenerator_5++) {
					row2.time = randtRowGenerator_5.getRandomtime();
					row2.message = randtRowGenerator_5.getRandommessage();
					nb_line_tRowGenerator_5++;

					/**
					 * [tRowGenerator_5 begin ] stop
					 */
					/**
					 * [tRowGenerator_5 main ] start
					 */

					currentComponent = "tRowGenerator_5";

					tos_count_tRowGenerator_5++;

					/**
					 * [tRowGenerator_5 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						copyOfevent_output = null;

						// # Output table : 'copyOfevent_output'
						copyOfevent_output_tmp.log_time = row2.time;
						copyOfevent_output_tmp.log_type_name = "DWH_STOPPED";
						copyOfevent_output_tmp.log_type = 9701;
						copyOfevent_output_tmp.severity = 0;
						copyOfevent_output_tmp.message = row2.message;
						copyOfevent_output = copyOfevent_output_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "copyOfevent_output"
					if (copyOfevent_output != null) {

						/**
						 * [tJDBCOutput_2 main ] start
						 */

						currentComponent = "tJDBCOutput_2";

						whetherReject_tJDBCOutput_2 = false;
						if (copyOfevent_output.log_time != null) {
							pstmt_tJDBCOutput_2.setTimestamp(1,
									new java.sql.Timestamp(
											copyOfevent_output.log_time
													.getTime()));
						} else {
							pstmt_tJDBCOutput_2.setNull(1, java.sql.Types.DATE);
						}

						if (copyOfevent_output.log_type_name == null) {
							pstmt_tJDBCOutput_2.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_2.setString(2,
									copyOfevent_output.log_type_name);
						}

						pstmt_tJDBCOutput_2.setInt(3,
								copyOfevent_output.log_type);

						pstmt_tJDBCOutput_2.setInt(4,
								copyOfevent_output.severity);

						if (copyOfevent_output.message == null) {
							pstmt_tJDBCOutput_2.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_2.setString(5,
									copyOfevent_output.message);
						}

						try {
							insertedCount_tJDBCOutput_2 = insertedCount_tJDBCOutput_2
									+ pstmt_tJDBCOutput_2.executeUpdate();
							nb_line_tJDBCOutput_2++;
						} catch (Exception e) {
							whetherReject_tJDBCOutput_2 = true;
							throw (e);
						}

						tos_count_tJDBCOutput_2++;

						/**
						 * [tJDBCOutput_2 main ] stop
						 */

					} // End of branch "copyOfevent_output"

					/**
					 * [tRowGenerator_5 end ] start
					 */

					currentComponent = "tRowGenerator_5";

				}
				globalMap.put("tRowGenerator_5_NB_LINE",
						nb_line_tRowGenerator_5);

				ok_Hash.put("tRowGenerator_5", true);
				end_Hash.put("tRowGenerator_5", System.currentTimeMillis());

				/**
				 * [tRowGenerator_5 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRollback_6Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRowGenerator_5_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRollback_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRollback_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRollback_6 begin ] start
				 */

				ok_Hash.put("tJDBCRollback_6", false);
				start_Hash.put("tJDBCRollback_6", System.currentTimeMillis());
				currentComponent = "tJDBCRollback_6";

				int tos_count_tJDBCRollback_6 = 0;

				/**
				 * [tJDBCRollback_6 begin ] stop
				 */
				/**
				 * [tJDBCRollback_6 main ] start
				 */

				currentComponent = "tJDBCRollback_6";

				java.sql.Connection conn_tJDBCRollback_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_6");
				if (conn_tJDBCRollback_6 != null
						&& !conn_tJDBCRollback_6.isClosed()) {
					conn_tJDBCRollback_6.rollback();
					conn_tJDBCRollback_6.close();
				}

				tos_count_tJDBCRollback_6++;

				/**
				 * [tJDBCRollback_6 main ] stop
				 */
				/**
				 * [tJDBCRollback_6 end ] start
				 */

				currentComponent = "tJDBCRollback_6";

				ok_Hash.put("tJDBCRollback_6", true);
				end_Hash.put("tJDBCRollback_6", System.currentTimeMillis());

				/**
				 * [tJDBCRollback_6 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCRollback_6_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());
				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tRowGenerator_2Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String time;

		public String getTime() {
			return this.time;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.time = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.time, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("time=" + time);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());
				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tRowGenerator_2 begin ] start
				 */

				ok_Hash.put("tRowGenerator_2", false);
				start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
				currentComponent = "tRowGenerator_2";

				int tos_count_tRowGenerator_2 = 0;

				int nb_line_tRowGenerator_2 = 0;
				int nb_max_row_tRowGenerator_2 = 1;

				class tRowGenerator_2Randomizer {
					public String getRandomtime() {

						return TalendDate.getDate("CCYY-MM-DD hh:mm:ss");

					}

					public String getRandommessage() {

						return "ETL Service Started";

					}
				}
				tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

				for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
					row3.time = randtRowGenerator_2.getRandomtime();
					row3.message = randtRowGenerator_2.getRandommessage();
					nb_line_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 begin ] stop
					 */
					/**
					 * [tRowGenerator_2 main ] start
					 */

					currentComponent = "tRowGenerator_2";

					tos_count_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 main ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					// /////////////////////

					strBuffer_tLogRow_2 = new StringBuilder();

					if (row3.time != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row3.time));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row3.message != null) { //

						strBuffer_tLogRow_2
								.append(String.valueOf(row3.message));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_2 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
					}

					consoleOut_tLogRow_2
							.println(strBuffer_tLogRow_2.toString());
					consoleOut_tLogRow_2.flush();
					nb_line_tLogRow_2++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tRowGenerator_2 end ] start
					 */

					currentComponent = "tRowGenerator_2";

				}
				globalMap.put("tRowGenerator_2_NB_LINE",
						nb_line_tRowGenerator_2);

				ok_Hash.put("tRowGenerator_2", true);
				end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				/**
				 * [tRowGenerator_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileDelete_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());
				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */
				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						"/usr/share/ovirt-dwh/etl/kill");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exists or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH",
						"/usr/share/ovirt-dwh/etl/kill");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */
				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputProperties_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());
				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;
				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1", System
						.currentTimeMillis());
				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;
				java.io.File file_tFileInputProperties_1 = new java.io.File(
						"/etc/ovirt/ovirt-dwh/Default.properties");
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				properties_tFileInputProperties_1
						.load(new java.io.FileInputStream(
								file_tFileInputProperties_1));
				java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
						.propertyNames();
				while (enumeration_tFileInputProperties_1.hasMoreElements()) {
					row1.key = (String) enumeration_tFileInputProperties_1
							.nextElement();
					row1.value = (String) properties_tFileInputProperties_1
							.getProperty(row1.key);

					/**
					 * [tFileInputProperties_1 begin ] stop
					 */
					/**
					 * [tFileInputProperties_1 main ] start
					 */

					currentComponent = "tFileInputProperties_1";

					tos_count_tFileInputProperties_1++;

					/**
					 * [tFileInputProperties_1 main ] stop
					 */

					/**
					 * [tContextLoad_1 main ] start
					 */

					currentComponent = "tContextLoad_1";

					// ////////////////////////
					String tmp_key_tContextLoad_1 = null;

					String key_tContextLoad_1 = null;
					if (row1.key != null) {
						tmp_key_tContextLoad_1 = row1.key.trim();
						if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
								.startsWith("!"))) {
							tmp_key_tContextLoad_1 = null;
						} else {
							row1.key = tmp_key_tContextLoad_1;
						}
					}
					if (row1.key != null) {

						key_tContextLoad_1 =

						row1.key;

					}

					String value_tContextLoad_1 = null;
					if (row1.value != null) {

						value_tContextLoad_1 =

						row1.value;

					}

					if (tmp_key_tContextLoad_1 != null) {
						try {
							if (key_tContextLoad_1 != null
									&& "hoursToKeepDaily"
											.equals(key_tContextLoad_1)) {

								context.hoursToKeepDaily = Integer
										.parseInt(value_tContextLoad_1);

							}

							if (key_tContextLoad_1 != null
									&& "hoursToKeepHourly"
											.equals(key_tContextLoad_1)) {

								context.hoursToKeepHourly = Integer
										.parseInt(value_tContextLoad_1);

							}

							if (key_tContextLoad_1 != null
									&& "hoursToKeepSamples"
											.equals(key_tContextLoad_1)) {

								context.hoursToKeepSamples = Integer
										.parseInt(value_tContextLoad_1);

							}

							if (key_tContextLoad_1 != null
									&& "lastErrorSent"
											.equals(key_tContextLoad_1)) {
								String context_lastErrorSent_value = context
										.getProperty("lastErrorSent");
								if (context_lastErrorSent_value == null)
									context_lastErrorSent_value = "";
								int context_lastErrorSent_pos = context_lastErrorSent_value
										.indexOf(";");
								String context_lastErrorSent_pattern = "yyyy-MM-dd HH:mm:ss";
								if (context_lastErrorSent_pos > -1) {
									context_lastErrorSent_pattern = context_lastErrorSent_value
											.substring(0,
													context_lastErrorSent_pos);
								}
								context.lastErrorSent = (java.util.Date) (new java.text.SimpleDateFormat(
										context_lastErrorSent_pattern)
										.parse(value_tContextLoad_1));

							}

							if (key_tContextLoad_1 != null
									&& "ovirtEngineDbDriverClass"
											.equals(key_tContextLoad_1)) {
								context.ovirtEngineDbDriverClass = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtEngineDbJdbcConnection"
											.equals(key_tContextLoad_1)) {
								context.ovirtEngineDbJdbcConnection = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtEngineDbPassword"
											.equals(key_tContextLoad_1)) {
								context.ovirtEngineDbPassword = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtEngineDbUser"
											.equals(key_tContextLoad_1)) {
								context.ovirtEngineDbUser = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtEnginePortalAddress"
											.equals(key_tContextLoad_1)) {
								context.ovirtEnginePortalAddress = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtEnginePortalConnectionProtocol"
											.equals(key_tContextLoad_1)) {
								context.ovirtEnginePortalConnectionProtocol = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtEnginePortalPort"
											.equals(key_tContextLoad_1)) {
								context.ovirtEnginePortalPort = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtHistoryDbDriverClass"
											.equals(key_tContextLoad_1)) {
								context.ovirtHistoryDbDriverClass = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtHistoryDbJdbcConnection"
											.equals(key_tContextLoad_1)) {
								context.ovirtHistoryDbJdbcConnection = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtHistoryDbPassword"
											.equals(key_tContextLoad_1)) {
								context.ovirtHistoryDbPassword = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "ovirtHistoryDbUser"
											.equals(key_tContextLoad_1)) {
								context.ovirtHistoryDbUser = value_tContextLoad_1;
							}

							if (key_tContextLoad_1 != null
									&& "runDeleteTime"
											.equals(key_tContextLoad_1)) {

								context.runDeleteTime = Integer
										.parseInt(value_tContextLoad_1);

							}

							if (key_tContextLoad_1 != null
									&& "runInterleave"
											.equals(key_tContextLoad_1)) {

								context.runInterleave = Integer
										.parseInt(value_tContextLoad_1);

							}

							if (context.getProperty(key_tContextLoad_1) != null) {
								assignList_tContextLoad_1
										.add(key_tContextLoad_1);
							} else {
								newPropertyList_tContextLoad_1
										.add(key_tContextLoad_1);
							}
							context.setProperty(key_tContextLoad_1,
									value_tContextLoad_1);
						} catch (Exception e) {
							System.err.println("Set value for key: "
									+ key_tContextLoad_1
									+ " failed, error message: "
									+ e.getMessage());
						}
						nb_line_tContextLoad_1++;
					}
					// ////////////////////////

					tos_count_tContextLoad_1++;

					/**
					 * [tContextLoad_1 main ] stop
					 */

					/**
					 * [tFileInputProperties_1 end ] start
					 */

					currentComponent = "tFileInputProperties_1";

					tos_count_tFileInputProperties_1++;
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						tos_count_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1", System
						.currentTimeMillis());

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId()
						+ "", "", "", "", "", resumeUtil
						.convertToJsonText(context));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputProperties_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCConnection_2Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_2 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_2", false);
				start_Hash.put("tJDBCConnection_2", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_2";

				int tos_count_tJDBCConnection_2 = 0;

				String url_tJDBCConnection_2 = context.ovirtEngineDbJdbcConnection;

				String userName_tJDBCConnection_2 = context.ovirtEngineDbUser;

				String password_tJDBCConnection_2 = context.ovirtEngineDbPassword;

				java.sql.Connection conn_tJDBCConnection_2 = null;

				String sharedConnectionName_tJDBCConnection_2 = "engine";
				conn_tJDBCConnection_2 = SharedDBConnection.getDBConnection(
						context.ovirtEngineDbDriverClass,
						url_tJDBCConnection_2, userName_tJDBCConnection_2,
						password_tJDBCConnection_2,
						sharedConnectionName_tJDBCConnection_2);

				conn_tJDBCConnection_2.setAutoCommit(false);

				globalMap.put("conn_tJDBCConnection_2", conn_tJDBCConnection_2);
				globalMap.put("url_tJDBCConnection_2", url_tJDBCConnection_2);
				// globalMap.put("user_tJDBCConnection_2",
				// userName_tJDBCConnection_2);
				// globalMap.put("pass_tJDBCConnection_2",
				// password_tJDBCConnection_2);

				/**
				 * [tJDBCConnection_2 begin ] stop
				 */
				/**
				 * [tJDBCConnection_2 main ] start
				 */

				currentComponent = "tJDBCConnection_2";

				tos_count_tJDBCConnection_2++;

				/**
				 * [tJDBCConnection_2 main ] stop
				 */
				/**
				 * [tJDBCConnection_2 end ] start
				 */

				currentComponent = "tJDBCConnection_2";

				ok_Hash.put("tJDBCConnection_2", true);
				end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				tJDBCConnection_6Process(globalMap);

				/**
				 * [tJDBCConnection_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_6 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_6", false);
				start_Hash.put("tJDBCConnection_6", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_6";

				int tos_count_tJDBCConnection_6 = 0;

				String url_tJDBCConnection_6 = context.ovirtEngineDbJdbcConnection;

				String userName_tJDBCConnection_6 = context.ovirtEngineDbUser;

				String password_tJDBCConnection_6 = context.ovirtEngineDbPassword;

				java.sql.Connection conn_tJDBCConnection_6 = null;

				String sharedConnectionName_tJDBCConnection_6 = "engine-events";
				conn_tJDBCConnection_6 = SharedDBConnection.getDBConnection(
						context.ovirtEngineDbDriverClass,
						url_tJDBCConnection_6, userName_tJDBCConnection_6,
						password_tJDBCConnection_6,
						sharedConnectionName_tJDBCConnection_6);

				conn_tJDBCConnection_6.setAutoCommit(true);

				globalMap.put("conn_tJDBCConnection_6", conn_tJDBCConnection_6);
				globalMap.put("url_tJDBCConnection_6", url_tJDBCConnection_6);
				// globalMap.put("user_tJDBCConnection_6",
				// userName_tJDBCConnection_6);
				// globalMap.put("pass_tJDBCConnection_6",
				// password_tJDBCConnection_6);

				/**
				 * [tJDBCConnection_6 begin ] stop
				 */
				/**
				 * [tJDBCConnection_6 main ] start
				 */

				currentComponent = "tJDBCConnection_6";

				tos_count_tJDBCConnection_6++;

				/**
				 * [tJDBCConnection_6 main ] stop
				 */
				/**
				 * [tJDBCConnection_6 end ] start
				 */

				currentComponent = "tJDBCConnection_6";

				ok_Hash.put("tJDBCConnection_6", true);
				end_Hash.put("tJDBCConnection_6", System.currentTimeMillis());

				tRowGenerator_6Process(globalMap);

				/**
				 * [tJDBCConnection_6 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_6_SUBPROCESS_STATE", 1);
	}

	public static class copyOfevent_output_0Struct implements
			routines.system.IPersistableRow<copyOfevent_output_0Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date log_time;

		public java.util.Date getLog_time() {
			return this.log_time;
		}

		public String log_type_name;

		public String getLog_type_name() {
			return this.log_type_name;
		}

		public int log_type;

		public int getLog_type() {
			return this.log_type;
		}

		public int severity;

		public int getSeverity() {
			return this.severity;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.log_time = readDate(dis);

					this.log_type_name = readString(dis);

					this.log_type = dis.readInt();

					this.severity = dis.readInt();

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.log_time, dos);

				// String

				writeString(this.log_type_name, dos);

				// int

				dos.writeInt(this.log_type);

				// int

				dos.writeInt(this.severity);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("log_time=" + String.valueOf(log_time));
			sb.append(",log_type_name=" + log_type_name);
			sb.append(",log_type=" + String.valueOf(log_type));
			sb.append(",severity=" + String.valueOf(severity));
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfevent_output_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date time;

		public java.util.Date getTime() {
			return this.time;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.time = readDate(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.time, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("time=" + String.valueOf(time));
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				copyOfevent_output_0Struct copyOfevent_output_0 = new copyOfevent_output_0Struct();

				/**
				 * [tJDBCOutput_3 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_3", false);
				start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_3";

				int tos_count_tJDBCOutput_3 = 0;

				int nb_line_tJDBCOutput_3 = 0;
				int nb_line_update_tJDBCOutput_3 = 0;
				int nb_line_inserted_tJDBCOutput_3 = 0;
				int nb_line_deleted_tJDBCOutput_3 = 0;
				int nb_line_rejected_tJDBCOutput_3 = 0;

				int deletedCount_tJDBCOutput_3 = 0;
				int updatedCount_tJDBCOutput_3 = 0;
				int insertedCount_tJDBCOutput_3 = 0;
				int rejectedCount_tJDBCOutput_3 = 0;

				boolean whetherReject_tJDBCOutput_3 = false;

				java.sql.Connection connection_tJDBCOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_6");

				int batchSize_tJDBCOutput_3 = 10000;
				int batchSizeCounter_tJDBCOutput_3 = 0;

				String insert_tJDBCOutput_3 = "INSERT INTO "
						+ "audit_log"
						+ " (log_time,log_type_name,log_type,severity,message) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(insert_tJDBCOutput_3);

				/**
				 * [tJDBCOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfevent_output_0Struct copyOfevent_output_0_tmp = new copyOfevent_output_0Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tRowGenerator_6 begin ] start
				 */

				ok_Hash.put("tRowGenerator_6", false);
				start_Hash.put("tRowGenerator_6", System.currentTimeMillis());
				currentComponent = "tRowGenerator_6";

				int tos_count_tRowGenerator_6 = 0;

				int nb_line_tRowGenerator_6 = 0;
				int nb_max_row_tRowGenerator_6 = 1;

				class tRowGenerator_6Randomizer {
					public java.util.Date getRandomtime() {

						return TalendDate.getCurrentDate();

					}

					public String getRandommessage() {

						return "ETL Service Started";

					}
				}
				tRowGenerator_6Randomizer randtRowGenerator_6 = new tRowGenerator_6Randomizer();

				for (int itRowGenerator_6 = 0; itRowGenerator_6 < nb_max_row_tRowGenerator_6; itRowGenerator_6++) {
					row7.time = randtRowGenerator_6.getRandomtime();
					row7.message = randtRowGenerator_6.getRandommessage();
					nb_line_tRowGenerator_6++;

					/**
					 * [tRowGenerator_6 begin ] stop
					 */
					/**
					 * [tRowGenerator_6 main ] start
					 */

					currentComponent = "tRowGenerator_6";

					tos_count_tRowGenerator_6++;

					/**
					 * [tRowGenerator_6 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables
						// ###############################
						// ###############################
						// # Output tables

						copyOfevent_output_0 = null;

						// # Output table : 'copyOfevent_output_0'
						copyOfevent_output_0_tmp.log_time = row7.time;
						copyOfevent_output_0_tmp.log_type_name = "DWH_STARTED";
						copyOfevent_output_0_tmp.log_type = 9700;
						copyOfevent_output_0_tmp.severity = 0;
						copyOfevent_output_0_tmp.message = row7.message;
						copyOfevent_output_0 = copyOfevent_output_0_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "copyOfevent_output_0"
					if (copyOfevent_output_0 != null) {

						/**
						 * [tJDBCOutput_3 main ] start
						 */

						currentComponent = "tJDBCOutput_3";

						whetherReject_tJDBCOutput_3 = false;
						if (copyOfevent_output_0.log_time != null) {
							pstmt_tJDBCOutput_3.setTimestamp(1,
									new java.sql.Timestamp(
											copyOfevent_output_0.log_time
													.getTime()));
						} else {
							pstmt_tJDBCOutput_3.setNull(1, java.sql.Types.DATE);
						}

						if (copyOfevent_output_0.log_type_name == null) {
							pstmt_tJDBCOutput_3.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_3.setString(2,
									copyOfevent_output_0.log_type_name);
						}

						pstmt_tJDBCOutput_3.setInt(3,
								copyOfevent_output_0.log_type);

						pstmt_tJDBCOutput_3.setInt(4,
								copyOfevent_output_0.severity);

						if (copyOfevent_output_0.message == null) {
							pstmt_tJDBCOutput_3.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tJDBCOutput_3.setString(5,
									copyOfevent_output_0.message);
						}

						try {
							insertedCount_tJDBCOutput_3 = insertedCount_tJDBCOutput_3
									+ pstmt_tJDBCOutput_3.executeUpdate();
							nb_line_tJDBCOutput_3++;
						} catch (Exception e) {
							whetherReject_tJDBCOutput_3 = true;
							throw (e);
						}

						tos_count_tJDBCOutput_3++;

						/**
						 * [tJDBCOutput_3 main ] stop
						 */

					} // End of branch "copyOfevent_output_0"

					/**
					 * [tRowGenerator_6 end ] start
					 */

					currentComponent = "tRowGenerator_6";

				}
				globalMap.put("tRowGenerator_6_NB_LINE",
						nb_line_tRowGenerator_6);

				ok_Hash.put("tRowGenerator_6", true);
				end_Hash.put("tRowGenerator_6", System.currentTimeMillis());

				/**
				 * [tRowGenerator_6 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tJDBCOutput_3 end ] start
				 */

				currentComponent = "tJDBCOutput_3";

				if (pstmt_tJDBCOutput_3 != null) {

					pstmt_tJDBCOutput_3.close();

				}

				nb_line_deleted_tJDBCOutput_3 = nb_line_deleted_tJDBCOutput_3
						+ deletedCount_tJDBCOutput_3;
				nb_line_update_tJDBCOutput_3 = nb_line_update_tJDBCOutput_3
						+ updatedCount_tJDBCOutput_3;
				nb_line_inserted_tJDBCOutput_3 = nb_line_inserted_tJDBCOutput_3
						+ insertedCount_tJDBCOutput_3;
				nb_line_rejected_tJDBCOutput_3 = nb_line_rejected_tJDBCOutput_3
						+ rejectedCount_tJDBCOutput_3;

				globalMap.put("tJDBCOutput_3_NB_LINE", nb_line_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_3);

				ok_Hash.put("tJDBCOutput_3", true);
				end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCConnection_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRowGenerator_6_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.ovirtHistoryDbJdbcConnection;

				String userName_tJDBCConnection_1 = context.ovirtHistoryDbUser;

				String password_tJDBCConnection_1 = context.ovirtHistoryDbPassword;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String sharedConnectionName_tJDBCConnection_1 = "sample_ovirt_history";
				conn_tJDBCConnection_1 = SharedDBConnection.getDBConnection(
						context.ovirtHistoryDbDriverClass,
						url_tJDBCConnection_1, userName_tJDBCConnection_1,
						password_tJDBCConnection_1,
						sharedConnectionName_tJDBCConnection_1);

				conn_tJDBCConnection_1.setAutoCommit(false);

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				tJDBCConnection_3Process(globalMap);

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_3 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_3", false);
				start_Hash.put("tJDBCConnection_3", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_3";

				int tos_count_tJDBCConnection_3 = 0;

				String url_tJDBCConnection_3 = context.ovirtHistoryDbJdbcConnection;

				String userName_tJDBCConnection_3 = context.ovirtHistoryDbUser;

				String password_tJDBCConnection_3 = context.ovirtHistoryDbPassword;

				java.sql.Connection conn_tJDBCConnection_3 = null;

				String sharedConnectionName_tJDBCConnection_3 = "hourly_ovirt_history";
				conn_tJDBCConnection_3 = SharedDBConnection.getDBConnection(
						context.ovirtHistoryDbDriverClass,
						url_tJDBCConnection_3, userName_tJDBCConnection_3,
						password_tJDBCConnection_3,
						sharedConnectionName_tJDBCConnection_3);

				conn_tJDBCConnection_3.setAutoCommit(false);

				globalMap.put("conn_tJDBCConnection_3", conn_tJDBCConnection_3);
				globalMap.put("url_tJDBCConnection_3", url_tJDBCConnection_3);
				// globalMap.put("user_tJDBCConnection_3",
				// userName_tJDBCConnection_3);
				// globalMap.put("pass_tJDBCConnection_3",
				// password_tJDBCConnection_3);

				/**
				 * [tJDBCConnection_3 begin ] stop
				 */
				/**
				 * [tJDBCConnection_3 main ] start
				 */

				currentComponent = "tJDBCConnection_3";

				tos_count_tJDBCConnection_3++;

				/**
				 * [tJDBCConnection_3 main ] stop
				 */
				/**
				 * [tJDBCConnection_3 end ] start
				 */

				currentComponent = "tJDBCConnection_3";

				ok_Hash.put("tJDBCConnection_3", true);
				end_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

				tJDBCConnection_4Process(globalMap);

				/**
				 * [tJDBCConnection_3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_4 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_4", false);
				start_Hash.put("tJDBCConnection_4", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_4";

				int tos_count_tJDBCConnection_4 = 0;

				String url_tJDBCConnection_4 = context.ovirtHistoryDbJdbcConnection;

				String userName_tJDBCConnection_4 = context.ovirtHistoryDbUser;

				String password_tJDBCConnection_4 = context.ovirtHistoryDbPassword;

				java.sql.Connection conn_tJDBCConnection_4 = null;

				String sharedConnectionName_tJDBCConnection_4 = "daily_ovirt_history";
				conn_tJDBCConnection_4 = SharedDBConnection.getDBConnection(
						context.ovirtHistoryDbDriverClass,
						url_tJDBCConnection_4, userName_tJDBCConnection_4,
						password_tJDBCConnection_4,
						sharedConnectionName_tJDBCConnection_4);

				conn_tJDBCConnection_4.setAutoCommit(false);

				globalMap.put("conn_tJDBCConnection_4", conn_tJDBCConnection_4);
				globalMap.put("url_tJDBCConnection_4", url_tJDBCConnection_4);
				// globalMap.put("user_tJDBCConnection_4",
				// userName_tJDBCConnection_4);
				// globalMap.put("pass_tJDBCConnection_4",
				// password_tJDBCConnection_4);

				/**
				 * [tJDBCConnection_4 begin ] stop
				 */
				/**
				 * [tJDBCConnection_4 main ] start
				 */

				currentComponent = "tJDBCConnection_4";

				tos_count_tJDBCConnection_4++;

				/**
				 * [tJDBCConnection_4 main ] stop
				 */
				/**
				 * [tJDBCConnection_4 end ] start
				 */

				currentComponent = "tJDBCConnection_4";

				ok_Hash.put("tJDBCConnection_4", true);
				end_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

				tJDBCConnection_5Process(globalMap);

				/**
				 * [tJDBCConnection_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_4_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_5 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_5", false);
				start_Hash.put("tJDBCConnection_5", System.currentTimeMillis());
				currentComponent = "tJDBCConnection_5";

				int tos_count_tJDBCConnection_5 = 0;

				String url_tJDBCConnection_5 = context.ovirtHistoryDbJdbcConnection;

				String userName_tJDBCConnection_5 = context.ovirtHistoryDbUser;

				String password_tJDBCConnection_5 = context.ovirtHistoryDbPassword;

				java.sql.Connection conn_tJDBCConnection_5 = null;

				String sharedConnectionName_tJDBCConnection_5 = "delete_ovirt_history";
				conn_tJDBCConnection_5 = SharedDBConnection.getDBConnection(
						context.ovirtHistoryDbDriverClass,
						url_tJDBCConnection_5, userName_tJDBCConnection_5,
						password_tJDBCConnection_5,
						sharedConnectionName_tJDBCConnection_5);

				conn_tJDBCConnection_5.setAutoCommit(false);

				globalMap.put("conn_tJDBCConnection_5", conn_tJDBCConnection_5);
				globalMap.put("url_tJDBCConnection_5", url_tJDBCConnection_5);
				// globalMap.put("user_tJDBCConnection_5",
				// userName_tJDBCConnection_5);
				// globalMap.put("pass_tJDBCConnection_5",
				// password_tJDBCConnection_5);

				/**
				 * [tJDBCConnection_5 begin ] stop
				 */
				/**
				 * [tJDBCConnection_5 main ] start
				 */

				currentComponent = "tJDBCConnection_5";

				tos_count_tJDBCConnection_5++;

				/**
				 * [tJDBCConnection_5 main ] stop
				 */
				/**
				 * [tJDBCConnection_5 end ] start
				 */

				currentComponent = "tJDBCConnection_5";

				ok_Hash.put("tJDBCConnection_5", true);
				end_Hash.put("tJDBCConnection_5", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_5 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJDBCConnection_5_SUBPROCESS_STATE", 1);
	}

	public void tWaitForFile_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWaitForFile_1 begin ] start
				 */

				int NB_ITERATE_tJava_1 = 0; // for statistics

				ok_Hash.put("tWaitForFile_1", false);
				start_Hash.put("tWaitForFile_1", System.currentTimeMillis());
				currentComponent = "tWaitForFile_1";

				int tos_count_tWaitForFile_1 = 0;

				class Util_tWaitForFile_1 {

					private boolean flagt = false;

					private java.util.regex.Pattern fileNamePatternt = null;

					java.util.List<java.io.File> getFiles() {
						String directoryt = "/usr/share/ovirt-dwh/etl";
						String filemaskt = "kill" + "$";

						if (filemaskt.indexOf("^") == -1) {
							filemaskt = "^" + filemaskt;
						}
						if (!(filemaskt.lastIndexOf(".*$") == -1)
								&& filemaskt.lastIndexOf("*.*$") == -1) {
							filemaskt = filemaskt.substring(0, filemaskt
									.length() - 3)
									+ "$";
							flagt = true;
						} else {
							filemaskt = java.util.regex.Pattern.compile("[*]")
									.matcher(filemaskt).replaceAll(".*");
						}

						boolean case_sensitivet = true;
						fileNamePatternt = java.util.regex.Pattern
								.compile(filemaskt);
						if (!case_sensitivet) {
							fileNamePatternt = java.util.regex.Pattern.compile(
									filemaskt,
									java.util.regex.Pattern.CASE_INSENSITIVE);
						}
						java.io.File filet = new java.io.File(directoryt);
						final java.util.List<java.io.File> list = new java.util.ArrayList<java.io.File>();
						filet.listFiles(new java.io.FilenameFilter() {

							public boolean accept(java.io.File dir, String name) {
								java.io.File file = new java.io.File(dir, name);
								if (file.isFile()) {
									String fileNamet = name;
									if (flagt == true) {
										if (!(fileNamet.indexOf(".") == -1)) {
											if (fileNamePatternt
													.matcher(
															fileNamet
																	.substring(
																			0,
																			fileNamet
																					.indexOf(".")))
													.find()) {
												list.add(file);

											}
										} else {
											if (fileNamePatternt.matcher(
													fileNamet).find()) {
												list.add(file);
											}
										}
									} else {
										if (fileNamePatternt.matcher(fileNamet)
												.find()) {
											list.add(file);
										}
									}

									return true;
								}
								return false;
							}

						});

						return list;
					}

					java.util.List<java.io.File> getCreatedFiles(
							java.util.List<java.io.File> originalFiles,
							java.util.List<java.io.File> fetchOneTimeFiles) {
						java.util.List<java.io.File> newCreatedFiles = new java.util.ArrayList<java.io.File>();
						for (java.io.File file : fetchOneTimeFiles) {
							if (!originalFiles.contains(file)) {
								newCreatedFiles.add(file);
							}
						}
						return newCreatedFiles;
					}

				}

				Util_tWaitForFile_1 util_tWaitForFile_1 = new Util_tWaitForFile_1();
				java.util.List<java.io.File> originalFiles_tWaitForFile_1 = util_tWaitForFile_1
						.getFiles();

				int count_tWaitForFile_1 = 0;
				while (true) {
					boolean found_tWaitForFile_1 = false;
					java.util.List<java.io.File> fetchFilesOneTime_tWaitForFile_1 = util_tWaitForFile_1
							.getFiles();
					java.util.List<java.io.File> newCreatedFiles_tWaitForFile_1 = util_tWaitForFile_1
							.getCreatedFiles(originalFiles_tWaitForFile_1,
									fetchFilesOneTime_tWaitForFile_1);

					for (int i = 0; i < newCreatedFiles_tWaitForFile_1.size(); i++) {
						java.io.File file_tWaitForFile_1 = newCreatedFiles_tWaitForFile_1
								.get(i);

						globalMap.put("tWaitForFile_1_FILENAME",
								file_tWaitForFile_1.getName());
						globalMap.put("tWaitForFile_1_CREATED_FILE",
								file_tWaitForFile_1.getAbsolutePath());
						found_tWaitForFile_1 = true;
						originalFiles_tWaitForFile_1.add(file_tWaitForFile_1);
						break;
					}

					count_tWaitForFile_1++;

					globalMap.put("tWaitForFile_1_CURRENT_ITERATION",
							count_tWaitForFile_1);

					if (!found_tWaitForFile_1) {
						Thread.sleep(5 * 1000);
						continue;
					}

					/**
					 * [tWaitForFile_1 begin ] stop
					 */
					/**
					 * [tWaitForFile_1 main ] start
					 */

					currentComponent = "tWaitForFile_1";

					tos_count_tWaitForFile_1++;

					/**
					 * [tWaitForFile_1 main ] stop
					 */
					NB_ITERATE_tJava_1++;

					/**
					 * [tJava_1 begin ] start
					 */

					ok_Hash.put("tJava_1", false);
					start_Hash.put("tJava_1", System.currentTimeMillis());
					currentComponent = "tJava_1";

					int tos_count_tJava_1 = 0;

					while (runningThreadCount.getCount() > 0) {
						runningThreadCount.add(-1);
					}

					/**
					 * [tJava_1 begin ] stop
					 */
					/**
					 * [tJava_1 main ] start
					 */

					currentComponent = "tJava_1";

					tos_count_tJava_1++;

					/**
					 * [tJava_1 main ] stop
					 */
					/**
					 * [tJava_1 end ] start
					 */

					currentComponent = "tJava_1";

					ok_Hash.put("tJava_1", true);
					end_Hash.put("tJava_1", System.currentTimeMillis());

					/**
					 * [tJava_1 end ] stop
					 */

					/**
					 * [tWaitForFile_1 end ] start
					 */

					currentComponent = "tWaitForFile_1";

					if (true) {
						break;
					}
				}

				ok_Hash.put("tWaitForFile_1", true);
				end_Hash.put("tWaitForFile_1", System.currentTimeMillis());

				/**
				 * [tWaitForFile_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589
				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("hoursToKeepDaily",
						context.hoursToKeepDaily);
				parentContextMap_tRunJob_2.put("hoursToKeepHourly",
						context.hoursToKeepHourly);
				parentContextMap_tRunJob_2.put("hoursToKeepSamples",
						context.hoursToKeepSamples);
				parentContextMap_tRunJob_2.put("lastErrorSent",
						context.lastErrorSent);
				parentContextMap_tRunJob_2.put("ovirtEngineDbDriverClass",
						context.ovirtEngineDbDriverClass);
				parentContextMap_tRunJob_2.put("ovirtEngineDbJdbcConnection",
						context.ovirtEngineDbJdbcConnection);
				parentContextMap_tRunJob_2.put("ovirtEngineDbPassword",
						context.ovirtEngineDbPassword);
				parentContextMap_tRunJob_2.put("ovirtEngineDbUser",
						context.ovirtEngineDbUser);
				parentContextMap_tRunJob_2.put("ovirtEnginePortalAddress",
						context.ovirtEnginePortalAddress);
				parentContextMap_tRunJob_2.put(
						"ovirtEnginePortalConnectionProtocol",
						context.ovirtEnginePortalConnectionProtocol);
				parentContextMap_tRunJob_2.put("ovirtEnginePortalPort",
						context.ovirtEnginePortalPort);
				parentContextMap_tRunJob_2.put("ovirtHistoryDbDriverClass",
						context.ovirtHistoryDbDriverClass);
				parentContextMap_tRunJob_2.put("ovirtHistoryDbJdbcConnection",
						context.ovirtHistoryDbJdbcConnection);
				parentContextMap_tRunJob_2.put("ovirtHistoryDbPassword",
						context.ovirtHistoryDbPassword);
				parentContextMap_tRunJob_2.put("ovirtHistoryDbUser",
						context.ovirtHistoryDbUser);
				parentContextMap_tRunJob_2.put("runDeleteTime",
						context.runDeleteTime);
				parentContextMap_tRunJob_2.put("runInterleave",
						context.runInterleave);

				Object obj_tRunJob_2 = null;

				ovirt_dwh.minimalversioncheck_3_0.MinimalVersionCheck childJob_tRunJob_2 = new ovirt_dwh.minimalversioncheck_3_0.MinimalVersionCheck();
				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));
				((java.util.Map) threadLocal.get()).put("errorCode",
						childJob_tRunJob_2.getErrorCode());

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
						childJob_tRunJob_2.getExceptionStackTrace());

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				while (runningThreadCount.getCount() > 0) {
					runningThreadCount.add(-1);
				}

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				java.net.URL url_tHttpRequest_1 = new java.net.URL(
						context.ovirtEnginePortalConnectionProtocol + "://"
								+ context.ovirtEnginePortalAddress + ":"
								+ context.ovirtEnginePortalPort
								+ "/OvirtEngineWeb/HealthStatus");
				java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
						.openConnection();
				urlConn_tHttpRequest_1.setRequestMethod("GET");
				urlConn_tHttpRequest_1.setDoOutput(true);
				urlConn_tHttpRequest_1.setDoInput(true);
				urlConn_tHttpRequest_1.setUseCaches(false);
				urlConn_tHttpRequest_1.connect();

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String time;

		public String getTime() {
			return this.time;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.time = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.time, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("time=" + time);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());
				currentComponent = "tLogRow_4";

				int tos_count_tLogRow_4 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
				// /////////////////////

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tRowGenerator_4 begin ] start
				 */

				ok_Hash.put("tRowGenerator_4", false);
				start_Hash.put("tRowGenerator_4", System.currentTimeMillis());
				currentComponent = "tRowGenerator_4";

				int tos_count_tRowGenerator_4 = 0;

				int nb_line_tRowGenerator_4 = 0;
				int nb_max_row_tRowGenerator_4 = 1;

				class tRowGenerator_4Randomizer {
					public String getRandomtime() {

						return TalendDate.getDate("CCYY-MM-DD hh:mm:ss");

					}

					public String getRandommessage() {

						return "oVirt Engine Portal is not avilable. Please check your ETL configuration.";

					}
				}
				tRowGenerator_4Randomizer randtRowGenerator_4 = new tRowGenerator_4Randomizer();

				for (int itRowGenerator_4 = 0; itRowGenerator_4 < nb_max_row_tRowGenerator_4; itRowGenerator_4++) {
					row4.time = randtRowGenerator_4.getRandomtime();
					row4.message = randtRowGenerator_4.getRandommessage();
					nb_line_tRowGenerator_4++;

					/**
					 * [tRowGenerator_4 begin ] stop
					 */
					/**
					 * [tRowGenerator_4 main ] start
					 */

					currentComponent = "tRowGenerator_4";

					tos_count_tRowGenerator_4++;

					/**
					 * [tRowGenerator_4 main ] stop
					 */

					/**
					 * [tLogRow_4 main ] start
					 */

					currentComponent = "tLogRow_4";

					// /////////////////////

					strBuffer_tLogRow_4 = new StringBuilder();

					if (row4.time != null) { //

						strBuffer_tLogRow_4.append(String.valueOf(row4.time));

					} //

					strBuffer_tLogRow_4.append("|");

					if (row4.message != null) { //

						strBuffer_tLogRow_4
								.append(String.valueOf(row4.message));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_4 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
					}

					consoleOut_tLogRow_4
							.println(strBuffer_tLogRow_4.toString());
					consoleOut_tLogRow_4.flush();
					nb_line_tLogRow_4++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_4++;

					/**
					 * [tLogRow_4 main ] stop
					 */

					/**
					 * [tRowGenerator_4 end ] start
					 */

					currentComponent = "tRowGenerator_4";

				}
				globalMap.put("tRowGenerator_4_NB_LINE",
						nb_line_tRowGenerator_4);

				ok_Hash.put("tRowGenerator_4", true);
				end_Hash.put("tRowGenerator_4", System.currentTimeMillis());

				/**
				 * [tRowGenerator_4 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				// ////
				// ////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

				// /////////////////////

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog(
								"CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_4Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRowGenerator_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());
				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				while (runningThreadCount.getCount() > 0) {
					runningThreadCount.add(-1);
				}

				/**
				 * [tJava_4 begin ] stop
				 */
				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */
				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class five_min_checkStruct implements
			routines.system.IPersistableRow<five_min_checkStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public java.util.Date value;

		public java.util.Date getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// java.util.Date

				writeDate(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(five_min_checkStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class event_outputStruct implements
			routines.system.IPersistableRow<event_outputStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date log_time;

		public java.util.Date getLog_time() {
			return this.log_time;
		}

		public String log_type_name;

		public String getLog_type_name() {
			return this.log_type_name;
		}

		public int log_type;

		public int getLog_type() {
			return this.log_type;
		}

		public int severity;

		public int getSeverity() {
			return this.severity;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.log_time = readDate(dis);

					this.log_type_name = readString(dis);

					this.log_type = dis.readInt();

					this.severity = dis.readInt();

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.log_time, dos);

				// String

				writeString(this.log_type_name, dos);

				// int

				dos.writeInt(this.log_type);

				// int

				dos.writeInt(this.severity);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("log_time=" + String.valueOf(log_time));
			sb.append(",log_type_name=" + log_type_name);
			sb.append(",log_type=" + String.valueOf(log_type));
			sb.append(",severity=" + String.valueOf(severity));
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(event_outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				five_min_checkStruct five_min_check = new five_min_checkStruct();
				event_outputStruct event_output = new event_outputStruct();

				/**
				 * [tContextLoad_2 begin ] start
				 */

				ok_Hash.put("tContextLoad_2", false);
				start_Hash.put("tContextLoad_2", System.currentTimeMillis());
				currentComponent = "tContextLoad_2";

				int tos_count_tContextLoad_2 = 0;
				java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_2 = 0;

				/**
				 * [tContextLoad_2 begin ] stop
				 */

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());
				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_6");

				int batchSize_tJDBCOutput_1 = 10000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ "audit_log"
						+ " (log_time,log_type_name,log_type,severity,message) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				// ###############################

				// ###############################
				// # Outputs initialization
				five_min_checkStruct five_min_check_tmp = new five_min_checkStruct();
				event_outputStruct event_output_tmp = new event_outputStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row5.type = lcm.getType();
					row5.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row5.priority = lcm.getPriority();
					row5.message = lcm.getMessage();
					row5.code = lcm.getCode();

					row5.moment = java.util.Calendar.getInstance().getTime();

					row5.pid = pid;
					row5.root_pid = rootPid;
					row5.father_pid = fatherPid;

					row5.project = projectName;
					row5.job = jobName;
					row5.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */
					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					if (

					(

					row5.moment.getTime() - context.lastErrorSent.getTime() > 300000

					)

					) { // G_TM_M_280

						// CALL close main tMap filter for table 'row5'
						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables
							// ###############################
							// ###############################
							// # Output tables

							five_min_check = null;
							event_output = null;

							// # Output table : 'five_min_check'
							five_min_check_tmp.key = "lastErrorSent";
							five_min_check_tmp.value = row5.moment;
							five_min_check = five_min_check_tmp;

							// # Output table : 'event_output'
							event_output_tmp.log_time = row5.moment;
							event_output_tmp.log_type_name = "DWH_ERROR";
							event_output_tmp.log_type = 9704;
							event_output_tmp.severity = 2;
							event_output_tmp.message = "ETL service has encountered an error. Please consult the service log for more details.";
							event_output = event_output_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "five_min_check"
						if (five_min_check != null) {

							/**
							 * [tContextLoad_2 main ] start
							 */

							currentComponent = "tContextLoad_2";

							// ////////////////////////
							String tmp_key_tContextLoad_2 = null;

							String key_tContextLoad_2 = null;
							if (five_min_check.key != null) {
								tmp_key_tContextLoad_2 = five_min_check.key
										.trim();
								if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2
										.startsWith("!"))) {
									tmp_key_tContextLoad_2 = null;
								} else {
									five_min_check.key = tmp_key_tContextLoad_2;
								}
							}
							if (five_min_check.key != null) {

								key_tContextLoad_2 =

								five_min_check.key;

							}

							String value_tContextLoad_2 = null;
							if (five_min_check.value != null) {

								value_tContextLoad_2 =

								FormatterUtils.format_Date(
										five_min_check.value,
										"yyyy-MM-dd HH:mm:ss.SSSSSS");

							}

							if (tmp_key_tContextLoad_2 != null) {
								try {
									if (key_tContextLoad_2 != null
											&& "hoursToKeepDaily"
													.equals(key_tContextLoad_2)) {

										context.hoursToKeepDaily = Integer
												.parseInt(value_tContextLoad_2);

									}

									if (key_tContextLoad_2 != null
											&& "hoursToKeepHourly"
													.equals(key_tContextLoad_2)) {

										context.hoursToKeepHourly = Integer
												.parseInt(value_tContextLoad_2);

									}

									if (key_tContextLoad_2 != null
											&& "hoursToKeepSamples"
													.equals(key_tContextLoad_2)) {

										context.hoursToKeepSamples = Integer
												.parseInt(value_tContextLoad_2);

									}

									if (key_tContextLoad_2 != null
											&& "lastErrorSent"
													.equals(key_tContextLoad_2)) {
										String context_lastErrorSent_value = context
												.getProperty("lastErrorSent");
										if (context_lastErrorSent_value == null)
											context_lastErrorSent_value = "";
										int context_lastErrorSent_pos = context_lastErrorSent_value
												.indexOf(";");
										String context_lastErrorSent_pattern = "yyyy-MM-dd HH:mm:ss";
										if (context_lastErrorSent_pos > -1) {
											context_lastErrorSent_pattern = context_lastErrorSent_value
													.substring(0,
															context_lastErrorSent_pos);
										}
										context.lastErrorSent = (java.util.Date) (new java.text.SimpleDateFormat(
												context_lastErrorSent_pattern)
												.parse(value_tContextLoad_2));

									}

									if (key_tContextLoad_2 != null
											&& "ovirtEngineDbDriverClass"
													.equals(key_tContextLoad_2)) {
										context.ovirtEngineDbDriverClass = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtEngineDbJdbcConnection"
													.equals(key_tContextLoad_2)) {
										context.ovirtEngineDbJdbcConnection = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtEngineDbPassword"
													.equals(key_tContextLoad_2)) {
										context.ovirtEngineDbPassword = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtEngineDbUser"
													.equals(key_tContextLoad_2)) {
										context.ovirtEngineDbUser = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtEnginePortalAddress"
													.equals(key_tContextLoad_2)) {
										context.ovirtEnginePortalAddress = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtEnginePortalConnectionProtocol"
													.equals(key_tContextLoad_2)) {
										context.ovirtEnginePortalConnectionProtocol = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtEnginePortalPort"
													.equals(key_tContextLoad_2)) {
										context.ovirtEnginePortalPort = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtHistoryDbDriverClass"
													.equals(key_tContextLoad_2)) {
										context.ovirtHistoryDbDriverClass = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtHistoryDbJdbcConnection"
													.equals(key_tContextLoad_2)) {
										context.ovirtHistoryDbJdbcConnection = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtHistoryDbPassword"
													.equals(key_tContextLoad_2)) {
										context.ovirtHistoryDbPassword = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "ovirtHistoryDbUser"
													.equals(key_tContextLoad_2)) {
										context.ovirtHistoryDbUser = value_tContextLoad_2;
									}

									if (key_tContextLoad_2 != null
											&& "runDeleteTime"
													.equals(key_tContextLoad_2)) {

										context.runDeleteTime = Integer
												.parseInt(value_tContextLoad_2);

									}

									if (key_tContextLoad_2 != null
											&& "runInterleave"
													.equals(key_tContextLoad_2)) {

										context.runInterleave = Integer
												.parseInt(value_tContextLoad_2);

									}

									if (context.getProperty(key_tContextLoad_2) != null) {
										assignList_tContextLoad_2
												.add(key_tContextLoad_2);
									} else {
										newPropertyList_tContextLoad_2
												.add(key_tContextLoad_2);
									}
									context.setProperty(key_tContextLoad_2,
											value_tContextLoad_2);
								} catch (Exception e) {
									System.err.println("Set value for key: "
											+ key_tContextLoad_2
											+ " failed, error message: "
											+ e.getMessage());
								}
								nb_line_tContextLoad_2++;
							}
							// ////////////////////////

							tos_count_tContextLoad_2++;

							/**
							 * [tContextLoad_2 main ] stop
							 */

						} // End of branch "five_min_check"

						// Start of branch "event_output"
						if (event_output != null) {

							/**
							 * [tJDBCOutput_1 main ] start
							 */

							currentComponent = "tJDBCOutput_1";

							whetherReject_tJDBCOutput_1 = false;
							if (event_output.log_time != null) {
								pstmt_tJDBCOutput_1
										.setTimestamp(1,
												new java.sql.Timestamp(
														event_output.log_time
																.getTime()));
							} else {
								pstmt_tJDBCOutput_1.setNull(1,
										java.sql.Types.DATE);
							}

							if (event_output.log_type_name == null) {
								pstmt_tJDBCOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(2,
										event_output.log_type_name);
							}

							pstmt_tJDBCOutput_1
									.setInt(3, event_output.log_type);

							pstmt_tJDBCOutput_1
									.setInt(4, event_output.severity);

							if (event_output.message == null) {
								pstmt_tJDBCOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_1.setString(5,
										event_output.message);
							}

							try {
								insertedCount_tJDBCOutput_1 = insertedCount_tJDBCOutput_1
										+ pstmt_tJDBCOutput_1.executeUpdate();
								nb_line_tJDBCOutput_1++;
							} catch (Exception e) {
								whetherReject_tJDBCOutput_1 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_1++;

							/**
							 * [tJDBCOutput_1 main ] stop
							 */

						} // End of branch "event_output"

					} // G_TM_M_280 close main tMap filter for table 'row5'

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

				/**
				 * [tContextLoad_2 end ] start
				 */

				currentComponent = "tContextLoad_2";

				java.util.Enumeration<?> enu_tContextLoad_2 = context
						.propertyNames();
				while (enu_tContextLoad_2.hasMoreElements()) {
					String key_tContextLoad_2 = (String) enu_tContextLoad_2
							.nextElement();
					if (!assignList_tContextLoad_2.contains(key_tContextLoad_2)
							&& !newPropertyList_tContextLoad_2
									.contains(key_tContextLoad_2)) {
						noAssignList_tContextLoad_2.add(key_tContextLoad_2);
					}
				}

				String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2
						.toString();
				String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2
						.substring(1,
								newPropertyStr_tContextLoad_2.length() - 1);

				String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2
						.toString();
				String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2
						.substring(1, noAssignStr_tContextLoad_2.length() - 1);

				globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_2);
				globalMap.put("tContextLoad_2_KEY_NOT_LOADED",
						noAssign_tContextLoad_2);

				globalMap.put("tContextLoad_2_NB_LINE", nb_line_tContextLoad_2);

				resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread
						.currentThread().getId()
						+ "", "", "", "", "", resumeUtil
						.convertToJsonText(context));

				ok_Hash.put("tContextLoad_2", true);
				end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				/**
				 * [tContextLoad_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock = new byte[0];
		static byte[] commonByteArray = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray.length) {
					if (length < 1024 && commonByteArray.length == 0) {
						commonByteArray = new byte[1024];
					} else {
						commonByteArray = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray, 0, length);
				strReturn = new String(commonByteArray, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_CONSOLE begin ] start
				 */

				ok_Hash.put("talendLogs_CONSOLE", false);
				start_Hash
						.put("talendLogs_CONSOLE", System.currentTimeMillis());
				currentComponent = "talendLogs_CONSOLE";

				int tos_count_talendLogs_CONSOLE = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
				java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

				StringBuilder strBuffer_talendLogs_CONSOLE = null;
				int nb_line_talendLogs_CONSOLE = 0;
				// /////////////////////

				/**
				 * [talendLogs_CONSOLE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
						.getMessages()) {
					row_talendLogs_LOGS.type = lcm.getType();
					row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row_talendLogs_LOGS.priority = lcm.getPriority();
					row_talendLogs_LOGS.message = lcm.getMessage();
					row_talendLogs_LOGS.code = lcm.getCode();

					row_talendLogs_LOGS.moment = java.util.Calendar
							.getInstance().getTime();

					row_talendLogs_LOGS.pid = pid;
					row_talendLogs_LOGS.root_pid = rootPid;
					row_talendLogs_LOGS.father_pid = fatherPid;

					row_talendLogs_LOGS.project = projectName;
					row_talendLogs_LOGS.job = jobName;
					row_talendLogs_LOGS.context = contextStr;

					/**
					 * [talendLogs_LOGS begin ] stop
					 */
					/**
					 * [talendLogs_LOGS main ] start
					 */

					currentComponent = "talendLogs_LOGS";

					tos_count_talendLogs_LOGS++;

					/**
					 * [talendLogs_LOGS main ] stop
					 */

					/**
					 * [talendLogs_CONSOLE main ] start
					 */

					currentComponent = "talendLogs_CONSOLE";

					// /////////////////////

					strBuffer_talendLogs_CONSOLE = new StringBuilder();

					if (row_talendLogs_LOGS.moment != null) { //

						strBuffer_talendLogs_CONSOLE.append(FormatterUtils
								.format_Date(row_talendLogs_LOGS.moment,
										"yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.root_pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.root_pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.father_pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.father_pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.project != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.project));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.job != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.job));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.context != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.context));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.priority != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.priority));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.type != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.type));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.origin != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.origin));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.message != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.message));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.code != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.code));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE",
								consoleOut_talendLogs_CONSOLE);
					}

					consoleOut_talendLogs_CONSOLE
							.println(strBuffer_talendLogs_CONSOLE.toString());
					consoleOut_talendLogs_CONSOLE.flush();
					nb_line_talendLogs_CONSOLE++;
					// ////

					// ////

					// /////////////////////

					tos_count_talendLogs_CONSOLE++;

					/**
					 * [talendLogs_CONSOLE main ] stop
					 */

					/**
					 * [talendLogs_LOGS end ] start
					 */

					currentComponent = "talendLogs_LOGS";

				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_CONSOLE end ] start
				 */

				currentComponent = "talendLogs_CONSOLE";

				// ////
				// ////
				globalMap.put("talendLogs_CONSOLE_NB_LINE",
						nb_line_talendLogs_CONSOLE);

				// /////////////////////

				ok_Hash.put("talendLogs_CONSOLE", true);
				end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				/**
				 * [talendLogs_CONSOLE end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}
	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final HistoryETL HistoryETLClass = new HistoryETL();

		int exitCode = HistoryETLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = HistoryETL.class.getClassLoader()
					.getResourceAsStream(
							"ovirt_dwh/historyetl_3_0/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}

				if (!context_param.isEmpty()) {
					context.putAll(context_param);
				}

				try {
					context.hoursToKeepDaily = Integer.parseInt(context
							.getProperty("hoursToKeepDaily"));
				} catch (NumberFormatException e) {
					context.hoursToKeepDaily = null;
				}

				try {
					context.hoursToKeepHourly = Integer.parseInt(context
							.getProperty("hoursToKeepHourly"));
				} catch (NumberFormatException e) {
					context.hoursToKeepHourly = null;
				}

				try {
					context.hoursToKeepSamples = Integer.parseInt(context
							.getProperty("hoursToKeepSamples"));
				} catch (NumberFormatException e) {
					context.hoursToKeepSamples = null;
				}

				try {
					String context_lastErrorSent_value = context
							.getProperty("lastErrorSent");
					if (context_lastErrorSent_value == null) {
						context_lastErrorSent_value = "";
					}
					int context_lastErrorSent_pos = context_lastErrorSent_value
							.indexOf(";");
					String context_lastErrorSent_pattern = "yyyy-MM-dd HH:mm:ss";
					if (context_lastErrorSent_pos > -1) {
						context_lastErrorSent_pattern = context_lastErrorSent_value
								.substring(0, context_lastErrorSent_pos);
						context_lastErrorSent_value = context_lastErrorSent_value
								.substring(context_lastErrorSent_pos + 1);
					}

					context.lastErrorSent = (java.util.Date) (new java.text.SimpleDateFormat(
							context_lastErrorSent_pattern)
							.parse(context_lastErrorSent_value));

				} catch (ParseException e) {
					context.lastErrorSent = null;
				}

				context.ovirtEngineDbDriverClass = (String) context
						.getProperty("ovirtEngineDbDriverClass");

				context.ovirtEngineDbJdbcConnection = (String) context
						.getProperty("ovirtEngineDbJdbcConnection");

				context.ovirtEngineDbPassword = (java.lang.String) context
						.getProperty("ovirtEngineDbPassword");

				context.ovirtEngineDbUser = (String) context
						.getProperty("ovirtEngineDbUser");

				context.ovirtEnginePortalAddress = (String) context
						.getProperty("ovirtEnginePortalAddress");

				context.ovirtEnginePortalConnectionProtocol = (String) context
						.getProperty("ovirtEnginePortalConnectionProtocol");

				context.ovirtEnginePortalPort = (String) context
						.getProperty("ovirtEnginePortalPort");

				context.ovirtHistoryDbDriverClass = (String) context
						.getProperty("ovirtHistoryDbDriverClass");

				context.ovirtHistoryDbJdbcConnection = (String) context
						.getProperty("ovirtHistoryDbJdbcConnection");

				context.ovirtHistoryDbPassword = (java.lang.String) context
						.getProperty("ovirtHistoryDbPassword");

				context.ovirtHistoryDbUser = (String) context
						.getProperty("ovirtHistoryDbUser");

				try {
					context.runDeleteTime = Integer.parseInt(context
							.getProperty("runDeleteTime"));
				} catch (NumberFormatException e) {
					context.runDeleteTime = null;
				}

				try {
					context.runInterleave = Integer.parseInt(context
							.getProperty("runInterleave"));
				} catch (NumberFormatException e) {
					context.runInterleave = null;
				}

			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("hoursToKeepDaily")) {
				context.hoursToKeepDaily = (Integer) parentContextMap
						.get("hoursToKeepDaily");
			}
			if (parentContextMap.containsKey("hoursToKeepHourly")) {
				context.hoursToKeepHourly = (Integer) parentContextMap
						.get("hoursToKeepHourly");
			}
			if (parentContextMap.containsKey("hoursToKeepSamples")) {
				context.hoursToKeepSamples = (Integer) parentContextMap
						.get("hoursToKeepSamples");
			}
			if (parentContextMap.containsKey("lastErrorSent")) {
				context.lastErrorSent = (java.util.Date) parentContextMap
						.get("lastErrorSent");
			}
			if (parentContextMap.containsKey("ovirtEngineDbDriverClass")) {
				context.ovirtEngineDbDriverClass = (String) parentContextMap
						.get("ovirtEngineDbDriverClass");
			}
			if (parentContextMap.containsKey("ovirtEngineDbJdbcConnection")) {
				context.ovirtEngineDbJdbcConnection = (String) parentContextMap
						.get("ovirtEngineDbJdbcConnection");
			}
			if (parentContextMap.containsKey("ovirtEngineDbPassword")) {
				context.ovirtEngineDbPassword = (java.lang.String) parentContextMap
						.get("ovirtEngineDbPassword");
			}
			if (parentContextMap.containsKey("ovirtEngineDbUser")) {
				context.ovirtEngineDbUser = (String) parentContextMap
						.get("ovirtEngineDbUser");
			}
			if (parentContextMap.containsKey("ovirtEnginePortalAddress")) {
				context.ovirtEnginePortalAddress = (String) parentContextMap
						.get("ovirtEnginePortalAddress");
			}
			if (parentContextMap
					.containsKey("ovirtEnginePortalConnectionProtocol")) {
				context.ovirtEnginePortalConnectionProtocol = (String) parentContextMap
						.get("ovirtEnginePortalConnectionProtocol");
			}
			if (parentContextMap.containsKey("ovirtEnginePortalPort")) {
				context.ovirtEnginePortalPort = (String) parentContextMap
						.get("ovirtEnginePortalPort");
			}
			if (parentContextMap.containsKey("ovirtHistoryDbDriverClass")) {
				context.ovirtHistoryDbDriverClass = (String) parentContextMap
						.get("ovirtHistoryDbDriverClass");
			}
			if (parentContextMap.containsKey("ovirtHistoryDbJdbcConnection")) {
				context.ovirtHistoryDbJdbcConnection = (String) parentContextMap
						.get("ovirtHistoryDbJdbcConnection");
			}
			if (parentContextMap.containsKey("ovirtHistoryDbPassword")) {
				context.ovirtHistoryDbPassword = (java.lang.String) parentContextMap
						.get("ovirtHistoryDbPassword");
			}
			if (parentContextMap.containsKey("ovirtHistoryDbUser")) {
				context.ovirtHistoryDbUser = (String) parentContextMap
						.get("ovirtHistoryDbUser");
			}
			if (parentContextMap.containsKey("runDeleteTime")) {
				context.runDeleteTime = (Integer) parentContextMap
						.get("runDeleteTime");
			}
			if (parentContextMap.containsKey("runInterleave")) {
				context.runInterleave = (Integer) parentContextMap
						.get("runInterleave");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			status = "failure";
			e_tPrejob_1.printStackTrace();
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tRunJob_4Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tRunJob_4) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tRunJob_4.printStackTrace();
					globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tWaitForFile_1Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tWaitForFile_1) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tWaitForFile_1.printStackTrace();
					globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tRunJob_2Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tRunJob_2) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tRunJob_2.printStackTrace();
					globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJava_3Process(globalMap);
					((java.util.Map) threadLocal.get()).put("status", "end");
				} catch (TalendException e_tJava_3) {
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					e_tJava_3.printStackTrace();
					globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

				} finally {
				}

				Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
						.get()).get("errorCode"));
				String localStatus = (String) (((java.util.Map) threadLocal
						.get()).get("status"));
				if (localErrorCode != null) {
					if (errorCode == null
							|| localErrorCode.compareTo(errorCode) > 0) {
						errorCode = localErrorCode;
					}
				}
				if (!status.equals("failure")) {
					status = localStatus;
				}

				runningThreadCount.add(-1);
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			status = "failure";
			e_tPostjob_1.printStackTrace();
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

		} finally {
		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : HistoryETL");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				context_param.put(keyValue.substring(0, index),
						replaceEscapeChars(keyValue.substring(index + 1)));
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 225043 characters generated by Talend Open Studio for Data Integration on the
 * March 7, 2012 5:27:34 PM IST
 ************************************************************************************************/
